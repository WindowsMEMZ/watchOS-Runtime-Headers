//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1490.0.4.0.0
//
#ifndef NSURLRequest_h
#define NSURLRequest_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSMutableCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"
#include "NSURLRequestInternal.h"

@class NSData, NSDictionary, NSInputStream, NSString, NSURL;

@interface NSURLRequest : NSObject<NSSecureCoding, NSCopying, NSMutableCopying> {
  /* instance variables */
  NSURLRequestInternal *_internal;
}

@property (readonly, copy) NSString *HTTPMethod;
@property (readonly, copy) NSDictionary *allHTTPHeaderFields;
@property (readonly, copy) NSData *HTTPBody;
@property (readonly, retain) NSInputStream *HTTPBodyStream;
@property (readonly) BOOL HTTPShouldHandleCookies;
@property (readonly) BOOL HTTPShouldUsePipelining;
@property (readonly) id HTTPPropertyList;
@property (readonly) void * _inner;
@property (readonly, copy) NSURL *URL;
@property (readonly) unsigned long long cachePolicy;
@property (readonly) double timeoutInterval;
@property (readonly, copy) NSURL *mainDocumentURL;
@property (readonly) unsigned long long networkServiceType;
@property (readonly) BOOL allowsCellularAccess;
@property (readonly) BOOL allowsExpensiveNetworkAccess;
@property (readonly) BOOL allowsConstrainedNetworkAccess;
@property (readonly) BOOL assumesHTTP3Capable;
@property (readonly) unsigned long long attribution;
@property (readonly) BOOL requiresDNSSECValidation;

/* class methods */
+ (BOOL)allowsAnyHTTPSCertificateForHost:(id)host;
+ (void)setAllowsAnyHTTPSCertificate:(BOOL)httpscertificate forHost:(id)host;
+ (id)allowsSpecificHTTPSCertificateForHost:(id)host;
+ (void)setAllowsSpecificHTTPSCertificate:(id)httpscertificate forHost:(id)host;
+ (id)requestWithURL:(id)url cachePolicy:(unsigned long long)policy timeoutInterval:(double)interval;
+ (id)requestWithURL:(id)url;
+ (BOOL)supportsSecureCoding;
+ (void)setDefaultTimeoutInterval:(double)interval;
+ (double)defaultTimeoutInterval;

/* instance methods */
- (id)initWithHTTPPropertyList:(id)list;
- (id)_allHTTPHeaderFieldsAsArrays;
- (id)valueForHTTPHeaderField:(id)field;
- (id)HTTPContentType;
- (id)HTTPExtraCookies;
- (id)HTTPReferrer;
- (id)HTTPUserAgent;
- (id)contentDispositionEncodingFallbackArray;
- (unsigned long long)expectedWorkload;
- (double)_timeWindowDelay;
- (double)_timeWindowDuration;
- (id)_startTimeoutDate;
- (BOOL)_requiresShortConnectionTimeout;
- (double)_payloadTransmissionTimeout;
- (BOOL)_preventHSTSStorage;
- (BOOL)_ignoreHSTS;
- (BOOL)_schemeWasUpgradedDueToDynamicHSTS;
- (BOOL)_isIdempotent;
- (BOOL)_isSafeRequestForBackgroundDownload;
- (id)initWithURL:(id)url cachePolicy:(unsigned long long)policy timeoutInterval:(double)interval;
- (id)_initWithCFURLRequest:(struct _CFURLRequest *)cfurlrequest;
- (id)initWithURL:(id)url;
- (id)_initWithInternal:(id)internal;
- (id)init;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (struct _CFURLRequest *)_CFURLRequest;
- (struct __CFURL *)cfURL;
- (void)dealloc;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)equal;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)mutableCopyWithZone:(struct _NSZone *)zone;
- (id)_copyReplacingURLWithURL:(id)url;
- (BOOL)_URLHasScheme:(id)scheme;
- (id)_propertyForKey:(id)key;
- (void)_setProperty:(id)property forKey:(id)key;
- (void)_removePropertyForKey:(id)key;
- (id)_allProtocolProperties;
- (id)boundInterfaceIdentifier;
- (BOOL)_isKnownTracker;
- (BOOL)_needsNetworkTrackingPrevention;
- (BOOL)_isNonAppInitiated;
- (id)_trackerContext;
- (BOOL)_privacyProxyFailClosed;
- (BOOL)_privacyProxyFailClosedForUnreachableNonMainHosts;
- (BOOL)_privacyProxyFailClosedForUnreachableHosts;
- (BOOL)_prohibitPrivacyProxy;
- (BOOL)_allowPrivateAccessTokensForThirdParty;
- (BOOL)_useEnhancedPrivacyMode;
- (BOOL)_blockTrackers;
- (BOOL)_failInsecureLoadWithHTTPSDNSRecord;
- (BOOL)_isWebSearchContent;
- (unsigned long long)_allowedProtocolTypes;
@end

#endif /* NSURLRequest_h */
