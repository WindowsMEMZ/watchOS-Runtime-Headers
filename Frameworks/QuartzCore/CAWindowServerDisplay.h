//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1110.5.0.0.0
//
#ifndef CAWindowServerDisplay_h
#define CAWindowServerDisplay_h
@import Foundation;

#include "CABrightnessControl-Protocol.h"
#include "CAPixelConstraints-Protocol.h"
#include "CAPresetTransaction-Protocol.h"
#include "CAWindowServerDisplay.h"

@class NSDictionary, NSSet, NSString, NSUUID;

@interface CAWindowServerDisplay : NSObject<CABrightnessControl, CAPresetTransaction> {
  /* instance variables */
  struct CAWindowServerDisplayImpl { struct Mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x0; } x0; struct Server * x1; struct CABrightnessTransaction { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; struct { float x0[9] } x9; float x10; BOOL x11; unsigned int x12; } x2; id /* block */ x3; id x4; id x5; id x6; id x7; BOOL x8; BOOL x9; } * _impl;
}

@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (readonly) struct CGSize { double x0; double x1; } nativeSize;
@property (readonly) struct CGSize { double x0; double x1; } touchScales;
@property double scale;
@property struct CGSize { double x0; double x1; } scales;
@property BOOL scalePreservesAspect;
@property (readonly) double minimumScale;
@property (readonly) double maximumScale;
@property (readonly) unsigned long long maxLayerBandwidth;
@property (readonly) struct CGSize { double x0; double x1; } panelPhysicalSize;
@property (readonly) unsigned long long panelPointsPerInch;
@property (readonly) NSString *name;
@property (readonly) NSString *deviceName;
@property (readonly) unsigned int displayId;
@property (readonly) long long displayType;
@property (readonly) NSString *uniqueId;
@property (readonly) unsigned int rendererFlags;
@property (readonly) NSSet *clones;
@property (readonly) CAWindowServerDisplay *cloneMaster;
@property BOOL blanked;
@property BOOL blankingRemovesPower;
@property BOOL flipBookEnabled;
@property BOOL flipBookSuppressed;
@property (readonly) BOOL flipBookActive;
@property (copy) NSString *orientation;
@property (copy) NSString *overscanAdjustment;
@property double overscanAmount;
@property struct CGSize { double x0; double x1; } overscanAmounts;
@property BOOL invertsColors;
@property BOOL allowsExtendedDynamicRange;
@property BOOL grayscale;
@property (readonly) BOOL supportsGamutRemap;
@property float contrast;
@property float maximumBrightness;
@property (readonly) float maximumLuminance;
@property float nits;
@property float idealRefreshRate;
@property BOOL usesPreferredModeRefreshRate;
@property (copy, nonatomic) NSString *colorMode;
@property BOOL allowsVirtualModes;
@property BOOL mirroringEnabled;
@property (readonly) BOOL supportsExtendedColors;
@property long long tag;
@property int processId;
@property (copy) NSString *TVMode;
@property (copy) NSString *TVSignalType;
@property (copy) id /* block */ hotPlugCallback;
@property (copy) id /* block */ brightnessCallback;
@property (copy) id /* block */ updateRequestCallback;
@property BOOL secure;
@property BOOL allowsDisplayCompositing;
@property (readonly) double nextWakeupTime;
@property (copy) id /* block */ frameInfoCallback;
@property (readonly) long long frameInfoCallbackVersion;
@property (readonly) void * detachingDisplay;
@property (readonly) BOOL detaching;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } detachingRect;
@property (readonly) unsigned long long vblDelta;
@property (readonly) unsigned long long previousVBL;
@property (readonly) unsigned long long minimumFrameTime;
@property (readonly) unsigned long long maximumFrameTime;
@property (readonly) unsigned long long minimumVRRVBLDelta;
@property (readonly) unsigned long long maximumVRRVBLDelta;
@property BOOL disablesUpdates;
@property BOOL disabled;
@property (readonly) struct { float x0; float x1; } whitepoint;
@property (readonly) struct { struct { float x0; float x1; } x0; struct { float x0; float x1; } x1; struct { float x0; float x1; } x2; struct { float x0; float x1; } x3; } chromaticities;
@property (readonly) float gamma;
@property (readonly) long long transportType;
@property BOOL enabled;
@property (readonly) unsigned int framebufferFormat;
@property (readonly) BOOL needsUpdate;
@property (readonly) BOOL supportsCursor;
@property (readonly) struct CGSize { double x0; double x1; } maximumCursorSize;
@property struct CGPoint { double x0; double x1; } cursorPosition;
@property (copy) NSDictionary *cursorDictionary;
@property BOOL cursorHidden;
@property BOOL cursorEnabled;
@property (readonly) BOOL tripleBuffered;
@property (readonly) unsigned long long minimumSourceRectSize;
@property (readonly) unsigned long long maximumSourceRectWidth;
@property (readonly) unsigned long long maximumSourceRectPixels;
@property (retain, nonatomic) NSDictionary *brightnessCapabilities;
@property (readonly) BOOL supportsColorSpaces;
@property (retain) struct CGColorSpace * blendColorSpace;
@property (retain) struct CGColorSpace * displayColorSpace;
@property struct CGColorTRC { int x0; union { struct CGColorTRCParametric { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x0; struct CGColorTRCTable { unsigned long long x0; float * x1; struct CGColorTRCBoundaryExtension { float x0; float x1; } x2; struct CGColorTRCBoundaryExtension { float x0; float x1; } x3; } x1; } x1; } systemGamma;
@property struct CGColorTRC { int x0; union { struct CGColorTRCParametric { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x0; struct CGColorTRCTable { unsigned long long x0; float * x1; struct CGColorTRCBoundaryExtension { float x0; float x1; } x2; struct CGColorTRCBoundaryExtension { float x0; float x1; } x3; } x1; } x1; } blackpointAdaptation;
@property BOOL accessibilityFrameRateLimitEnabled;
@property (readonly) NSObject<CAPixelConstraints> *averagePixelConstraints;
@property (readonly) NSDictionary *virtualDisplayMode;
@property (readonly, nonatomic) unsigned long long productId;
@property (readonly, nonatomic) unsigned long long vendorId;
@property (readonly, nonatomic) NSUUID *uuid;
@property (readonly, nonatomic) BOOL brightnessAvailable;
@property (readonly, nonatomic) BOOL whitePointAvailable;
@property (readonly, nonatomic) BOOL whitePointD50XYZ;
@property (readonly, nonatomic) unsigned int serviceObject;
@property (nonatomic) double maximumHDRLuminance;
@property (nonatomic) double maximumSDRLuminance;
@property (nonatomic) double minimumLuminance;
@property (nonatomic) double maximumReferenceLuminance;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) long long trinityCabalConfig;
@property (nonatomic) BOOL preserveAppleSRGBGammaResponse;
@property (nonatomic) BOOL isReferencePreset;

/* instance methods */
- (id)_initWithCADisplayServer:(void *)server;
- (void)invalidate;
- (void)dealloc;
- (void)update;
- (unsigned int)contextIdAtPosition:(struct CGPoint { double x0; double x1; })position;
- (unsigned int)contextIdAtPosition:(struct CGPoint { double x0; double x1; })position excludingContextIds:(id)ids;
- (id)hitTestAtPosition:(struct CGPoint { double x0; double x1; })position options:(id)options;
- (unsigned int)clientPortAtPosition:(struct CGPoint { double x0; double x1; })position;
- (unsigned int)clientPortOfContextId:(unsigned int)id;
- (unsigned int)taskNamePortOfContextId:(unsigned int)id;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toContextId:(unsigned int)id;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point fromContextId:(unsigned int)id;
- (struct CATransform3D { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; })transformFromLayerId:(unsigned long long)id inContextId:(unsigned int)id;
- (void)addClone:(id)clone options:(id)options;
- (void)addClone:(id)clone;
- (void)removeClone:(id)clone;
- (void)removeAllClones;
- (void)powerStateDidChange:(id)change;
- (BOOL)isBlanked;
- (void)willUnblank;
- (void)resetConfiguration;
- (void)setCalibrationPhase:(unsigned int)phase forIdentifier:(unsigned int)identifier;
- (BOOL)isFlipBookEnabled;
- (BOOL)isFlipBookSuppressed;
- (BOOL)isFlipBookActive;
- (void)setApertureOffset:(double)offset;
- (double)apertureOffset;
- (BOOL)isGrayscale;
- (void)setColorMatrix:(const float *)matrix scale:(float)scale rampDuration:(double)duration;
- (void)abortColorMatrixRamp:(float *)ramp scale:(float *)scale;
- (void)setUserAdjustment:(float *)adjustment scale:(float)scale;
- (void)setContrastEnhancer:(float)enhancer rampDuration:(double)duration;
- (void)abortContrastEnhancerRamp:(float *)ramp;
- (void)setAccessibilityColorMatrix:(float *)matrix scale:(float)scale;
- (void)setGamutRemapMatrices:(const float *)matrices count:(unsigned long long)count;
- (void)setGamutRemapConfigPlanes:(const struct { float x0; float x1; float x2; float x3; unsigned short x4; unsigned short x5; BOOL x6; BOOL x7; } *)planes planeCount:(unsigned long long)count XYZToYuvCoefficients:(const float *)coefficients YuvToXYZCoefficients:(const float *)xyzcoefficients;
- (void)setMinimumRefreshRate:(float)rate;
- (float)minimumRefreshRate;
- (void)setMaximumRefreshRate:(float)rate;
- (float)maximumRefreshRate;
- (BOOL)isSecure;
- (void)freeze;
- (struct __IOSurface *)acquireFrozenSurface;
- (void)emitBrightnessError:(id *)error;
- (void)emitWhitePointError:(id *)error;
- (void)setAmbient:(float)ambient;
- (void)setFilteredAmbient:(float)ambient;
- (void)setContrastEnhancer:(float)enhancer;
- (void)setHeadroom:(float)headroom;
- (void)setPotentialHeadroom:(float)headroom;
- (void)setSDRBrightness:(float)sdrbrightness;
- (void)setBrightnessLimit:(float)limit;
- (void)setBrightnessControlDisabled:(BOOL)disabled;
- (void)setLowAmbientAdaptation:(float)adaptation;
- (void)setHighAmbientAdaptation:(float)adaptation;
- (void)setWhitePointMatrix:(const struct { float x0[9] } *)matrix scale:(float)scale;
- (BOOL)commitBrightness:(id *)brightness;
- (BOOL)forceCommitBrightness:(id *)brightness withBlock:(id /* block */)block;
- (BOOL)commitBrightness:(id *)brightness withBlock:(id /* block */)block;
- (BOOL)commitPreset;
- (BOOL)setWhitePoint:(const struct { float x0[9] } *)point rampDuration:(double)duration error:(id *)error;
- (BOOL)abortWhitePointRamp:(struct { float x0[9] } *)ramp error:(id *)error;
- (BOOL)canUpdate:(BOOL)update;
- (BOOL)canUpdateWithFlags:(unsigned int)flags;
- (void)beginExternalUpdate:(void *)update usingSoftwareRenderer:(BOOL)renderer;
- (BOOL)finishExternalUpdate:(void *)update withFlags:(unsigned int)flags;
- (BOOL)finishExternalUpdate:(void *)update withFlags:(unsigned int)flags debugInfo:(unsigned long long)info;
- (void)activateReplay;
- (void)presentSurface:(struct __IOSurface *)surface withOptions:(id)options;
- (BOOL)isDetaching;
- (void)registerForNotifications:(id)notifications withBlock:(id /* block */)block;
- (void)unregisterNotificationBlocks;
- (id)notificationQueue;
- (void)setNotificationQueue:(id)queue;
- (void)postNotification:(id)notification payload:(id)payload;
- (void)registerForSyncNotifications:(id)notifications withBlock:(id /* block */)block;
- (void)unregisterSyncNotificationBlocks;
- (id)syncNotificationQueue;
- (void)setSyncNotificationQueue:(id)queue;
- (void)postSyncNotification:(id)notification payload:(id)payload;
- (BOOL)setDigitalModes:(id)modes withTimings:(id)timings;
- (BOOL)setDigitalModes:(id)modes;
- (void)copyDisplayTimingsFromDisplay:(id)display;
- (void)addFramePresentationTimestamp:(unsigned long long)timestamp;
- (void)setGammaAdjustment:(struct CGColorTRC { int x0; union { struct CGColorTRCParametric { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; } x0; struct CGColorTRCTable { unsigned long long x0; float * x1; struct CGColorTRCBoundaryExtension { float x0; float x1; } x2; struct CGColorTRCBoundaryExtension { float x0; float x1; } x3; } x1; } x1; } x[3])adjustment;
- (void)renderForTime:(double)time;
- (BOOL)isMirroringEnabled;
@end

#endif /* CAWindowServerDisplay_h */
