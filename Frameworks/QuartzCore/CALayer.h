//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1110.5.0.0.0
//
#ifndef CALayer_h
#define CALayer_h
@import Foundation;

#include "CALayer.h"
#include "CAMediaTiming-Protocol.h"
#include "CAMeshTransform.h"
#include "CAPropertyInfo-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@class NSArray, NSDictionary, NSSet, NSString;
@protocol CALayerDelegate;

@interface CALayer : NSObject<CAPropertyInfo, NSSecureCoding, CAMediaTiming> {
  /* instance variables */
  struct _CALayerIvars { int refcount; unsigned int magic; void *layer; void *_objc_observation_info; } _attr;
}

@property (copy, @dynamic) NSArray *states;
@property (copy, @dynamic) NSArray *stateTransitions;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } visibleRect;
@property (copy) CAMeshTransform *meshTransform;
@property BOOL needsLayoutOnGeometryChange;
@property BOOL canDrawConcurrently;
@property BOOL acceleratesDrawing;
@property BOOL frozen;
@property BOOL allowsHitTesting;
@property BOOL hitTestsContentsAlphaChannel;
@property BOOL hitTestsAsOpaque;
@property BOOL clearsContext;
@property BOOL contentsOpaque;
@property BOOL contentsContainsSubtitles;
@property float gain;
@property BOOL literalContentsCenter;
@property (copy) NSString *contentsScaling;
@property struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } contentsTransform;
@property BOOL contentsAlignsToPixels;
@property BOOL contentsDither;
@property struct CGColor * contentsMultiplyColor;
@property (copy) NSString *contentsSwizzle;
@property (readonly) long long contentsGravityEnum;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentsDirtyRect;
@property BOOL invertsMask;
@property BOOL invertsShadow;
@property BOOL shadowPathIsBounds;
@property BOOL punchoutShadow;
@property double rimWidth;
@property struct CGColor * rimColor;
@property float rimOpacity;
@property BOOL rimPathIsBounds;
@property BOOL softRim;
@property BOOL borderPathIsBounds;
@property BOOL continuousCorners;
@property (retain) id cornerContents;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } cornerContentsCenter;
@property BOOL cornerContentsMasksEdges;
@property struct CACornerRadii { struct CGSize { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; struct CGSize { double x0; double x1; } x2; struct CGSize { double x0; double x1; } x3; } cornerRadii;
@property double motionBlurAmount;
@property BOOL sortsSublayers;
@property BOOL usesWebKitBehavior;
@property BOOL preloadsCache;
@property BOOL flipsHorizontalAxis;
@property BOOL rasterizationPrefersDisplayCompositing;
@property BOOL shouldFlatten;
@property BOOL shouldReflatten;
@property BOOL rasterizationPrefersWindowServerAwareBackdrops;
@property unsigned int disableUpdateMask;
@property BOOL definesDisplayRegionOfInterest;
@property BOOL allowsGroupBlending;
@property BOOL allowsDisplayCompositing;
@property BOOL createsCompositingGroup;
@property struct CGSize { double x0; double x1; } sizeRequisition;
@property struct CGSize { double x0; double x1; } backgroundColorPhase;
@property BOOL inheritsTiming;
@property (copy) NSArray *presentationModifiers;
@property (readonly) NSSet *identifiers;
@property NSObject<CALayerDelegate> *unsafeUnretainedDelegate;
@property (copy) NSString *securityMode;
@property BOOL toneMapToStandardDynamicRange;
@property BOOL treatRec709AsSRGB;
@property BOOL wantsExtendedDynamicRangeContent;
@property double contentsMaximumDesiredEDR;
@property double contentsEDRStrength;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property struct CGPoint { double x0; double x1; } position;
@property double zPosition;
@property struct CGPoint { double x0; double x1; } anchorPoint;
@property double anchorPointZ;
@property struct CATransform3D { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; } transform;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property BOOL hidden;
@property BOOL doubleSided;
@property BOOL geometryFlipped;
@property (readonly) CALayer *superlayer;
@property (copy) NSArray *sublayers;
@property struct CATransform3D { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; } sublayerTransform;
@property (retain) CALayer *mask;
@property BOOL masksToBounds;
@property (retain) id contents;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentsRect;
@property (copy) NSString *contentsGravity;
@property double contentsScale;
@property struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } contentsCenter;
@property (copy) NSString *contentsFormat;
@property (copy) NSString *minificationFilter;
@property (copy) NSString *magnificationFilter;
@property float minificationFilterBias;
@property BOOL opaque;
@property BOOL needsDisplayOnBoundsChange;
@property BOOL drawsAsynchronously;
@property unsigned int edgeAntialiasingMask;
@property BOOL allowsEdgeAntialiasing;
@property struct CGColor * backgroundColor;
@property double cornerRadius;
@property unsigned long long maskedCorners;
@property (copy) NSString *cornerCurve;
@property double borderWidth;
@property struct CGColor * borderColor;
@property float opacity;
@property BOOL allowsGroupOpacity;
@property (retain) id compositingFilter;
@property (copy) NSArray *filters;
@property (copy) NSArray *backgroundFilters;
@property BOOL shouldRasterize;
@property double rasterizationScale;
@property struct CGColor * shadowColor;
@property float shadowOpacity;
@property struct CGSize { double x0; double x1; } shadowOffset;
@property double shadowRadius;
@property struct CGPath * shadowPath;
@property (copy) NSDictionary *actions;
@property (copy) NSString *name;
@property (weak) NSObject<CALayerDelegate> *delegate;
@property (copy) NSDictionary *style;
@property double beginTime;
@property double duration;
@property float speed;
@property double timeOffset;
@property float repeatCount;
@property double repeatDuration;
@property BOOL autoreverses;
@property (copy) NSString *fillMode;

/* class methods */
+ (id)layerWithRenderLayer:(void *)layer;
+ (id)layerWithRenderLayer:(void *)layer options:(id)options;
+ (BOOL)needsLayoutForKey:(id)key;
+ (id)properties;
+ (undefined *)CA_setterForProperty:(const struct _CAPropertyInfo { unsigned int x0; unsigned int x1 :16; unsigned int x2 :16; SEL x3[2] char * x4; struct __CFString * x5; } *)property;
+ (undefined *)CA_getterForProperty:(const struct _CAPropertyInfo { unsigned int x0; unsigned int x1 :16; unsigned int x2 :16; SEL x3[2] char * x4; struct __CFString * x5; } *)property;
+ (BOOL)resolveInstanceMethod:(SEL)method;
+ (void)CAMLParserStartElement:(id)element;
+ (void)CAMLParserEndElement:(id)element;
+ (id)defaultValueForKey:(id)key;
+ (BOOL)needsDisplayForKey:(id)key;
+ (id)layer;
+ (id)allocWithZone:(struct _NSZone *)zone;
+ (void)initialize;
+ (BOOL)_hasRenderLayerSubclass;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)key;
+ (BOOL)CA_automaticallyNotifiesObservers:(Class)observers;
+ (BOOL)supportsSecureCoding;
+ (id)defaultActionForKey:(id)key;
+ (double)cornerCurveExpansionFactor:(id)factor;

/* instance methods */
- (id)optimizationOpportunities:(BOOL)opportunities;
- (BOOL)getRendererInfo:(struct _CARenderRendererInfo { int x0; unsigned int x1; unsigned int x2; } *)info size:(unsigned long long)size;
- (void)reloadValueForKeyPath:(id)path;
- (id)implicitAnimationForKeyPath:(id)path;
- (BOOL)_canDisplayConcurrently;
- (BOOL)drawsMipmapLevels;
- (BOOL)hasBeenCommitted;
- (void)clearHasBeenCommitted;
- (id)context;
- (void)invalidateContents;
- (void)prepareContents;
- (void)setContentsChanged;
- (unsigned int)_renderImageCopyFlags;
- (void *)regionBeingDrawn;
- (void)_prepareContext:(struct CGContext *)context;
- (BOOL)layoutIsActive;
- (void)layoutBelowIfNeeded;
- (BOOL)ignoresHitTesting;
- (BOOL)isDescendantOf:(id)of;
- (id)ancestorSharedWithLayer:(id)layer;
- (struct CGSize { double x0; double x1; })size;
- (id)layerBeingDrawn;
- (id)layerAtTime:(double)time;
- (void *)_copyRenderLayer:(void *)layer layerFlags:(unsigned int)flags commitFlags:(unsigned int *)flags;
- (void)_didCommitLayer:(void *)layer;
- (BOOL)_renderLayerDefinesProperty:(unsigned int)property;
- (unsigned int)_renderLayerPropertyAnimationFlags:(unsigned int)flags;
- (void)layerDidBecomeVisible:(BOOL)visible;
- (BOOL)_defersDidBecomeVisiblePostCommit;
- (void)addPresentationModifier:(id)modifier;
- (void)removePresentationModifier:(id)modifier;
- (void)addIdentifier:(id)identifier;
- (void)removeIdentifier:(id)identifier;
- (id)recursiveDescription;
- (void)CAMLParser:(id)camlparser setValue:(id)value forKey:(id)key;
- (void)encodeWithCAMLWriter:(id)camlwriter;
- (id)CAMLTypeForKey:(id)key;
- (BOOL)CAMLTypeSupportedForKey:(id)key;
- (BOOL)isFlipped;
- (void)setFlipped:(BOOL)flipped;
- (BOOL)isFrozen;
- (void)_scrollPoint:(struct CGPoint { double x0; double x1; })point fromLayer:(id)layer;
- (void)scrollPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_scrollRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fromLayer:(id)layer;
- (void)scrollRectToVisible:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visible;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_visibleRectOfLayer:(id)layer;
- (void)addState:(id)state;
- (void)insertState:(id)state atIndex:(unsigned int)index;
- (void)removeState:(id)state;
- (id)stateWithName:(id)name;
- (id)dependentStatesOfState:(id)state;
- (id)stateTransitionFrom:(id)from to:(id)to;
- (id)retain;
- (BOOL)retainWeakReference;
- (void)release;
- (unsigned long long)retainCount;
- (BOOL)allowsWeakReference;
- (id)init;
- (id)initWithLayer:(id)layer;
- (id)_initWithReference:(id)reference;
- (void)_dealloc;
- (void)dealloc;
- (id)debugDescription;
- (id)valueForKey:(id)key;
- (id)CA_archivingValueForKey:(id)key;
- (id)valueForUndefinedKey:(id)key;
- (void)setValue:(id)value forKey:(id)key;
- (void)setValue:(id)value forUndefinedKey:(id)key;
- (id)valueForKeyPath:(id)path;
- (void)setValue:(id)value forKeyPath:(id)path;
- (BOOL)CA_validateValue:(id)value forKey:(id)key;
- (void *)observationInfo;
- (void)setObservationInfo:(void *)info;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (BOOL)shouldArchiveValueForKey:(id)key;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })affineTransform;
- (void)setAffineTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (BOOL)isGeometryFlipped;
- (BOOL)contentsAreFlipped;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point fromLayer:(id)layer;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toLayer:(id)layer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fromLayer:(id)layer;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toLayer:(id)layer;
- (double)convertTime:(double)time fromLayer:(id)layer;
- (double)convertTime:(double)time toLayer:(id)layer;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test;
- (BOOL)containsPoint:(struct CGPoint { double x0; double x1; })point;
- (void)removeFromSuperlayer;
- (void)insertSublayer:(id)sublayer atIndex:(unsigned int)index;
- (void)addSublayer:(id)sublayer;
- (void)insertSublayer:(id)sublayer below:(id)below;
- (void)insertSublayer:(id)sublayer above:(id)above;
- (void)replaceSublayer:(id)sublayer with:(id)with;
- (id)actionForKey:(id)key;
- (void)addAnimation:(id)animation forKey:(id)key;
- (void)removeAllAnimations;
- (void)removeAnimationForKey:(id)key;
- (id)animationForKey:(id)key;
- (id)animationKeys;
- (BOOL)_scheduleAnimationTimer;
- (void)_cancelAnimationTimer;
- (id)presentationLayer;
- (id)modelLayer;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)needsDisplay;
- (void)displayIfNeeded;
- (void)renderInContext:(struct CGContext *)context;
- (void)_renderBackgroundInContext:(struct CGContext *)context;
- (void)_renderForegroundInContext:(struct CGContext *)context;
- (void)_renderSublayersInContext:(struct CGContext *)context;
- (void)_renderBorderInContext:(struct CGContext *)context;
- (int)_overrideImageFormat;
- (void)display;
- (void)_display;
- (void)_colorSpaceDidChange;
- (struct CGColorSpace *)_retainColorSpace;
- (void)_contentsFormatDidChange:(id)change;
- (void)drawInContext:(struct CGContext *)context;
- (id)_layoutHash;
- (id)_previousLayoutHash;
- (void)_setPreviousLayoutHash:(id)hash;
- (void)_saveCurrentLayoutHash;
- (void)_validateLayoutHashHasChangedWithLayoutTime:(double)time;
- (void)setNeedsLayout;
- (BOOL)needsLayout;
- (struct CGSize { double x0; double x1; })_preferredSize;
- (struct CGSize { double x0; double x1; })preferredFrameSize;
- (void)layoutIfNeeded;
- (void)layoutSublayers;
- (BOOL)_continuousCorners;
- (BOOL)_usesCornerRadii;
- (BOOL)isHidden;
- (BOOL)isDoubleSided;
- (BOOL)isOpaque;
@end

#endif /* CALayer_h */
