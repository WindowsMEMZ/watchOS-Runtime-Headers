//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1774.2.3.0.0
//
#ifndef CPTextLine_h
#define CPTextLine_h
@import Foundation;

#include "CPTextObject.h"
#include "CPCharSequence.h"
#include "CPDisposable-Protocol.h"

@class NSArray;

@interface CPTextLine : CPTextObject<CPDisposable> {
  /* instance variables */
  CPCharSequence *charSequence;
  struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } * wordArray;
  unsigned int wordCount;
  struct CPInlineContainer { unsigned int x0; id x1; struct CPInlineContainer * x2; } * inlineList;
  int lineNumber;
  int columnNumber;
  double baseline;
  BOOL baseLineIsNull;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } normalizedBounds;
  BOOL hasBeenSplit;
  BOOL hasBeenProcessed;
  BOOL maySplit;
  BOOL hasTabs;
  NSArray *columnBreaks;
  NSArray *xsegments;
  int levels;
  float maximumLetterGap;
  float maximumWordGap;
  int tabsBefore;
  BOOL irregular;
  struct CPPDFStyle { struct CGColor * x0; struct CGColorSpace * x1; struct CGColor * x2; struct CGColorSpace * x3; double x4; double x5; unsigned char x6; unsigned char x7; int x8; double x9; id x10; double x11; struct CGPDFObject * x12; struct CGPDFObject * x13; struct CGColor * x14; struct CPPDFStyle * x15; } * uniformStyle;
  unsigned short uniformStyleFlags;
  double monospaceWidth;
  unsigned int * spacesBefore;
  BOOL disposed;
}

@property (nonatomic) unsigned int leftSpacerIndex;
@property (nonatomic) unsigned int rightSpacerIndex;
@property (nonatomic) BOOL isListItem;
@property (nonatomic) unsigned int listSpacerIndex;
@property (nonatomic) BOOL lineBreakAfter;

/* instance methods */
- (id)init;
- (void)dispose;
- (void)finalize;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)setCharSequence:(id)sequence;
- (id)charSequence;
- (struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } *)wordArray;
- (struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } *)wordArrayOfSize:(unsigned int)size;
- (unsigned int)wordCount;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundsOfWordAtIndex:(unsigned int)index;
- (struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } *)wordAtIndex:(unsigned int)index;
- (struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } *)firstWord;
- (struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } *)lastWord;
- (unsigned int)inlineCount;
- (struct CPInlineContainer { unsigned int x0; id x1; struct CPInlineContainer * x2; } *)inlineList;
- (void)anchorChunk:(id)chunk atWordIndex:(unsigned int)index;
- (long long)zOrder;
- (int)align;
- (BOOL)hasJustifiedAlignment;
- (BOOL)changesFontAt:(id)at;
- (id)newTextLineFromWordAt:(unsigned int)at lengthInWords:(unsigned int)words;
- (BOOL)removeTextLines:(id)lines whereTrue:(undefined *)true passing:(void *)passing;
- (BOOL)mapToWords:(undefined *)words passing:(void *)passing;
- (BOOL)mapToWordsWithIndex:(undefined *)index passing:(void *)passing;
- (BOOL)mapToWordPairs:(undefined *)pairs passing:(void *)passing;
- (BOOL)mapToWordPairsWithIndex:(undefined *)index passing:(void *)passing;
- (id)properties;
- (void)setHasBeenSplit:(BOOL)split;
- (BOOL)hasBeenSplit;
- (void)setHasBeenProcessed:(BOOL)processed;
- (BOOL)hasBeenProcessed;
- (id)columnBreaks;
- (void)setColumnBreaks:(id)breaks;
- (void)accept:(id)accept;
- (void)setHasTabs:(BOOL)tabs;
- (BOOL)hasTabs;
- (void)setTabsBefore:(int)before;
- (int)tabsBefore;
- (void)fitBoundsToChildren;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (long long)baseLineAscending:(id)ascending;
- (long long)baseLineDescending:(id)descending;
- (long long)baseLineDescendingApprox:(id)approx;
- (BOOL)overlapsWith:(id)with;
- (BOOL)overlapsHorizontally:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })horizontally;
- (struct CGPoint { double x0; double x1; })anchor;
- (BOOL)hyphenated;
- (double)baseline;
- (void)setBaseline:(double)baseline;
- (void)setBaselineToNull;
- (BOOL)isIndivisible;
- (void)translateObjectYBy:(double)yby;
- (void)recomputeBaseline;
- (BOOL)styleIsUniform:(struct CPPDFStyle * *)uniform styleFlags:(unsigned short)flags;
- (BOOL)isMonospaced;
- (double)monospaceWidth;
- (unsigned int)spacesBeforeWordAtIndex:(unsigned int)index;
- (void)setSpaces:(unsigned int)spaces beforeWordAtIndex:(unsigned int)index;
- (int)levels;
- (void)setLevels:(int)levels;
- (void)recomputeLevels;
- (float)maximumLetterGap;
- (void)setMaximumLetterGap:(float)gap;
- (float)maximumWordGap;
- (void)setMaximumWordGap:(float)gap;
- (BOOL)irregular;
- (void)setIrregular:(BOOL)irregular;
- (id)attributes;
- (long long)topIsAbove:(id)above;
- (BOOL)hasDropCap;
- (double)medianFontSize;
- (double)rotationAngle;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })normalizedBounds;
@end

#endif /* CPTextLine_h */
