//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1774.2.3.0.0
//
#ifndef CPZoneBorder_h
#define CPZoneBorder_h
@import Foundation;

#include "CPCopying-Protocol.h"
#include "CPPage.h"
#include "NSCopying-Protocol.h"

@class NSMutableArray;

@interface CPZoneBorder : NSObject<NSCopying, CPCopying> {
  /* instance variables */
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } bounds;
  CPPage *page;
  NSMutableArray *ownerArray;
  NSMutableArray *graphicObjects;
  NSMutableArray *neighbors;
  NSMutableArray *intersections;
  BOOL isHorizontal;
  BOOL hasForwardVector;
  BOOL hasBackwardVector;
  double overhangMin;
  double overhangMax;
}

/* class methods */
+ (void)addIntersectionBetweenBorder:(id)border andBorder:(id)border atRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
+ (void)removeIntersectionBetweenBorder:(id)border andBorder:(id)border;
+ (void)outerVertices:(struct CGPoint { double x0; double x1; } *)vertices fromBorders:(id)borders swollenBy:(double)by;
+ (int)clockwiseWindingNumberOfShapeWithBorders:(id)borders;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })extendRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;

/* instance methods */
- (id)init;
- (id)initWithGraphicObject:(id)object;
- (id)initSuper;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)copyWithoutIntersections;
- (id)page;
- (void)addToArray:(id)array;
- (void)addToArray:(id)array atIndex:(unsigned int)index;
- (void)removeFromArray;
- (void)removeFromArrayAtIndex:(unsigned int)index;
- (id)ownerArray;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (long long)zOrder;
- (unsigned int)graphicObjectCount;
- (void)addGraphicObject:(id)object;
- (void)removeGraphicObjectAtIndex:(unsigned int)index;
- (id)graphicObjectAtIndex:(unsigned int)index;
- (id)graphicObjects;
- (unsigned int)neighborCount;
- (void)addNeighbor:(id)neighbor;
- (void)removeNeighborAtIndex:(unsigned int)index;
- (id)neighborAtIndex:(unsigned int)index;
- (BOOL)hasNeighborShape:(id)shape;
- (BOOL)hasNeighborShape:(id)shape atSide:(int)side;
- (void)setHasForwardVector:(BOOL)vector;
- (BOOL)hasForwardVector;
- (void)setHasBackwardVector:(BOOL)vector;
- (BOOL)hasBackwardVector;
- (void)setSide:(int)side ofPage:(id)page;
- (BOOL)isHorizontal;
- (BOOL)isVertical;
- (unsigned int)intersectionCount;
- (BOOL)intersectsWith:(id)with atRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect;
- (unsigned int)indexOfIntersectionWith:(id)with;
- (BOOL)windsClockwiseOnto:(id)onto;
- (id)getNextBorder:(unsigned int)border;
- (BOOL)hasClockwiseVectorAtIndex:(unsigned int)index startingForward:(BOOL)forward;
- (BOOL)hasCounterclockwiseVectorAtIndex:(unsigned int)index startingForward:(BOOL)forward;
- (void)instantiateVectors;
- (BOOL)hasVectorGoingForward:(BOOL)forward startingAtIndex:(unsigned int *)index;
- (BOOL)extractCycleTo:(id)to goingForward:(BOOL)forward startingAtIndex:(unsigned int)index;
- (BOOL)extractCycleTo:(id)to goingForward:(BOOL)forward throughIntersectionIndex:(unsigned int)index returningTo:(id)to atRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect;
- (BOOL)crosses:(id)crosses;
- (BOOL)continues:(id)continues;
- (void)combine:(id)combine;
- (void)trimToLastIntersections;
- (void)removeLooseThreadsStartingFrom:(id)from;
- (long long)compareXBounds:(id)xbounds;
- (long long)compareYBounds:(id)ybounds;
@end

#endif /* CPZoneBorder_h */
