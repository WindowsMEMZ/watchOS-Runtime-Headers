//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1774.2.3.0.0
//
#ifndef CPCluster_h
#define CPCluster_h
@import Foundation;

#include "CPDisposable-Protocol.h"

@interface CPCluster : NSObject<CPDisposable> {
  /* instance variables */
  const struct { double x0; unsigned int x1; double x2; double x3; unsigned int x4; double x5; double x6; BOOL x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; double x17; double x18; BOOL x19; } * profile;
  unsigned int xCount;
  double * x;
  double * dx;
  unsigned int * dxOrderIndex;
  unsigned int interClusterMinIndex;
  double * ddx;
  unsigned int * ddxOrderIndex;
  unsigned int interLevelMinIndex;
  unsigned int minClusterSize;
  double maxClusterSpread;
  double minInterClusterDiff;
  double minInterLevel2ndDiff;
  unsigned int clusterCount;
  struct { unsigned int x0; double x1; double x2; double x3; } * xStats;
  unsigned int levels;
  struct { unsigned int x0; double x1; double x2; double x3; } * dxStats;
  BOOL ownData;
  BOOL ownDifferences;
}

/* class methods */
+ (void)clusterTextLine:(id)line withCluster:(id)cluster atLevel:(unsigned int)level withMaximumWordGap:(double *)gap andMaximumLetterGap:(double *)gap;
+ (void)clusterTextLine:(id)line;
+ (void)reclusterTextLine:(id)line fromWordIndex:(unsigned int)index count:(unsigned int *)count;
+ (unsigned int *)createOrderIndexFor:(double *)for ofSize:(unsigned int)size;

/* instance methods */
- (void)tryLevel0SplitBetween:(double)between and:(double)and usingHints:(struct { unsigned int x0; double x1; double x2; double x3; } *)hints;
- (void)findClustersFromCharacterSequence:(id)sequence withSpaceHint:(BOOL)hint;
- (void)makeWords:(struct { unsigned int x0; unsigned int x1; int x2; int x3; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x4; } *)words count:(unsigned int)count fromCharacterSequence:(id)sequence charOffset:(unsigned int)offset;
- (id)init;
- (id)initWithProfile:(const struct { double x0; unsigned int x1; double x2; double x3; unsigned int x4; double x5; double x6; BOOL x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; double x17; double x18; BOOL x19; } *)profile;
- (void)dispose;
- (void)finalize;
- (void)dealloc;
- (void)computeDifferencesFromData;
- (void)computeDataFromDifferences;
- (void)splitSecondDifferences;
- (void)assembleDifferenceStats;
- (BOOL)joinLevelsFrom:(unsigned int)from to:(unsigned int)to;
- (BOOL)joinClosestLevelPairFrom:(unsigned int)from to:(unsigned int)to;
- (BOOL)splitLevelAtIndex:(unsigned int)index betweenValue:(double)value andValue:(double)value;
- (BOOL)coalesceFrom:(unsigned int)from to:(unsigned int)to;
- (void)resetAnalysis;
- (void)analyzeDifferences;
- (void)assembleDataStats;
- (void)setMinimumClusterSize:(unsigned int)size;
- (void)setMaximumClusterSpread:(double)spread;
- (void)setMinimumRecognizedInterClusterDifference:(double)difference;
- (void)setMinimumRecognizedInterLevel2ndDifference:(double)difference;
- (void)assembleDensityDifferenceStats;
- (void)analyzeDensities;
- (void)findClusters:(double *)clusters count:(unsigned int)count;
- (void)findClustersFromDifferences:(double *)differences count:(unsigned int)count;
- (void)findDensityClusters:(double *)clusters count:(unsigned int)count;
- (BOOL)applyDifferenceHints:(struct { unsigned int x0; double x1; double x2; double x3; } *)hints count:(unsigned int)count;
- (unsigned int)clusterCount;
- (unsigned int)levels;
- (struct { unsigned int x0; double x1; double x2; double x3; })clusterStatisticsAtIndex:(unsigned int)index;
- (struct { unsigned int x0; double x1; double x2; double x3; })differenceClusterStatisticsAtIndex:(unsigned int)index;
- (struct { unsigned int x0; double x1; double x2; double x3; })largestClusterStatistics;
@end

#endif /* CPCluster_h */
