//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2890.4.12.2.3
//
#ifndef CLLocationUpdater_h
#define CLLocationUpdater_h
@import Foundation;

#include "CLIdentifiableClientProtocol-Protocol.h"
#include "CLLocationManager.h"

@class CLDispatchSilo, NSData, NSMutableDictionary, NSString;
@protocol {CLCallbackDropManager="_vptr$CLCallbackDropManager"^^?"fToken"{shared_ptr<int>="__ptr_"^i"__cntrl_"^{__shared_weak_count}}};

@interface CLLocationUpdater : NSObject<CLIdentifiableClientProtocol> {
  /* instance variables */
  CLDispatchSilo *_silo;
  void * _locationdConnection;
  id /* block */ _clientCallback;
  id /* block */ _connectionMessageHandler;
  struct CLCallbackDropManager { undefined * *_vptr$CLCallbackDropManager; struct shared_ptr<int> { int *__ptr_; struct __shared_weak_count *__cntrl_; } fToken; } _callbackDropManager;
  NSString *_messageName;
  NSMutableDictionary *_mutableMsgDictionary;
  double _lastTimestamp;
}

@property BOOL shouldBeRunning;
@property (retain, nonatomic) NSString *identityToken;
@property (retain, nonatomic) NSData *storageToken;
@property (retain, nonatomic) CLLocationManager *manager;
@property (nonatomic) id /* block */ weakClient;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)historicalUpdaterWithCenter:(struct CLLocationCoordinate2D { double x0; double x1; })center radius:(double)radius dateInterval:(id)interval sampleCount:(int)count queue:(id)queue handler:(id /* block */)handler;
+ (id)historicalUpdaterWithDateInterval:(id)interval sampleCount:(int)count queue:(id)queue handler:(id /* block */)handler;
+ (id)liveUpdaterWithConfiguration:(long long)configuration queue:(id)queue handler:(id /* block */)handler;
+ (id)liveUpdaterWithQueue:(id)queue handler:(id /* block */)handler;
+ (id)_liveUpdaterWithConfiguration:(long long)configuration queue:(id)queue handler:(id /* block */)handler;
+ (id)_liveUpdaterWithQueue:(id)queue handler:(id /* block */)handler;
+ (id)_historicalUpdaterWithDateInterval:(id)interval sampleCount:(int)count queue:(id)queue handler:(id /* block */)handler;
+ (id)_historicalUpdaterWithCenter:(struct CLLocationCoordinate2D { double x0; double x1; })center radius:(double)radius dateInterval:(id)interval sampleCount:(int)count queue:(id)queue handler:(id /* block */)handler;
+ (id)liveUpdaterWithConfiguration:(long long)configuration locationManager:(id)manager queue:(id)queue handler:(id /* block */)handler;
+ (id)historicalUpdaterWithDateInterval:(id)interval sampleCount:(int)count locationManager:(id)manager queue:(id)queue handler:(id /* block */)handler;
+ (id)historicalUpdaterWithCenter:(struct CLLocationCoordinate2D { double x0; double x1; })center radius:(double)radius dateInterval:(id)interval sampleCount:(int)count locationManager:(id)manager queue:(id)queue handler:(id /* block */)handler;

/* instance methods */
- (id)initWithRegistrationMessageName:(const char *)name messagePayload:(id)payload locationManager:(id)manager queue:(id)queue handler:(id /* block */)handler;
- (void)pause;
- (void)resume;
- (void)updateIdentityToken:(id)token withStorageToken:(id)token;
- (void)cleanup;
- (void)invalidate;
- (void)dealloc;
- (void)manageConnection;
- (void)createConnection;
- (void)destroyConnection;
- (void)handleMessageLocation:(struct shared_ptr<CLConnectionMessage> { struct CLConnectionMessage * x0; struct __shared_weak_count * x1; })location;
- (void)handleMessageLocationUnavailable:(struct shared_ptr<CLConnectionMessage> { struct CLConnectionMessage * x0; struct __shared_weak_count * x1; })unavailable;
- (void)handleMessageHistoricalLocations:(struct shared_ptr<CLConnectionMessage> { struct CLConnectionMessage * x0; struct __shared_weak_count * x1; })locations;
- (void)handleMessageHistoricalLocationsFinished:(struct shared_ptr<CLConnectionMessage> { struct CLConnectionMessage * x0; struct __shared_weak_count * x1; })finished;
- (void)setHandler:(id /* block */)handler;
- (void)handleMessage:(struct shared_ptr<CLConnectionMessage> { struct CLConnectionMessage * x0; struct __shared_weak_count * x1; })message;
@end

#endif /* CLLocationUpdater_h */
