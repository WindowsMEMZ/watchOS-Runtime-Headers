//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2890.4.12.2.3
//
#ifndef CLFindMyAccessoryManager_h
#define CLFindMyAccessoryManager_h
@import Foundation;

#include "CLFindMyAccessoryFragmentAccumulator.h"

@protocol CLFindMyAccessoryManagerDelegate, OS_dispatch_queue, {unique_ptr<CLConnectionClient, std::default_delete<CLConnectionClient>>="__ptr_"{__compressed_pair<CLConnectionClient *, std::default_delete<CLConnectionClient>>="__value_"^{CLConnectionClient}}};

@interface CLFindMyAccessoryManager : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_delegateQueue;
  struct unique_ptr<CLConnectionClient, std::default_delete<CLConnectionClient>> { struct __compressed_pair<CLConnectionClient *, std::default_delete<CLConnectionClient>> { struct CLConnectionClient *__value_; } __ptr_; } _connection;
  CLFindMyAccessoryFragmentAccumulator *_accumulator;
}

@property (weak, nonatomic) NSObject<CLFindMyAccessoryManagerDelegate> *delegate;

/* class methods */
+ (id)errorFromFragmentationStatus:(unsigned long long)status;
+ (id)checkAvailabilityForPairedOwnerInformationControlPointMessages:(id)messages messageName:(struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; })name;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)initAccumulator;
- (id)initWithDelegate:(id)delegate delegateQueue:(id)queue;
- (void)handleMessage:(struct shared_ptr<CLConnectionMessage> { struct CLConnectionMessage * x0; struct __shared_weak_count * x1; })message;
- (void)handleInterruption;
- (void)sendMessage:(const char *)message withPayload:(id)payload;
- (void)sendMessage:(const char *)message;
- (void)connectDevice:(id)device;
- (void)disconnectDevice:(id)device;
- (void)fetchConnectionStateForDevice:(id)device;
- (void)startPlayingSoundSequence:(id)sequence onDevice:(id)device;
- (void)startPlayingUnauthorizedSoundOnDevice:(id)device;
- (void)startPlayingUnauthorizedSoundSequence:(id)sequence onDevice:(id)device;
- (void)stopPlayingSoundOnDevice:(id)device;
- (void)stopPlayingUnauthorizedSoundOnDevice:(id)device;
- (void)getMultiStatusFromDevice:(id)device;
- (void)getMultiPartStatusFromDevice:(id)device;
- (void)dumpLogDataOfType:(unsigned long long)type fromDevice:(id)device;
- (void)induceCrashOnDevice:(id)device;
- (void)unpairFromDevice:(id)device;
- (void)unpairFromDeviceWithAddress:(id)address;
- (void)setNearOwnerTimeout:(unsigned short)timeout onDevice:(id)device;
- (void)setDeviceType:(unsigned char)type onDevice:(id)device;
- (void)setObfuscatedIdentifier:(id)identifier onDevice:(id)device;
- (void)setWildConfiguration:(id)configuration onDevice:(id)device;
- (void)rollWildKeyOnDevice:(id)device;
- (void)setKeyRollInterval:(unsigned int)interval onDevice:(id)device;
- (void)setBatteryStatus:(unsigned long long)status forDevice:(id)device;
- (void)fetchBatteryStatusForDevice:(id)device;
- (void)fetchUserStatsWithPersistence:(BOOL)persistence fromDevice:(id)device;
- (void)scanForNearbyOwner;
- (void)scanForHELE;
- (void)scanForNearbyDevicesLong;
- (void)stopScanForNearbyDevicesLong;
- (void)setAccelerometerSlopeModeConfiguration:(id)configuration forDevice:(id)device;
- (void)fetchAccelerometerSlopeModeConfigurationForDevice:(id)device;
- (void)setAccelerometerOrientationModeConfiguration:(id)configuration forDevice:(id)device;
- (void)fetchAccelerometerOrientationModeConfigurationForDevice:(id)device;
- (void)setUnauthorizedPlaySoundRateLimit:(BOOL)limit forDevice:(id)device;
- (void)fetchFirmwareVersionFromDevice:(id)device;
- (void)fetchTxPower:(id)power;
- (void)fetchTxPowerFromDevice:(id)device asOwner:(BOOL)owner;
- (void)startAggressiveAdvertisingOnDevice:(id)device withTimeout:(unsigned int)timeout;
- (void)stopAggressiveAdvertisingOnDevice:(id)device;
- (void)startUnauthorizedAggressiveAdvertisingOnDevice:(id)device;
- (void)setHawkeyeTestMode:(int)mode forDevice:(id)device;
- (void)setHawkeyeUTMotionConfigWithSeparatedUTTimeoutSeconds:(unsigned int)seconds separatedUTBackoffTimeoutSeconds:(unsigned int)seconds forDevice:(id)device;
- (void)fetchHawkeyeAISProductData:(id)data;
- (void)fetchHawkeyeAISManufacturerName:(id)name;
- (void)fetchHawkeyeAISModelName:(id)name;
- (void)fetchHawkeyeAISModelColorCode:(id)code;
- (void)fetchHawkeyeAISAccessoryCategory:(id)category;
- (void)fetchHawkeyeAISAccessoryCapabilities:(id)capabilities;
- (void)fetchHawkeyeAISFindMyVersion:(id)version;
- (void)fetchHawkeyeAISBatteryType:(id)type;
- (void)fetchHawkeyeSerialNumber:(id)number;
- (void)fetchHawkeyeCurrentPrimaryKey:(id)key;
- (void)fetchHawkeyeiCloudIdentifier:(id)identifier;
- (void)startMonitoringForAvengerAdvertisementsForBTFinding;
- (void)stopMonitoringForAvengerAdvertisementsForBTFinding;
- (void)performAggressiveScanForSeparationAlerts;
- (void)performLongAggressiveScanForSeparationAlerts;
- (void)stopLongAggressiveScanForSeparationAlerts;
- (void)performAggressiveScanForTrackingAvoidance;
- (void)performHELEScanForTrackingAvoidance;
- (void)performAggressiveScanForDurianService;
- (void)fetchStatusOfUTEnablementRequirements;
- (void)fetchAISForTAUnknownBeacon:(id)beacon macAddress:(id)address deviceType:(id)type;
- (void)stageTADetection:(id)tadetection deviceType:(id)type;
- (void)forceSurfaceStagedDetections:(id)detections deviceType:(id)type;
- (void)initRangingOnDevice:(id)device macAddress:(id)address;
- (void)deinitRangingOnDevice:(id)device;
- (void)configureRangingOnDevice:(id)device macAddress:(id)address countryCode:(unsigned char)code uwbChannel:(unsigned char)channel acqPreamble:(unsigned char)preamble trackingPreamble:(unsigned char)preamble interval:(unsigned short)interval;
- (void)prepareRangingOnDevice:(id)device;
- (void)startRangingOnDevice:(id)device targetEventCounter:(unsigned short)counter;
- (void)stopRangingOnDevice:(id)device;
- (void)startEventCounterForDevice:(id)device;
- (void)stopEventCounterForDevice:(id)device;
@end

#endif /* CLFindMyAccessoryManager_h */
