//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2890.4.12.2.3
//
#ifndef CLRacingRouteManager_h
#define CLRacingRouteManager_h
@import Foundation;

@protocol {CLRacingRoute="fDistanceCalculator"{CLDistanceCalc="fM"d"fN"d"fRefLatRads"d"fRefLatDegs"d"fCosRefLat"d}"fSignalEnvironmentType"i"fWorkoutActivity"i"fRoutePoints"@"NSMutableArray""fRouteBoundingBox"{RouteBoundingBox="fMinLatitude_deg"d"fMaxLatitude_deg"d"fMinLongitude_deg"d"fMaxLongitude_deg"d"fRows"i"fColumns"i}"fRouteMatrixIndexVec"{vector<std::vector<std::pair<int, int>>, std::allocator<std::vector<std::pair<int, int>>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<std::pair<int, int>> *, std::allocator<std::vector<std::pair<int, int>>>>="__value_"^v}}"fRaceStartPointOnCurrentRoute"{RacingRouteState="fLatitude_deg"d"fLongitude_deg"d"fAltitude_m"d"fOdometer_m"d"fTimestamp_s"d"fTimeSinceStartOfRace_s"d"fOffRouteTraveledTime_s"d"fDistanceSinceStartOfRace_m"d"fOffRouteTraveledDistance_m"d"fAveragePace_s_per_m"d"fDistanceAlongReferenceRoute_m"d}"fRaceStartPointOnReferenceRoute"{RacingRouteState="fLatitude_deg"d"fLongitude_deg"d"fAltitude_m"d"fOdometer_m"d"fTimestamp_s"d"fTimeSinceStartOfRace_s"d"fOffRouteTraveledTime_s"d"fDistanceSinceStartOfRace_m"d"fOffRouteTraveledDistance_m"d"fAveragePace_s_per_m"d"fDistanceAlongReferenceRoute_m"d}"fLastOnRouteDataPoint"{RacingRouteState="fLatitude_deg"d"fLongitude_deg"d"fAltitude_m"d"fOdometer_m"d"fTimestamp_s"d"fTimeSinceStartOfRace_s"d"fOffRouteTraveledTime_s"d"fDistanceSinceStartOfRace_m"d"fOffRouteTraveledDistance_m"d"fAveragePace_s_per_m"d"fDistanceAlongReferenceRoute_m"d}"fLastProjectedDataPoint"{RacingRouteState="fLatitude_deg"d"fLongitude_deg"d"fAltitude_m"d"fOdometer_m"d"fTimestamp_s"d"fTimeSinceStartOfRace_s"d"fOffRouteTraveledTime_s"d"fDistanceSinceStartOfRace_m"d"fOffRouteTraveledDistance_m"d"fAveragePace_s_per_m"d"fDistanceAlongReferenceRoute_m"d}"fRoutePointsArrayInitialized"B"fRecoveryMode"B"fRaceStartPointDetected"B"fRaceEndPointDetected"B"fUserIsOffRoute"B"fProjectedOnNearestPoint"B"fRaceSessionExpired"B"fRollingBufferReachedEndOfReferenceRoute"B"fRouteConfigurationSuccessful"B"fRacingRouteAnalyticsSent"B"fPrematureRaceEndDetected"B"fReferenceRouteTotalLengthDetermined"B"fLocationPointIsOutsideOfAcceptedRange"B"fLocationPointNotMatched"B"fRoutePointsBufferSize"i"fNumberOfRoutePointsToAdd"i"fOffRouteGraceDuration_s"i"fMatchedPointCounter"i"fReferenceRouteDataPointCounter"i"fCurrentRouteDataPointCounter"i"fOffRouteDataPointCounter"i"fInutileDataPointCounter"i"fRollingBufferUpdateCounter"i"fLastMatchedPointIndex"i"fLastMatchedPointIndexOnReferenceRoute"i"fRollingBufferStartIndexOnReferenceRoute"i"fMatrixCellIndexForLastMatchedPoint"i"fRaceStartLineProximityIndex"i"fReferenceRouteTotalLength_m"d"fTimestampOfLastMatchedPointOnReferenceRoute_s"d"fRegisteredTimeAtThresholdDistance_s"d"fEndOfRaceTimeThreshold_s"d"fNearestNeighborMaximumAcceptedDistance_m"d};

@interface CLRacingRouteManager : NSObject {
  /* instance variables */
  struct CLRacingRoute { struct CLDistanceCalc { double fM; double fN; double fRefLatRads; double fRefLatDegs; double fCosRefLat; } fDistanceCalculator; int fSignalEnvironmentType; int fWorkoutActivity; NSMutableArray *fRoutePoints; struct RouteBoundingBox { double fMinLatitude_deg; double fMaxLatitude_deg; double fMinLongitude_deg; double fMaxLongitude_deg; int fRows; int fColumns; } fRouteBoundingBox; struct vector<std::vector<std::pair<int, int>>, std::allocator<std::vector<std::pair<int, int>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<std::pair<int, int>> *, std::allocator<std::vector<std::pair<int, int>>>> { void *__value_; } __end_cap_; } fRouteMatrixIndexVec; struct RacingRouteState { double fLatitude_deg; double fLongitude_deg; double fAltitude_m; double fOdometer_m; double fTimestamp_s; double fTimeSinceStartOfRace_s; double fOffRouteTraveledTime_s; double fDistanceSinceStartOfRace_m; double fOffRouteTraveledDistance_m; double fAveragePace_s_per_m; double fDistanceAlongReferenceRoute_m; } fRaceStartPointOnCurrentRoute; struct RacingRouteState { double fLatitude_deg; double fLongitude_deg; double fAltitude_m; double fOdometer_m; double fTimestamp_s; double fTimeSinceStartOfRace_s; double fOffRouteTraveledTime_s; double fDistanceSinceStartOfRace_m; double fOffRouteTraveledDistance_m; double fAveragePace_s_per_m; double fDistanceAlongReferenceRoute_m; } fRaceStartPointOnReferenceRoute; struct RacingRouteState { double fLatitude_deg; double fLongitude_deg; double fAltitude_m; double fOdometer_m; double fTimestamp_s; double fTimeSinceStartOfRace_s; double fOffRouteTraveledTime_s; double fDistanceSinceStartOfRace_m; double fOffRouteTraveledDistance_m; double fAveragePace_s_per_m; double fDistanceAlongReferenceRoute_m; } fLastOnRouteDataPoint; struct RacingRouteState { double fLatitude_deg; double fLongitude_deg; double fAltitude_m; double fOdometer_m; double fTimestamp_s; double fTimeSinceStartOfRace_s; double fOffRouteTraveledTime_s; double fDistanceSinceStartOfRace_m; double fOffRouteTraveledDistance_m; double fAveragePace_s_per_m; double fDistanceAlongReferenceRoute_m; } fLastProjectedDataPoint; BOOL fRoutePointsArrayInitialized; BOOL fRecoveryMode; BOOL fRaceStartPointDetected; BOOL fRaceEndPointDetected; BOOL fUserIsOffRoute; BOOL fProjectedOnNearestPoint; BOOL fRaceSessionExpired; BOOL fRollingBufferReachedEndOfReferenceRoute; BOOL fRouteConfigurationSuccessful; BOOL fRacingRouteAnalyticsSent; BOOL fPrematureRaceEndDetected; BOOL fReferenceRouteTotalLengthDetermined; BOOL fLocationPointIsOutsideOfAcceptedRange; BOOL fLocationPointNotMatched; int fRoutePointsBufferSize; int fNumberOfRoutePointsToAdd; int fOffRouteGraceDuration_s; int fMatchedPointCounter; int fReferenceRouteDataPointCounter; int fCurrentRouteDataPointCounter; int fOffRouteDataPointCounter; int fInutileDataPointCounter; int fRollingBufferUpdateCounter; int fLastMatchedPointIndex; int fLastMatchedPointIndexOnReferenceRoute; int fRollingBufferStartIndexOnReferenceRoute; int fMatrixCellIndexForLastMatchedPoint; int fRaceStartLineProximityIndex; double fReferenceRouteTotalLength_m; double fTimestampOfLastMatchedPointOnReferenceRoute_s; double fRegisteredTimeAtThresholdDistance_s; double fEndOfRaceTimeThreshold_s; double fNearestNeighborMaximumAcceptedDistance_m; } clrr;
}

/* instance methods */
- (unsigned long long)configureWithWorkoutActivityType:(unsigned long long)type bufferSize:(unsigned long long)size offRouteGraceDurationInSec:(unsigned long long)sec;
- (unsigned long long)numberOfRoutePointsToAdd;
- (unsigned long long)addRoutePoints:(id)points;
- (id)advanceToPoint:(id)point;
- (void)reset;
- (id)getRaceParameters;
- (BOOL)setRaceParameters:(id)parameters;
- (double)recoverRaceAtTimestamp;
@end

#endif /* CLRacingRouteManager_h */
