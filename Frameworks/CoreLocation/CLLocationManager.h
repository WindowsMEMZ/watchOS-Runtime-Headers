//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2890.4.12.2.3
//
#ifndef CLLocationManager_h
#define CLLocationManager_h
@import Foundation;

#include "CLHeading.h"
#include "CLLocation.h"
#include "CLLocationManagerDelegate-Protocol.h"

@class NSSet, NSString;

@interface CLLocationManager : NSObject {
  /* instance variables */
  id _internal;
}

@property (nonatomic) BOOL matchInfoEnabled;
@property (nonatomic) BOOL _groundAltitudeEnabled;
@property (nonatomic) BOOL _fusionInfoEnabled;
@property (nonatomic) BOOL trackRunInfoEnabled;
@property (nonatomic) BOOL privateMode;
@property (readonly) NSString *processName;
@property (readonly, nonatomic) BOOL locationServicesAvailable;
@property (readonly, nonatomic) BOOL locationServicesApproved;
@property (readonly, nonatomic) double expectedGpsUpdateInterval;
@property (nonatomic) BOOL supportInfo;
@property (readonly, nonatomic) struct __CLClient * internalClient;
@property (nonatomic) BOOL locationServicesPreferencesDialogEnabled;
@property (nonatomic) BOOL dynamicAccuracyReductionEnabled;
@property (nonatomic) BOOL allowsAlteredAccessoryLocations;
@property (readonly, nonatomic) BOOL _limitsPrecision;
@property (readonly, nonatomic) int _authorizationStatus;
@property (readonly, nonatomic) BOOL authorizedForPreciseLocation;
@property (readonly, nonatomic) int authorizationStatus;
@property (readonly, nonatomic) long long accuracyAuthorization;
@property (readonly, nonatomic) BOOL authorizedForWidgetUpdates;
@property (weak, nonatomic) NSObject<CLLocationManagerDelegate> *delegate;
@property (readonly, nonatomic) BOOL locationServicesEnabled;
@property (copy, nonatomic) NSString *purpose;
@property (nonatomic) long long activityType;
@property (nonatomic) double distanceFilter;
@property (nonatomic) double desiredAccuracy;
@property (nonatomic) BOOL pausesLocationUpdatesAutomatically;
@property (nonatomic) BOOL allowsBackgroundLocationUpdates;
@property (nonatomic) BOOL showsBackgroundLocationIndicator;
@property (readonly, copy, nonatomic) CLLocation *location;
@property (readonly, nonatomic) BOOL headingAvailable;
@property (nonatomic) double headingFilter;
@property (nonatomic) int headingOrientation;
@property (readonly, copy, nonatomic) CLHeading *heading;
@property (readonly, nonatomic) double maximumRegionMonitoringDistance;
@property (readonly, copy, nonatomic) NSSet *monitoredRegions;
@property (readonly, copy, nonatomic) NSSet *rangedRegions;
@property (readonly, copy, nonatomic) NSSet *rangedBeaconConstraints;

/* class methods */
+ (void)setStatusBarIconEnabled:(BOOL)enabled forLocationEntityClass:(unsigned long long)class;
+ (BOOL)isStatusBarIconEnabledForLocationEntityClass:(unsigned long long)class;
+ (unsigned long long)primaryEntityClassForLocationDictionary:(id)dictionary;
+ (unsigned long long)entityClassesForLocationDictionary:(id)dictionary;
+ (BOOL)isLocationActiveForLocationDictionary:(id)dictionary;
+ (unsigned long long)activeLocationServiceTypesForLocationDictionary:(id)dictionary;
+ (id)dateLocationLastUsedForLocationDictionary:(id)dictionary;
+ (BOOL)hasUsedBackgroundLocationServices:(id)services;
+ (BOOL)isEntityAuthorizedForLocationDictionary:(id)dictionary;
+ (unsigned long long)entityAuthorizationForLocationDictionary:(id)dictionary;
+ (unsigned long long)allowableAuthorizationForLocationDictionary:(id)dictionary;
+ (BOOL)correctiveCompensationStatusForLocationDictionary:(id)dictionary;
+ (unsigned long long)incidentalUseModeForLocationDictionary:(id)dictionary;
+ (id)interestZonesIdentifierListForLocationDictionary:(id)dictionary;
+ (id)interestZoneDictionaryIdentifiedById:(id)id forLocationDictionary:(id)dictionary;
+ (BOOL)isInterestZoneReleventForLocationDictionary:(id)dictionary;
+ (void)setEntityAuthorized:(BOOL)authorized forLocationDictionary:(id)dictionary;
+ (void)setEntityAuthorization:(unsigned long long)authorization forLocationDictionary:(id)dictionary;
+ (void)setEntityAuthorization:(unsigned long long)authorization withCorrectiveCompensation:(BOOL)compensation forLocationDictionary:(id)dictionary;
+ (void)setEntityAuthorization:(unsigned long long)authorization withCorrectiveCompensationType:(int)type forLocationDictionary:(id)dictionary;
+ (BOOL)backgroundIndicatorEnabledForLocationDictionary:(id)dictionary;
+ (void)setBackgroundIndicatorEnabled:(BOOL)enabled forLocationDictionary:(id)dictionary;
+ (id)sharedManager;
+ (id)sharedQueue;
+ (id)weakSharedInstance;
+ (BOOL)reportLocationUtilityEvent:(int)event atDate:(id)date;
+ (void)resetLocationAuthorizationForBundleId:(id)id orBundlePath:(id)path;
+ (BOOL)locationServicesEnabled;
+ (BOOL)locationServicesEnabled:(BOOL)enabled;
+ (void)setLocationServicesEnabled:(BOOL)enabled;
+ (id)setAuthorizationPromptMapDisplayEnabled:(BOOL)enabled;
+ (BOOL)authorizationPromptMapDisplayEnabled;
+ (BOOL)headingAvailable;
+ (BOOL)significantLocationChangeMonitoringAvailable;
+ (BOOL)isMonitoringAvailableForClass:(Class)class;
+ (BOOL)regionMonitoringAvailable;
+ (BOOL)regionMonitoringEnabled;
+ (BOOL)isRangingAvailable;
+ (BOOL)mapCorrectionAvailable;
+ (BOOL)_checkAndExerciseAuthorizationForBundleID:(id)id error:(id *)error;
+ (BOOL)_checkAndExerciseAuthorizationForBundle:(id)bundle error:(id *)error;
+ (BOOL)deferredLocationUpdatesAvailable;
+ (BOOL)isPeerRangingAvailable;
+ (id)metadataForHomekitAccessoryControlEventWithUUID:(id)uuid stateString:(id)string serviceUUID:(id)uuid serviceType:(id)type characteristicType:(id)type serviceGroupUUID:(id)uuid source:(id)source roomUUID:(id)uuid;
+ (id)metadataForHomekitActionSetEventWithUUID:(id)uuid name:(id)name type:(id)type clientName:(id)name source:(id)source homeName:(id)name;
+ (id)metadataForMicroLocationTruthTagEventWithTagUUID:(id)uuid;
+ (id)activeLocationClientsWithInfo;
+ (id)userLocationClientsWithInfo;
+ (id)_archivedAuthorizationDecisionsWithError:(id *)error;
+ (id)_applyArchivedAuthorizationDecisions:(id)decisions;
+ (int)_authorizationStatusForBundleIdentifier:(id)identifier bundlePath:(id)path;
+ (int)authorizationStatusForBundleIdentifier:(id)identifier;
+ (int)authorizationStatusForBundlePath:(id)path;
+ (int)authorizationStatusForBundle:(id)bundle;
+ (int)_authorizationStatus;
+ (int)authorizationStatus;
+ (void)setAuthorizationStatus:(BOOL)status forBundleIdentifier:(id)identifier;
+ (void)setAuthorizationStatus:(BOOL)status forBundlePath:(id)path;
+ (void)setAuthorizationStatus:(BOOL)status forBundle:(id)bundle;
+ (void)setAuthorizationStatusByType:(int)type forBundleIdentifier:(id)identifier;
+ (void)setAuthorizationStatusByType:(int)type forBundlePath:(id)path;
+ (void)setAuthorizationStatusByType:(int)type forBundle:(id)bundle;
+ (void)setAuthorizationStatusByType:(int)type withCorrectiveCompensation:(int)compensation forBundleIdentifier:(id)identifier;
+ (void)updatePillButtonChoiceForOutstandingPrompt:(int)prompt;
+ (void)updatePromptedLatitude:(double)latitude longitude:(double)longitude;
+ (void)setAuthorizationStatusByType:(int)type withCorrectiveCompensation:(int)compensation forBundle:(id)bundle;
+ (void)setIncidentalUseMode:(int)mode forBundle:(id)bundle;
+ (void)setIncidentalUseMode:(int)mode forBundleIdentifier:(id)identifier;
+ (void)getIncidentalUseMode:(int *)mode forBundle:(id)bundle;
+ (void)getIncidentalUseMode:(int *)mode forBundleIdentifier:(id)identifier;
+ (void)setLocationButtonUseMode:(int)mode forBundle:(id)bundle;
+ (void)setLocationButtonUseMode:(int)mode forBundleIdentifier:(id)identifier;
+ (void)registerCircularInterestZoneWithId:(id)id latitue:(double)latitue longitude:(double)longitude radius:(double)radius serviceMaskOperator:(int)operator provenanceType:(int)type forBundleIdentifier:(id)identifier error:(id *)error;
+ (void)registerCircularInterestZoneWithId:(id)id latitue:(double)latitue longitude:(double)longitude radius:(double)radius serviceMaskOperator:(int)operator provenanceType:(int)type forBundle:(id)bundle error:(id *)error;
+ (void)registerPhenolicInterestZoneWithId:(id)id phenolicLocation:(int)location serviceMaskOperator:(int)operator provenanceType:(int)type forBundleIdentifier:(id)identifier error:(id *)error;
+ (void)registerPhenolicInterestZoneWithId:(id)id phenolicLocation:(int)location serviceMaskOperator:(int)operator provenanceType:(int)type forBundle:(id)bundle error:(id *)error;
+ (void)setAuthorizationStatus:(int)status withCorrectiveCompensation:(int)compensation forInterestZoneWithId:(id)id registeredForBundleIdentifier:(id)identifier;
+ (void)setAuthorizationStatus:(int)status withCorrectiveCompensation:(int)compensation forInterestZoneWithId:(id)id registeredForBundle:(id)bundle;
+ (void)setRelevance:(BOOL)relevance forInterestZoneWithId:(id)id registeredForBundleIdentifier:(id)identifier error:(id *)error;
+ (void)setRelevance:(BOOL)relevance forInterestZoneWithId:(id)id registeredForBundle:(id)bundle error:(id *)error;
+ (void)deleteInterestZoneWithId:(id)id registeredForBundleIdentifier:(id)identifier error:(id *)error;
+ (void)deleteInterestZoneWithId:(id)id registeredForBundle:(id)bundle error:(id *)error;
+ (void)setTemporaryAuthorizationGranted:(BOOL)granted forBundleIdentifier:(id)identifier;
+ (void)setTemporaryAuthorizationGranted:(BOOL)granted forBundle:(id)bundle;
+ (void)grantTemporaryAuthorizationUsingLocationButtonToClientWithAuditToken:(struct { unsigned int x0[8] })token voiceInteractionEnabled:(BOOL)enabled;
+ (void)setBackgroundIndicatorEnabled:(BOOL)enabled forBundleIdentifier:(id)identifier;
+ (void)setBackgroundIndicatorEnabled:(BOOL)enabled forBundle:(id)bundle;
+ (void)setDefaultEffectiveBundleIdentifier:(id)identifier;
+ (void)setDefaultEffectiveBundle:(id)bundle;
+ (BOOL)dumpLogsWithMessage:(id)message;
+ (void)dumpDiagnosticFilesWithHandler:(id /* block */)handler;
+ (BOOL)shutdownDaemon;
+ (BOOL)bundleSupported:(id)supported;
+ (BOOL)advertiseAsBeacon:(id)beacon withPower:(id)power;
+ (id)_getClientTransientAuthorizationInfoForBundleId:(id)id error:(id *)error;
+ (id)_getClientTransientAuthorizationInfoForBundlePath:(id)path error:(id *)error;
+ (id)_setClientTransientAuthorizationInfoForBundleId:(id)id data:(id)data;
+ (id)_setClientTransientAuthorizationInfoForBundlePath:(id)path data:(id)data;

/* instance methods */
- (void)_updateVIOEstimation:(id)vioestimation;
- (void)_updateARSessionState:(unsigned long long)state;
- (void)_updateVLLocalizationResult:(id)result;
- (void)_fetchEstimatedLocationAtDate:(id)date handler:(id /* block */)handler;
- (id)_startPlaceInferencesCommonLogic:(unsigned long long)logic handler:(id /* block */)handler;
- (void)_fetchPlaceInferencesWithFidelityPolicy:(unsigned long long)policy handler:(id /* block */)handler;
- (void)_fetchContinuousPlaceInferencesWithFidelityPolicy:(unsigned long long)policy handler:(id /* block */)handler;
- (void)_stopFetchingContinuousPlaceInferences;
- (void)startMonitoringVisits;
- (void)stopMonitoringVisits;
- (void)_startLeechingVisits;
- (void)_requestVisitState;
- (BOOL)isTrackRunInfoEnabled;
- (BOOL)_isFusionInfoEnabled;
- (void)_setFusionInfoEnabled:(BOOL)enabled;
- (BOOL)_isGroundAltitudeEnabled;
- (void)_setGroundAltitudeEnabled:(BOOL)enabled;
- (id)_groundAltitudeAtLocation:(id)location;
- (BOOL)isMatchInfoEnabled;
- (void)startUpdatingVehicleSpeed;
- (void)stopUpdatingVehicleSpeed;
- (void)startUpdatingVehicleHeading;
- (void)stopUpdatingVehicleHeading;
- (id)initWithEffectiveBundleIdentifier:(id)identifier bundlePath:(id)path websiteIdentifier:(id)identifier delegate:(id)delegate silo:(id)silo;
- (id)init;
- (id)initWithIdentifier:(id)identifier;
- (id)initWithWebsiteIdentifier:(id)identifier;
- (id)initWithWebsiteIdentifier:(id)identifier delegate:(id)delegate onQueue:(id)queue;
- (id)initWithEffectiveBundleIdentifier:(id)identifier;
- (id)initWithEffectiveBundleIdentifier:(id)identifier delegate:(id)delegate onQueue:(id)queue;
- (id)initWithEffectiveBundlePath:(id)path;
- (id)initWithEffectiveBundle:(id)bundle;
- (id)initWithEffectiveBundlePath:(id)path delegate:(id)delegate onQueue:(id)queue;
- (id)initWithEffectiveBundle:(id)bundle delegate:(id)delegate onQueue:(id)queue;
- (id)initWithEffectiveBundlePath:(id)path limitingBundleIdentifier:(id)identifier delegate:(id)delegate onQueue:(id)queue;
- (id)initWithEffectiveBundle:(id)bundle limitingBundleIdentifier:(id)identifier delegate:(id)delegate onQueue:(id)queue;
- (id)_initWithDelegate:(id)delegate onQueue:(id)queue;
- (id)initOnQueue:(id)queue;
- (void)dealloc;
- (void)markAsHavingReceivedLocation;
- (void)startUpdatingLocationWithPrompt;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (void)requestLocation;
- (void)allowDeferredLocationUpdatesUntilTraveled:(double)traveled timeout:(double)timeout;
- (void)disallowDeferredLocationUpdates;
- (void)startUpdatingHeading;
- (void)stopUpdatingHeading;
- (void)dismissHeadingCalibrationDisplay;
- (void)startAppStatusUpdates;
- (void)stopAppStatusUpdates;
- (void)startTechStatusUpdates;
- (void)stopTechStatusUpdates;
- (void)startMonitoringSignificantLocationChanges;
- (void)_startMonitoringSignificantLocationChangesOfDistance:(double)distance withPowerBudget:(int)budget;
- (void)stopMonitoringSignificantLocationChanges;
- (void)startMonitoringLocationPushesWithCompletion:(id /* block */)completion;
- (void)stopMonitoringLocationPushes;
- (void)startMonitoringForRegion:(id)region desiredAccuracy:(double)accuracy;
- (void)startMonitoringForRegion:(id)region;
- (void)stopMonitoringForRegion:(id)region;
- (void)requestStateForRegion:(id)region;
- (void)startRangingBeaconsInRegion:(id)region;
- (void)stopRangingBeaconsInRegion:(id)region;
- (void)startRangingBeaconsSatisfyingConstraint:(id)constraint;
- (void)stopRangingBeaconsSatisfyingConstraint:(id)constraint;
- (void)requestRangingToPeers:(id)peers timeoutSeconds:(double)seconds;
- (void)respondToRangingFromPeers:(id)peers timeoutSeconds:(double)seconds;
- (void)startRangingToPeers:(id)peers intervalSeconds:(unsigned long long)seconds;
- (void)stopRangingToPeers:(id)peers;
- (void)startRangingFromPeers:(id)peers;
- (void)stopRangingFromPeers:(id)peers;
- (id)getMicroLocationInternalVersion;
- (void)exportMicroLocationDatabaseTablesWithCompletion:(id /* block */)completion;
- (void)requestMicroLocationStaticSourcesStatisticsWithCompletion:(id /* block */)completion;
- (void)requestMicroLocationLearningWithCompletion:(id /* block */)completion;
- (void)requestCurrentMicroLocationWithAdditionalInformation:(id)information withCompletion:(id /* block */)completion;
- (void)requestCurrentMicroLocationWithAdditionalInformation:(id)information;
- (void)requestMicroLocationRecordingScanWithAdditionalInformation:(id)information;
- (void)requestMicroLocationRecordingScanWithAdditionalInformation:(id)information shouldForceRecording:(BOOL)recording;
- (id)getRecordingTriggerUUIDAndRequestMicroLocationRecordingScanWithAdditionalInformation:(id)information shouldForceRecording:(BOOL)recording handler:(id /* block */)handler;
- (void)donateMicroLocationTruthTagWithTagUUID:(id)uuid correspondingToTriggerUUID:(id)uuid handler:(id /* block */)handler;
- (void)donateMicroLocationTruthTagWithTagUUID:(id)uuid forRecordingEventsBetweenDate:(id)date andDate:(id)date handler:(id /* block */)handler;
- (void)startTranscriptSession;
- (void)endTranscriptSession;
- (void)startTranscriptSessionWithCompletion:(id /* block */)completion;
- (void)endTranscriptSessionWithCompletion:(id /* block */)completion;
- (void)fetchTranscriptLocationsWithRadius:(double)radius sampleCount:(int)count center:(struct CLLocationCoordinate2D { double x0; double x1; })center completionHandler:(id /* block */)handler;
- (void)requestHistoricalLocationsWithPurposeKey:(id)key sampleCount:(long long)count completionHandler:(id /* block */)handler;
- (void)purgeMicroLocationSemiSupervisedData;
- (void)resetApps;
- (id)appsUsingLocation;
- (id)appsUsingLocationWithDetails;
- (id)appLocationInfo;
- (id)technologiesInUse;
- (id)_zAxisStatistics;
- (void)addIdentifiableClient:(id)client;
- (void)removeIdentifiableClient:(id)client;
- (void)onLocationRequestTimeout;
- (void)onRangingRequestTimeout;
- (void)onClientEvent:(int)event supportInfo:(id)info;
- (void)onClientEventRegistration:(id)registration;
- (void)onClientEventAuthStatus:(id)status;
- (void)onClientEventLocation:(id)location forceMapMatching:(BOOL)matching type:(id)type;
- (void)onClientEventLocationUnavailable:(id)unavailable;
- (void)onClientEventHeading:(id)heading;
- (void)onClientEventHeadingCalibration:(id)calibration;
- (void)onClientEventPlaceInferenceResult:(id)result;
- (void)onClientEventPlaceInferenceError:(id)error;
- (void)callPlaceInferenceHandlerWithResult:(id)result error:(id)error;
- (void)onClientEventError:(id)error;
- (void)onClientEventRegion:(id)region;
- (void)onClientEventRegionState:(id)state;
- (void)onClientEventRegionError:(id)error;
- (void)onClientEventRanging:(id)ranging;
- (void)onClientEventRangingError:(id)error;
- (void)onClientEventPeerRanging:(id)ranging;
- (void)onClientEventPeerRangingRequestProcessed:(id)processed;
- (void)onClientEventPeerRangingError:(id)error;
- (void)onClientEventRegionResponseDelayed:(id)delayed;
- (void)onClientEventNoLocationWatchdog:(id)watchdog;
- (void)onClientEventRegionSetupCompleted:(id)completed;
- (void)resumeLocationUpdates;
- (void)pauseLocationUpdates:(BOOL)updates;
- (void)onDidBecomeActive:(id)active;
- (void)onWillEnterForeground:(id)foreground;
- (void)onDidEnterBackground:(id)background;
- (void)onClientEventAutopauseStatus:(id)status;
- (void)onClientEventBatch:(id)batch;
- (void)onClientEventInterrupted:(id)interrupted;
- (void)onClientEventVehicleSpeed:(id)speed;
- (void)onClientEventVehicleHeading:(id)heading;
- (void)onClientEventSignificantLocationVisit:(id)visit;
- (void)onClientEventSignificantLocationVisitStateRequest:(id)request;
- (BOOL)isAuthorizedForPreciseLocation;
- (BOOL)isAuthorizedForWidgetUpdates;
- (void)requestWhenInUseAuthorization;
- (void)requestWhenInUseAuthorizationWithPrompt;
- (void)requestWhenInUseAuthorizationWithPurposeKey:(id)key;
- (void)requestAlwaysAuthorization;
- (void)_requestTemporaryFullAccuracyWithUsageDescription:(id)description;
- (void)_requestTemporaryFullAccuracyWithUsageDescription:(id)description completion:(id /* block */)completion;
- (void)requestTemporaryPreciseLocationAuthorizationWithPurposeKey:(id)key;
- (void)requestTemporaryPreciseLocationAuthorizationWithPurposeKey:(id)key completion:(id /* block */)completion;
- (void)requestTemporaryFullAccuracyAuthorizationWithPurposeKey:(id)key;
- (void)requestTemporaryFullAccuracyAuthorizationWithPurposeKey:(id)key completion:(id /* block */)completion;
- (BOOL)isLocationServicesPreferencesDialogEnabled;
- (BOOL)isDynamicAccuracyReductionEnabled;
- (void)registerAsLocationClient;
- (void)setIsActuallyAWatchKitExtension:(BOOL)extension;
- (id)historicalUpdaterWithCenter:(struct CLLocationCoordinate2D { double x0; double x1; })center radius:(double)radius dateInterval:(id)interval sampleCount:(int)count queue:(id)queue handler:(id /* block */)handler;
- (id)historicalUpdaterWithDateInterval:(id)interval sampleCount:(int)count queue:(id)queue handler:(id /* block */)handler;
- (id)liveUpdaterWithConfiguration:(long long)configuration queue:(id)queue handler:(id /* block */)handler;
- (id)liveUpdaterWithQueue:(id)queue handler:(id /* block */)handler;
- (id)_liveUpdaterWithConfiguration:(long long)configuration queue:(id)queue handler:(id /* block */)handler;
- (id)_liveUpdaterWithQueue:(id)queue handler:(id /* block */)handler;
- (id)_historicalUpdaterWithDateInterval:(id)interval sampleCount:(int)count queue:(id)queue handler:(id /* block */)handler;
- (id)_historicalUpdaterWithCenter:(struct CLLocationCoordinate2D { double x0; double x1; })center radius:(double)radius dateInterval:(id)interval sampleCount:(int)count queue:(id)queue handler:(id /* block */)handler;
- (id)backgroundActivitySession;
- (void)requestMonitorWithConfiguration:(id)configuration completion:(id /* block */)completion;
@end

#endif /* CLLocationManager_h */
