//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 172.8.0.0.0
//
#ifndef CBController_h
#define CBController_h
@import Foundation;

#include "CBActivatable-Protocol.h"
#include "CBDevice.h"
#include "CBErrorReporting-Protocol.h"
#include "CBInterruptable-Protocol.h"
#include "CBLabelable-Protocol.h"
#include "CBRemotable-Protocol.h"
#include "CBStateReporting-Protocol.h"
#include "CBXPCReceivable-Protocol.h"
#include "CUXPCCodable-Protocol.h"

@class NSString;
@protocol OS_dispatch_queue, OS_xpc_object;

@interface CBController : NSObject<CBXPCReceivable, CUXPCCodable, CBActivatable, CBErrorReporting, CBInterruptable, CBLabelable, CBStateReporting, CBRemotable> {
  /* instance variables */
  BOOL _activateAssertionCalled;
  BOOL _activateCalled;
  id /* block */ _activateCompletion;
  BOOL _changesPending;
  BOOL _direct;
  BOOL _invalidateCalled;
  BOOL _invalidateDone;
  struct LogCategory { int x0; int x1; char * x2; unsigned int x3; char * x4; char * x5; int x6; struct LogCategory * x7; struct LogOutput * x8; struct LogOutput * x9; unsigned long long x10; unsigned long long x11; unsigned int x12; unsigned int x13; char * x14; struct LogCategoryPrivate * x15; } * _ucat;
  NSObject<OS_xpc_object> *_xpcCnx;
}

@property (copy, nonatomic) NSString *appID;
@property (nonatomic) unsigned int assertionFlags;
@property (nonatomic) unsigned int clientID;
@property (nonatomic) unsigned int internalFlags;
@property (retain, nonatomic) NSObject<OS_xpc_object> *testListenerEndpoint;
@property (readonly, nonatomic) int discoverableState;
@property (copy, nonatomic) id /* block */ discoverableStateChangedHandler;
@property (readonly, nonatomic) int inquiryState;
@property (copy, nonatomic) id /* block */ inquiryStateChangedHandler;
@property (copy, nonatomic) id /* block */ relayMessageHandler;
@property (copy, nonatomic) id /* block */ tipiChangedHandler;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (copy, nonatomic) id /* block */ invalidationHandler;
@property (copy, nonatomic) id /* block */ errorHandler;
@property (copy, nonatomic) id /* block */ interruptionHandler;
@property (copy, nonatomic) NSString *label;
@property (readonly, nonatomic) long long bluetoothState;
@property (copy, nonatomic) id /* block */ bluetoothStateChangedHandler;
@property (retain, nonatomic) CBDevice *remoteDevice;

/* class methods */
+ (BOOL)bluetoothModificationAllowed;
+ (unsigned long long)numberOfPointingDevices;
+ (unsigned long long)bluetoothPointingDeviceCount;
+ (unsigned long long)nonBluetoothPointingDeviceCount;
+ (BOOL)setBluetoothModificationAllowed:(BOOL)allowed error:(id *)error;
+ (unsigned int)featureFlags;
+ (BOOL)safeToPowerOffBluetooth;
+ (unsigned char)getAllowedToPowerOffBluetoothState;
+ (BOOL)systemHasOnlyBluetoothPointingDevices;
+ (id)controllerInfoAndReturnError:(id *)error;
+ (id)controllerInfoWithEndpoint:(id)endpoint error:(id *)error;
+ (id)performDeviceRequest:(id)request device:(id)device error:(id *)error;
+ (id)performDeviceRequest:(id)request device:(id)device xpcEndpoint:(id)endpoint error:(id *)error;
+ (void)setOfflineAdvertisingParams:(id)params;
+ (id)readPrefKeys:(id)keys error:(id *)error;
+ (BOOL)writePrefKey:(id)key value:(id)value error:(id *)error;

/* instance methods */
- (id)init;
- (void)dealloc;
- (id)initWithXPCObject:(id)xpcobject error:(id *)error;
- (void)encodeWithXPCObject:(id)xpcobject;
- (id)description;
- (id)descriptionWithLevel:(int)level;
- (void)activateWithCompletion:(id /* block */)completion;
- (void)_activate;
- (void)_activateDirectStart;
- (void)_activateXPCStart:(BOOL)xpcstart;
- (void)_activateXPCCompleted:(id)xpccompleted;
- (id)_ensureXPCStarted;
- (void)_interrupted;
- (void)invalidate;
- (void)_invalidateDirect;
- (void)_invalidated;
- (void)_updateIfNeededWithBlock:(id /* block */)block;
- (void)_update;
- (void)xpcReceivedMessage:(id)message;
- (void)_xpcReceivedMessage:(id)message;
- (void)_xpcReceivedDiscoverableStateChanged:(id)changed;
- (void)_xpcReceivedInquiryStateChanged:(id)changed;
- (void)_xpcReceivedPowerStateChanged:(id)changed;
- (void)_xpcReceivedRelayMessage:(id)message;
- (void)_xpcReceivedTipiChanged:(id)changed;
- (void)activateAssertionWithFlags:(unsigned int)flags completion:(id /* block */)completion;
- (void)_activateAssertionWithFlagsDirect:(unsigned int)direct completion:(id /* block */)completion;
- (void)_activateAssertionWithFlagsXPC:(unsigned int)xpc completion:(id /* block */)completion;
- (void)getControllerInfoWithCompletion:(id /* block */)completion;
- (void)getControllerSettingsWithCompletionHandler:(id /* block */)handler;
- (void)modifyControllerSettings:(id)settings completionHandler:(id /* block */)handler;
- (void)getDevicesWithFlags:(unsigned int)flags completionHandler:(id /* block */)handler;
- (void)performDeviceRequest:(id)request device:(id)device completion:(id /* block */)completion;
- (void)deleteDevice:(id)device completion:(id /* block */)completion;
- (void)modifyDevice:(id)device completion:(id /* block */)completion;
- (void)modifyDevice:(id)device connectionPriorityDevices:(id)devices timeoutSeconds:(double)seconds completionHandler:(id /* block */)handler;
- (void)modifyDevice:(id)device peerSourceDevice:(id)device peerSourceState:(char)state completionHandler:(id /* block */)handler;
- (void)modifyDevice:(id)device peerSourceDevice:(id)device peerSourceState:(char)state requestFlags:(unsigned int)flags completionHandler:(id /* block */)handler;
- (void)modifyDevice:(id)device settings:(id)settings completion:(id /* block */)completion;
- (void)diagnosticControl:(id)control completion:(id /* block */)completion;
- (void)diagnosticLog:(id)log completion:(id /* block */)completion;
- (void)diagnosticShow:(id)show completion:(id /* block */)completion;
- (void)setLowPowerModeWithReason:(int)reason completion:(id /* block */)completion;
- (BOOL)setLowPowerModeWithReason:(int)reason error:(id *)error;
- (void)getPowerStateWithCompletion:(id /* block */)completion;
- (void)setPowerState:(long long)state completion:(id /* block */)completion;
- (void)sendRelayMessageType:(unsigned char)type messageData:(id)data conduitDevice:(id)device destinationDevice:(id)device completionHandler:(id /* block */)handler;
- (void)sendSmartRoutingInformation:(id)information device:(id)device completionHandler:(id /* block */)handler;
- (void)sendConversationDetectMessage:(id)message device:(id)device completionHandler:(id /* block */)handler;
- (void)resetCBExtensionID:(id)id completionHandler:(id /* block */)handler;
- (void)updateIdentities:(id)identities completion:(id /* block */)completion;
@end

#endif /* CBController_h */
