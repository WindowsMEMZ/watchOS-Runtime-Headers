//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1454.2.1.0.0
//
#ifndef EKDayOccurrenceView_h
#define EKDayOccurrenceView_h
@import Foundation;

#include "UIView.h"
#include "CUIKOROccurrenceState-Protocol.h"
#include "EKDayOccurrenceTravelTimeView.h"
#include "EKDayOccurrenceTravelTimeViewMetricsDelegate-Protocol.h"
#include "EKDayOccurrenceView.h"
#include "EKDayOccurrenceViewDelegate-Protocol.h"
#include "EKEventGestureController.h"
#include "NSCopying-Protocol.h"

@class CUIKOROccurrenceState, EKEvent, NSString, UIColor, UIImageView, UITraitCollection, UIView;

@interface EKDayOccurrenceView : UIView<CUIKOROccurrenceState, NSCopying, EKDayOccurrenceTravelTimeViewMetricsDelegate> {
  /* instance variables */
  UIImageView *_eventBackgroundView;
  UIImageView *_contentView;
  UIImageView *_travelBackgroundView;
  EKDayOccurrenceTravelTimeView *_travelTimeContentView;
  BOOL _needsContentCalc;
  BOOL _needsBackgroundImageUpdate;
  UIView *_startResizeHandle;
  UIView *_endResizeHandle;
  double _originalXBeforeOffset;
  unsigned int x :1 _touchKeptInsideOccurrence;
  unsigned int x :1 _offsetContentForLandscape;
  unsigned long long _bottomPinningState;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _unpinnedEventBackgroundFrame;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _unpinnedTravelBackgroundFrame;
  UIView *_pinFadeView;
  long long _currentRequestId;
  unsigned long long _invalidatedRequestOptions;
  struct CGPoint { double x; double y; } _contentLocationDuringReducedProcessing;
  UIColor *_stagedBackgroundColor;
  BOOL _editMenuPresented;
  EKEventGestureController *_gestureController;
}

@property (nonatomic) BOOL touchesAreBeingTracked;
@property (weak, nonatomic) NSObject<EKDayOccurrenceViewDelegate> *delegate;
@property (weak, nonatomic) EKDayOccurrenceView *selectedCopy;
@property (nonatomic) BOOL isVibrant;
@property (readonly, nonatomic) BOOL visibleHeightLocked;
@property (nonatomic) double visibleHeight;
@property (retain, nonatomic) EKEvent *occurrence;
@property (nonatomic) BOOL selected;
@property (nonatomic) BOOL dimmed;
@property (nonatomic) BOOL allDayDrawingStyle;
@property (nonatomic) BOOL drawsResizeHandles;
@property (nonatomic) BOOL usesSmallText;
@property (nonatomic) BOOL hideBackgroundImage;
@property (nonatomic) BOOL hideText;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } margin;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } padding;
@property (nonatomic) BOOL isSelectedCopyView;
@property (nonatomic) double travelTimeSubviewHeightInPoints;
@property (nonatomic) BOOL isProposedTime;
@property (nonatomic) long long birthdayCount;
@property (nonatomic) BOOL tentative;
@property (nonatomic) BOOL declined;
@property (nonatomic) BOOL cancelled;
@property (nonatomic) BOOL needsReply;
@property (nonatomic) BOOL allDay;
@property (nonatomic) BOOL birthday;
@property (nonatomic) double cappedColorBarHeight;
@property (nonatomic) BOOL showsTravelTime;
@property (nonatomic) double travelTime;
@property (nonatomic) long long routingMode;
@property (nonatomic) BOOL reduceLayoutProcessingForAnimation;
@property (nonatomic) double topPinningProximity;
@property (nonatomic) double bottomPinningProximity;
@property (readonly, nonatomic) BOOL isPinned;
@property (nonatomic) BOOL pointerInteractionDisabled;
@property (nonatomic) BOOL hasPrecedingDuration;
@property (nonatomic) BOOL hasTrailingDuration;
@property (nonatomic) double topYBoundaryForText;
@property (readonly, nonatomic) CUIKOROccurrenceState *currentImageState;
@property (readonly, nonatomic) BOOL isSelected;
@property (readonly, nonatomic) BOOL isDimmed;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } backgroundRect;
@property (readonly, nonatomic) double travelTimeHeight;
@property (readonly, nonatomic) long long userInterfaceStyle;
@property (readonly, nonatomic) long long horizontalSizeClass;
@property (readonly, nonatomic) UITraitCollection *traitCollection;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)_viewCache;
+ (void)_clearViewCache;
+ (void)clearCaches;
+ (id)occurrenceViewWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
+ (double)minimumHeightForSizeClass:(long long)class orientation:(long long)orientation;
+ (double)minimumHeightForSizeClass:(long long)class orientation:(long long)orientation isAllDay:(BOOL)day;
+ (double)minimumHeightForSizeClass:(long long)class orientation:(long long)orientation isAllDay:(BOOL)day usesSmallText:(BOOL)text;
+ (double)bottomShadowMargin;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })contentStretchRectForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
+ (id)framePathForExternalDragOperationWithSize:(struct CGSize { double x0; double x1; })size;
+ (id)imageForExternalDragOperationFromEvent:(id)event style:(long long)style;
+ (double)minNaturalTextHeightForEvent:(id)event usingSmallText:(BOOL)text sizeClass:(long long)class;
+ (double)enoughHeightForOneLineForEvent:(id)event usingSmallText:(BOOL)text sizeClass:(long long)class;
+ (double)barToBarGapWidth;
+ (double)barToBarHorizontalDistanceIncludingBarWidth;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })defaultMargin;
+ (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })defaultPadding;

/* instance methods */
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)dealloc;
- (void)setUserInteractionEnabled:(BOOL)enabled;
- (void)prepareForReuse;
- (void)_invalidateCurrentRequest;
- (void)forceUpdateColors;
- (void)_addTravelTimeSubviews;
- (void)_removeTravelTimeSubviews;
- (void)_invalidateContentBounds;
- (BOOL)hasIcon;
- (void)setAllDayDrawingStyle:(BOOL)style animated:(BOOL)animated;
- (void)_updateColors;
- (void)removeFromSuperview;
- (void)didMoveToSuperview;
- (void)_updateResizeHandleLocations;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)animateToFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame isAllDay:(BOOL)day beginFromCurrentState:(BOOL)state whenFinished:(id /* block */)finished;
- (id)_newResizeHandleView;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_computeTravelTimeContentRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameMutatedForProximityToHourLine:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })line;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameOfOpaqueContent;
- (void)layoutSubviews;
- (void)_updateContentImageViewIfNeeded;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_frameForText;
- (void)requestContentIfNeeded:(unsigned long long)needed completion:(id /* block */)completion;
- (void)_updateContentWithPayload:(id)payload;
- (BOOL)_contentViewHasContent;
- (struct CGSize { double x0; double x1; })_contentViewContentSize;
- (void)forceUpdateContentWithPayload:(id)payload;
- (void)_invalidateBackgroundImage;
- (void)_invalidateTextImage;
- (void)_invalidateTravelTimeImage;
- (void)_invalidateAllImages;
- (BOOL)pointInside:(struct CGPoint { double x0; double x1; })inside withEvent:(id)event;
- (void)touchesBegan:(id)began withEvent:(id)event;
- (void)touchesMoved:(id)moved withEvent:(id)event;
- (void)touchesEnded:(id)ended withEvent:(id)event;
- (void)touchesCancelled:(id)cancelled withEvent:(id)event;
- (void)updateAlpha;
- (int)dragTypeFromPoint:(struct CGPoint { double x0; double x1; })point;
- (id)arrayOfResizeHandles;
- (void)bringResizeHandlesToFront;
- (double)viewMaxNaturalTextHeight;
- (double)enoughHeightForOneLine;
- (double)_verticalContentInset;
- (void)fadeInContentViewAt:(double)at minWidth:(double)width animated:(BOOL)animated;
- (BOOL)resetContentViewToOriginalState:(BOOL)state;
- (BOOL)_isTimedOccurrenceDrawingStyle;
- (void)_resetContentViewPosition;
- (void)setHideText:(BOOL)text animate:(BOOL)animate;
- (long long)compareOccurrenceViewForTabOrdering:(id)ordering;
- (long long)_compareOccurrenceViewForSelectedCopyOrdering:(id)ordering;
- (long long)_compareOccurrenceViewTopToBottomLeftToRight:(id)right;
- (long long)_compareOccurrenceViewTopToBottom:(id)bottom;
- (BOOL)_isAboveOccurrenceView:(id)view overlapToIgnore:(double)ignore;
- (BOOL)_isAboveAllDayOccurrenceView:(id)view;
- (BOOL)_isBelowOccurrenceView:(id)view overlapToIgnore:(double)ignore;
- (BOOL)_isBelowAllDayOccurrenceView:(id)view;
- (long long)_compareOccurrenceViewLeftToRight:(id)right;
- (void)_updateCornerRadius;
- (void)_setUpInteractions;
- (void)presentEditingMenuFromGestureController:(id)controller;
- (void)dismissEditingMenu;
- (BOOL)isTentative;
- (BOOL)isDeclined;
- (BOOL)isCancelled;
- (BOOL)isAllDay;
- (BOOL)isBirthday;
@end

#endif /* EKDayOccurrenceView_h */
