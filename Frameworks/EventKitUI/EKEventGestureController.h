//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1454.2.1.0.0
//
#ifndef EKEventGestureController_h
#define EKEventGestureController_h
@import Foundation;

#include "EKDayOccurrenceView.h"
#include "EKEventGestureControllerDelegate-Protocol.h"
#include "EKUIEmailCompositionManager.h"
#include "EKUIRecurrenceAlertController.h"
#include "UIAlertViewDelegate-Protocol.h"
#include "UIGestureRecognizerDelegate-Protocol.h"

@class EKCalendarDate, EKEvent, NSString, NSTimer, UILongPressGestureRecognizer, UITapGestureRecognizer, UIView;
@protocol EKEventGestureControllerUntimedDelegate;

@interface EKEventGestureController : NSObject<UIGestureRecognizerDelegate, UIAlertViewDelegate> {
  /* instance variables */
  UILongPressGestureRecognizer *_draggingGestureRecognizer;
  UITapGestureRecognizer *_tapGestureRecognizer;
  UIView *_targetView;
  int _currentDraggingState;
  int _pendingDraggingState;
  int _queuedDraggingState;
  BOOL _dragCompletionPending;
  BOOL _dropAnimationInProgress;
  BOOL _waitingForDragToInitialize;
  BOOL _needToSetSystemDragPreview;
  BOOL _dragInitiationLocked;
  BOOL _dragInteractionCancellingWithoutDragging;
  int _snappingTypeForCurrentDrag;
  int _currentDragType;
  double _firstTouchTime;
  struct CGPoint { double x; double y; } _previousTouchPoint;
  double _previousTouchTime;
  double _previousTouchVelocity;
  long long _touchOffsetDays;
  double _dateAtFirstTouchPoint;
  BOOL _isNewEvent;
  BOOL _isInCancelRegion;
  BOOL _isMultiDayTimedEvent;
  EKCalendarDate *_currentDay;
  BOOL _horizontalDragLocked;
  BOOL _dragLockDisabled;
  BOOL _isDragging;
  NSTimer *_scrollTimer;
  double _timeSinceEnteredPageMargin;
  double _firstContactOfDraggingViewTop;
  BOOL _hasStartedScrolling;
  long long _consecutivePageTurnCount;
  BOOL _forcedStart;
  BOOL _needsCommit;
  EKUIRecurrenceAlertController *_recurrenceAlertController;
  UITapGestureRecognizer *_multiSelectGestureRecognizer;
}

@property (retain, nonatomic) EKEvent *event;
@property (retain, nonatomic) NSString *sessionIdentifierForDebug;
@property (retain, nonatomic) EKDayOccurrenceView *draggingViewSource;
@property (retain, nonatomic) EKUIEmailCompositionManager *messageSendingManager;
@property (weak, nonatomic) NSObject<EKEventGestureControllerUntimedDelegate> *untimedDelegate;
@property (weak, nonatomic) NSObject<EKEventGestureControllerDelegate> *delegate;
@property (nonatomic) BOOL usesXDragOffsetInCancelRegion;
@property (nonatomic) BOOL usesHorizontalDragLocking;
@property (nonatomic) BOOL commitBlocked;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } firstTouchPoint;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } latestTouchPoint;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } touchOffset;
@property (readonly, nonatomic) EKDayOccurrenceView *draggingView;
@property (readonly, nonatomic) BOOL dragGestureInProgress;
@property (readonly, nonatomic) int currentDragSnappingType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithView:(id)view;
- (void)dealloc;
- (void)invalidate;
- (void)updateDraggingOccurrence;
- (void)updateDraggingOccurrenceForced:(BOOL)forced animated:(BOOL)animated;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_calculateFrameForDraggingViewIncludingTravelTime:(BOOL)time;
- (void)updateDraggingOccurrenceFrame;
- (void)removeDraggedOccurrence;
- (void)promptUserForRecurrenceActionOnOccurrence:(id)occurrence whenFinished:(id /* block */)finished;
- (void)promptUserForProposeNewTime:(id)time forEvent:(id)event whenFinished:(id /* block */)finished;
- (BOOL)gestureRecognizerShouldBegin:(id)begin;
- (BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
- (void)updateDraggingOccurrenceOrigin;
- (void)updateDraggingOccurrenceFrameFromSource;
- (void)forceStartWithOccurrence:(id)occurrence shouldUpdateViewSource:(BOOL)source shouldUpdateOrigin:(BOOL)origin shouldPresentEditMenu:(BOOL)menu;
- (void)endForcedStartAndUndim;
- (void)endForcedStart;
- (void)liftUpOccurrenceForEditingEvent:(id)event;
- (void)_cleanUpForcedStart;
- (void)_tapGesture:(id)gesture;
- (void)_multiSelect:(id)select;
- (void)_longPress:(id)press;
- (BOOL)_useNewDragAndDropAPI;
- (BOOL)_shouldUseSystemAPIForDrag;
- (void)_handleLongPressResponseForOldAPI:(id)api;
- (void)_commitUntimed;
- (void)_installScrollTimer;
- (void)_removeScrollTimer;
- (void)_scrollTimerFired:(id)fired;
- (BOOL)_setDraggingState:(int)state withPoint:(struct CGPoint { double x0; double x1; })point event:(id)event;
- (BOOL)_setDraggingState:(int)state withPoint:(struct CGPoint { double x0; double x1; })point event:(id)event context:(id)context;
- (int)_draggingState;
- (id)_debugStringForDraggingState:(int)state;
- (void)didCrossDragBoundary:(int)boundary;
- (void)_manageDraggingViewInteractivityForStateChangeFrom:(int)from to:(int)to;
- (BOOL)_beginNewDragFromOffStateWithPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_setUpInitialTouchPointsWithPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_cleanUpAllStateWithTouchPoint:(struct CGPoint { double x0; double x1; })point commit:(BOOL)commit;
- (id)_createNewEventIfNeededAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_adjustNewEventDates:(id)dates withPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_createAndSetUpDraggingViewWithTouchPoint:(struct CGPoint { double x0; double x1; })point event:(id)event ignoreOffsets:(BOOL)offsets showEditMenu:(BOOL)menu;
- (BOOL)_beginEditingSessionAtPoint:(struct CGPoint { double x0; double x1; })point withEvent:(id)event;
- (BOOL)canProposeNewTime:(id)time;
- (BOOL)__timedDelegateBeginEditingSessionAtPoint:(struct CGPoint { double x0; double x1; })point withEvent:(id)event;
- (void)_suspendCurrentDrag;
- (void)_resumePreviousDrag;
- (void)_writeDraggingChangesToOccurrenceWithTouchPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_returnDraggingViewToLastCommittedPositionFromTouchPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_dragFailedToStart;
- (id)_viewForTracking;
- (void)_updateFlingToCancelParameters;
- (void)_setEventCalendar:(id)calendar useManagedCalendar:(BOOL)calendar;
- (id)_findFirstCalendar:(id)calendar;
- (BOOL)_calendarCanAcceptManagedData:(id)data;
- (id)originalStartDateForEvent:(id)event includingTravel:(BOOL)travel;
- (id)_createTemporaryView:(id)view animated:(BOOL)animated;
- (void)_updatePositionOfEditingMenuForView:(id)view;
- (void)_hideEditingMenuForView:(id)view;
- (void)_animateInNewEvent;
- (void)_setTouchOffsetsFromPoint:(struct CGPoint { double x0; double x1; })point fixedToCenter:(BOOL)center;
- (void)_setUpAfterForcedStartFromPoint:(struct CGPoint { double x0; double x1; })point;
- (double)_minimumDuration;
- (void)_update;
- (void)_commit;
- (void)_cancel;
- (BOOL)_flingOrCancelDraggingViewIfNeeded;
- (double)_allDayBottomPadding;
- (double)_alignedYOriginForAllDayOccurrence:(id)occurrence atPoint:(struct CGPoint { double x0; double x1; })point floorAtAllDayRegionBottom:(BOOL)bottom;
- (double)_capOccurrenceViewYOrigin:(double)yorigin;
- (void)_updateHorizontalDragLockForPoint:(struct CGPoint { double x0; double x1; })point;
- (double)_computeWidthForOccurrenceView;
- (double)_computeHeightForOccurrenceViewOfDuration:(double)duration event:(id)event allDay:(BOOL)day;
- (struct CGPoint { double x0; double x1; })_computeOriginAtTouchPoint:(struct CGPoint { double x0; double x1; })point forDate:(double)date isAllDay:(BOOL)day allowXOffset:(BOOL)xoffset allowFloorAtRegionBottom:(BOOL)bottom;
- (double)_cancelRegionMargin;
- (BOOL)_isPointInCancelRegion:(struct CGPoint { double x0; double x1; })region;
- (double)_Debug_HoursSinceStartOfDay:(double)day;
- (void)_updateSnappingTypeForCurrentDrag;
@end

#endif /* EKEventGestureController_h */
