//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 956.0.0.0.0
//
#ifndef ACAccountStore_h
#define ACAccountStore_h
@import Foundation;

#include "ACAccountStoreCache.h"
#include "ACNotifyAccountCache.h"
#include "ACRemoteAccountStoreSession.h"
#include "ACRemoteAccountStoreSessionDelegate-Protocol.h"
#include "ACTimedExpirer.h"

@class NSArray, NSMutableDictionary, NSString, NSXPCListenerEndpoint;
@protocol OS_dispatch_queue;

@interface ACAccountStore : NSObject {
  /* instance variables */
  id _daemonAccountStoreDidChangeObserver;
  NSMutableDictionary *_accountCache;
  NSMutableDictionary *_accountsWithAccountTypeCache;
  NSXPCListenerEndpoint *_endpoint;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _remoteAccountStoreSessionLock;
  ACTimedExpirer *_remoteAccountStoreSessionExpirer;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _longLivedRemoteAccountStoreSessionLock;
  ACTimedExpirer *_longLivedRemoteAccountStoreSessionExpirer;
}

@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *replyQueue;
@property (readonly, nonatomic) ACRemoteAccountStoreSession *remoteAccountStoreSession;
@property (readonly, nonatomic) ACRemoteAccountStoreSession *longLivedRemoteAccountStoreSession;
@property (readonly) NSObject<ACRemoteAccountStoreSessionDelegate> *connectionDelegate;
@property (retain) ACNotifyAccountCache *_primaryAppleAccountCache;
@property (retain) ACAccountStoreCache *_testCache;
@property (readonly) NSString *effectiveBundleID;
@property (readonly, weak, nonatomic) NSArray *accounts;

/* class methods */
+ (id)defaultStore;
+ (void)_setDefaultStore:(id)store;
+ (void)_setConnectionTimeout:(unsigned long long)timeout;
+ (int)accountsWithAccountTypeIdentifierExist:(id)exist;
+ (long long)countOfAccountsWithAccountTypeIdentifier:(id)identifier;
+ (BOOL)canSaveAccountsOfAccountTypeIdentifier:(id)identifier;
+ (id)_obsoleteAccountTypeIDsToRemove;

/* instance methods */
- (id)init;
- (id)initWithRemoteEndpoint:(id)endpoint;
- (id)initWithEffectiveBundleID:(id)id;
- (id)initWithRemoteEndpoint:(id)endpoint effectiveBundleID:(id)id;
- (void)dealloc;
- (void)_clearAccountCaches;
- (void)disconnectFromRemoteAccountStore;
- (id)_connectionFailureError;
- (void)setNotificationsEnabled:(BOOL)enabled;
- (id)accountWithIdentifier:(id)identifier;
- (id)accountWithIdentifier:(id)identifier error:(id *)error;
- (void)accountWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (void)cachedAccountWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (id)accountTypeWithAccountTypeIdentifier:(id)identifier;
- (id)accountTypeWithAccountTypeIdentifier:(id)identifier error:(id *)error;
- (void)accountTypeWithIdentifier:(id)identifier completion:(id /* block */)completion;
- (id)accountsWithAccountType:(id)type;
- (id)accountsWithAccountType:(id)type options:(unsigned long long)options error:(id *)error;
- (void)accountsWithAccountType:(id)type completion:(id /* block */)completion;
- (void)accountsWithAccountType:(id)type options:(unsigned long long)options completion:(id /* block */)completion;
- (void)accountsWithAccountTypeIdentifiers:(id)identifiers completion:(id /* block */)completion;
- (void)accountsWithAccountTypeIdentifiers:(id)identifiers preloadedProperties:(id)properties completion:(id /* block */)completion;
- (id)accountsWithAccountTypeIdentifiers:(id)identifiers error:(id *)error;
- (id)accountsWithAccountTypeIdentifiers:(id)identifiers preloadedProperties:(id)properties error:(id *)error;
- (void)cachedAccountsWithAccountType:(id)type options:(unsigned long long)options completion:(id /* block */)completion;
- (void)accountsOnPairedDeviceWithAccountType:(id)type completion:(id /* block */)completion;
- (void)accountsOnPairedDeviceWithAccountTypes:(id)types withOptions:(id)options completion:(id /* block */)completion;
- (id)allDataclasses;
- (id)allAccountTypes;
- (void)visibleTopLevelAccountsWithAccountTypeIdentifiers:(id)identifiers completion:(id /* block */)completion;
- (BOOL)hasAccountWithDescription:(id)description;
- (void)kerberosAccountsForDomainFromURL:(id)url completion:(id /* block */)completion;
- (BOOL)isPushSupportedForAccount:(id)account;
- (void)insertAccountType:(id)type withCompletionHandler:(id /* block */)handler;
- (void)removeAccountType:(id)type withCompletionHandler:(id /* block */)handler;
- (void)removeAccount:(id)account withDeleteSync:(BOOL)sync completion:(id /* block */)completion;
- (void)removeAccount:(id)account withCompletionHandler:(id /* block */)handler;
- (void)removeAccount:(id)account withDataclassActions:(id)actions completion:(id /* block */)completion;
- (void)canSaveAccount:(id)account withCompletionHandler:(id /* block */)handler;
- (void)saveAccount:(id)account withCompletionHandler:(id /* block */)handler;
- (void)_saveAccount:(id)account verify:(BOOL)verify dataclassActions:(id)actions completion:(id /* block */)completion;
- (void)saveAccount:(id)account withDataclassActions:(id)actions completion:(id /* block */)completion;
- (void)saveAccount:(id)account withDataclassActions:(id)actions doVerify:(BOOL)verify completion:(id /* block */)completion;
- (void)saveVerifiedAccount:(id)account withCompletionHandler:(id /* block */)handler;
- (BOOL)saveVerifiedAccount:(id)account error:(id *)error;
- (int)updateExistenceCacheOfAccountWithTypeIdentifier:(id)identifier;
- (void)_checkSaveRateLimitForAccountType:(id)type;
- (void)requestAccessToAccountsWithType:(id)type withCompletionHandler:(id /* block */)handler;
- (void)requestAccessToAccountsWithType:(id)type options:(id)options completion:(id /* block */)completion;
- (id)accessKeysForAccountType:(id)type;
- (id)appPermissionsForAccountType:(id)type;
- (void)setPermissionGranted:(BOOL)granted forBundleID:(id)id onAccountType:(id)type;
- (void)clearAllPermissionsGrantedForAccountType:(id)type;
- (BOOL)permissionForAccountType:(id)type;
- (id)grantedPermissionsForAccountType:(id)type;
- (void)clearGrantedPermissionsForAccountType:(id)type;
- (void)verifyCredentialsForAccount:(id)account withHandler:(id /* block */)handler;
- (void)verifyCredentialsForAccount:(id)account saveWhenAuthorized:(BOOL)authorized withHandler:(id /* block */)handler;
- (void)verifyCredentialsForAccount:(id)account options:(id)options completion:(id /* block */)completion;
- (void)renewCredentialsForAccount:(id)account options:(id)options completion:(id /* block */)completion;
- (void)renewCredentialsForAccount:(id)account force:(BOOL)force reason:(id)reason completion:(id /* block */)completion;
- (void)renewCredentialsForAccount:(id)account reason:(id)reason completion:(id /* block */)completion;
- (void)renewCredentialsForAccount:(id)account completion:(id /* block */)completion;
- (void)renewCredentialsForAccount:(id)account services:(id)services completion:(id /* block */)completion;
- (void)migrateCredentialForAccount:(id)account completion:(id /* block */)completion;
- (void)runAccountMigrationPlugins:(id /* block */)plugins;
- (id)credentialForAccount:(id)account;
- (id)credentialForAccount:(id)account error:(id *)error;
- (id)credentialForAccount:(id)account serviceID:(id)id;
- (id)credentialForAccount:(id)account serviceID:(id)id error:(id *)error;
- (void)setCredential:(id)credential forAccount:(id)account serviceID:(id)id error:(id *)error;
- (id)credentialForAccount:(id)account bundleID:(id)id;
- (id)allCredentialItems;
- (id)credentialItemForAccount:(id)account serviceName:(id)name;
- (void)insertCredentialItem:(id)item withCompletionHandler:(id /* block */)handler;
- (void)saveCredentialItem:(id)item withCompletionHandler:(id /* block */)handler;
- (void)removeCredentialItem:(id)item withCompletionHandler:(id /* block */)handler;
- (id)parentAccountForAccount:(id)account;
- (id)parentAccountForAccount:(id)account error:(id *)error;
- (id)childAccountsForAccount:(id)account;
- (id)childAccountsForAccount:(id)account error:(id *)error;
- (id)childAccountsForAccount:(id)account withTypeIdentifier:(id)identifier;
- (id)enabledDataclassesForAccount:(id)account;
- (id)enabledDataclassesForAccount:(id)account error:(id *)error;
- (id)provisionedDataclassesForAccount:(id)account;
- (id)provisionedDataclassesForAccount:(id)account error:(id *)error;
- (id)supportedDataclassesForAccountType:(id)type;
- (id)syncableDataclassesForAccountType:(id)type;
- (id)displayTypeForAccountWithIdentifier:(id)identifier;
- (id)accountIdentifiersEnabledForDataclass:(id)dataclass;
- (id)accountIdentifiersEnabledToSyncDataclass:(id)dataclass;
- (void)preloadDataclassOwnersWithCompletion:(id /* block */)completion;
- (id)dataclassActionsForAccountSave:(id)save;
- (id)dataclassActionsForAccountSave:(id)save error:(id *)error;
- (id)dataclassActionsForAccountDeletion:(id)deletion;
- (id)dataclassActionsForAccountDeletion:(id)deletion error:(id *)error;
- (BOOL)isPerformingDataclassActionsForAccount:(id)account;
- (BOOL)isPerformingDataclassActionsForAccount:(id)account error:(id *)error;
- (BOOL)isTetheredSyncingEnabledForDataclass:(id)dataclass;
- (id)tetheredSyncSourceTypeForDataclass:(id)dataclass;
- (void)accountIdentifiersEnabledForDataclasses:(id)dataclasses withAccountTypeIdentifiers:(id)identifiers completion:(id /* block */)completion;
- (id)clientTokenForAccount:(id)account;
- (BOOL)addClientToken:(id)token forAccount:(id)account;
- (void)discoverPropertiesForAccount:(id)account options:(id)options completion:(id /* block */)completion;
- (void)openAuthenticationURL:(id)url forAccount:(id)account shouldConfirm:(BOOL)confirm completion:(id /* block */)completion;
- (void)openAuthenticationURLForAccount:(id)account withDelegateClassName:(id)name fromBundleAtPath:(id)path shouldConfirm:(BOOL)confirm completion:(id /* block */)completion;
- (void)notifyRemoteDevicesOfModifiedAccount:(id)account;
- (void)notifyRemoteDevicesOfModifiedAccount:(id)account withOptions:(id)options;
- (void)notifyRemoteDevicesOfModifiedAccount:(id)account withOptions:(id)options completion:(id /* block */)completion;
- (void)notifyRemoteDevicesOfUpdatedCredentials:(id)credentials;
- (void)notifyRemoteDevicesOfUpdatedCredentials:(id)credentials withOptions:(id)options;
- (void)notifyRemoteDevicesOfUpdatedCredentials:(id)credentials withOptions:(id)options completion:(id /* block */)completion;
- (void)saveAccount:(id)account toPairedDeviceWithOptions:(id)options completion:(id /* block */)completion;
- (void)removeAccountsFromPairedDeviceWithCompletion:(id /* block */)completion;
- (void)removeAccountsFromPairedDeviceWithOptions:(id)options completion:(id /* block */)completion;
- (void)removeAccountFromPairedDevice:(id)device withCompletion:(id /* block */)completion;
- (void)removeAccountFromPairedDevice:(id)device withOptions:(id)options completion:(id /* block */)completion;
- (BOOL)triggerKeychainMigrationIfNecessary:(id *)necessary;
- (void)removeObsoleteAccounts:(id /* block */)accounts;
- (void)_removeObsoleteAccountsInternal:(id)internal completion:(id /* block */)completion;
- (id)_removeObsoleteOSXServerAccountForMacOS:(id)os;
- (void)_removeObsoleteOSXServerAccountForiOS:(id)os;
- (id)_createSMTPAccountForServerAccount:(id)account;
- (void)handleURL:(id)url;
- (void)reportTelemetryForLandmarkEvent:(id /* block */)event;
- (void)scheduleBackupIfNonexistent:(id /* block */)nonexistent;
- (void)resetDatabaseToVersion:(id)version withCompletion:(id /* block */)completion;
- (void)shutdownAccountsD:(id /* block */)d;
- (unsigned long long)generationForCacheSuffix:(id)suffix;
- (id)accountsOfTypeID:(id)id customProperty:(id)property value:(id)value cacheSuffix:(id)suffix error:(id *)error;
- (void)accountsOfTypeID:(id)id customProperty:(id)property value:(id)value cacheSuffix:(id)suffix completion:(id /* block */)completion;
- (id)_sanitizeOptionsDictionary:(id)dictionary;
- (id)_unsanitizeError:(id)error;
- (id)_cache;
@end

#endif /* ACAccountStore_h */
