//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 162.13.0.0.0
//
#ifndef SNForwardPassAudioStreamAnalyzer_h
#define SNForwardPassAudioStreamAnalyzer_h
@import Foundation;

#include "SNAudioProcessorCache.h"
#include "SNTimeConverting-Protocol.h"

@class AVAudioFormat, NSArray, NSMutableArray, NSString;
@protocol {ProcessingTree="mGraph"{shared_ptr<DSPGraph::Graph>="__ptr_"^{Graph}"__cntrl_"^{__shared_weak_count}}"mProcessingContexts"{list<SoundAnalysis::ProcessingContext, std::allocator<SoundAnalysis::ProcessingContext>>="__end_"{__list_node_base<SoundAnalysis::ProcessingContext, void *>="__prev_"^v"__next_"^v}"__size_alloc_"{__compressed_pair<unsigned long, std::allocator<std::__list_node<SoundAnalysis::ProcessingContext, void *>>>="__value_"Q}}"mFormatMatchingNodes"{list<SoundAnalysis::FormatMatchingNode, std::allocator<SoundAnalysis::FormatMatchingNode>>="__end_"{__list_node_base<SoundAnalysis::FormatMatchingNode, void *>="__prev_"^v"__next_"^v}"__size_alloc_"{__compressed_pair<unsigned long, std::allocator<std::__list_node<SoundAnalysis::FormatMatchingNode, void *>>>="__value_"Q}}"mSharedProcessingNodes"{list<SoundAnalysis::SharedProcessingNode, std::allocator<SoundAnalysis::SharedProcessingNode>>="__end_"{__list_node_base<SoundAnalysis::SharedProcessingNode, void *>="__prev_"^v"__next_"^v}"__size_alloc_"{__compressed_pair<unsigned long, std::allocator<std::__list_node<SoundAnalysis::SharedProcessingNode, void *>>>="__value_"Q}}"mAnalyzerNodes"{list<SoundAnalysis::AnalyzerNode, std::allocator<SoundAnalysis::AnalyzerNode>>="__end_"{__list_node_base<SoundAnalysis::AnalyzerNode, void *>="__prev_"^v"__next_"^v}"__size_alloc_"{__compressed_pair<unsigned long, std::allocator<std::__list_node<SoundAnalysis::AnalyzerNode, void *>>>="__value_"Q}}"mRootNode"{RootNode="_vptr$ProcessingNode"^^?"mUpstreamNode"^{ProcessingNode}"mDownstreamNodes"{list<SoundAnalysis::ProcessingNode *, std::allocator<SoundAnalysis::ProcessingNode *>>="__end_"{__list_node_base<SoundAnalysis::ProcessingNode *, void *>="__prev_"^v"__next_"^v}"__size_alloc_"{__compressed_pair<unsigned long, std::allocator<std::__list_node<SoundAnalysis::ProcessingNode *, void *>>>="__value_"Q}}"mProcessingBox"^{Box}"mUpstreamFormat"{FormatAndBlockSize="mFormat"{StreamDescription="mSampleRate"d"mFormatID"I"mFormatFlags"I"mBytesPerPacket"I"mFramesPerPacket"I"mBytesPerFrame"I"mChannelsPerFrame"I"mBitsPerChannel"I"mReserved"I}"mBlockSize"I}"mDownstreamFormat"{FormatAndBlockSize="mFormat"{StreamDescription="mSampleRate"d"mFormatID"I"mFormatFlags"I"mBytesPerPacket"I"mFramesPerPacket"I"mBytesPerFrame"I"mChannelsPerFrame"I"mBitsPerChannel"I"mReserved"I}"mBlockSize"I}}"mMaxFramesPerSlice"I"mWillInitializeCallback"{function<void (std::shared_ptr<DSPGraph::Graph>, unsigned long)>="__f_"{__value_func<void (std::shared_ptr<DSPGraph::Graph>, unsigned long)>="__buf_"{type="__lx"[24C]}"__f_"^v}}"mCurrentInputSampleTime"q}, {list<SoundAnalysis::ProcessingContext, std::allocator<SoundAnalysis::ProcessingContext>>="__end_"{__list_node_base<SoundAnalysis::ProcessingContext, void *>="__prev_"^v"__next_"^v}"__size_alloc_"{__compressed_pair<unsigned long, std::allocator<std::__list_node<SoundAnalysis::ProcessingContext, void *>>>="__value_"Q}};

@interface SNForwardPassAudioStreamAnalyzer : NSObject<SNTimeConverting> {
  /* instance variables */
  SNAudioProcessorCache *_processorCache;
  struct list<SoundAnalysis::ProcessingContext, std::allocator<SoundAnalysis::ProcessingContext>> { struct __list_node_base<SoundAnalysis::ProcessingContext, void *> { void *__prev_; void *__next_; } __end_; struct __compressed_pair<unsigned long, std::allocator<std::__list_node<SoundAnalysis::ProcessingContext, void *>>> { unsigned long long __value_; } __size_alloc_; } _processingContexts;
  struct ProcessingTree { struct shared_ptr<DSPGraph::Graph> { struct Graph *__ptr_; struct __shared_weak_count *__cntrl_; } mGraph; struct list<SoundAnalysis::ProcessingContext, std::allocator<SoundAnalysis::ProcessingContext>> { struct __list_node_base<SoundAnalysis::ProcessingContext, void *> { void *__prev_; void *__next_; } __end_; struct __compressed_pair<unsigned long, std::allocator<std::__list_node<SoundAnalysis::ProcessingContext, void *>>> { unsigned long long __value_; } __size_alloc_; } mProcessingContexts; struct list<SoundAnalysis::FormatMatchingNode, std::allocator<SoundAnalysis::FormatMatchingNode>> { struct __list_node_base<SoundAnalysis::FormatMatchingNode, void *> { void *__prev_; void *__next_; } __end_; struct __compressed_pair<unsigned long, std::allocator<std::__list_node<SoundAnalysis::FormatMatchingNode, void *>>> { unsigned long long __value_; } __size_alloc_; } mFormatMatchingNodes; struct list<SoundAnalysis::SharedProcessingNode, std::allocator<SoundAnalysis::SharedProcessingNode>> { struct __list_node_base<SoundAnalysis::SharedProcessingNode, void *> { void *__prev_; void *__next_; } __end_; struct __compressed_pair<unsigned long, std::allocator<std::__list_node<SoundAnalysis::SharedProcessingNode, void *>>> { unsigned long long __value_; } __size_alloc_; } mSharedProcessingNodes; struct list<SoundAnalysis::AnalyzerNode, std::allocator<SoundAnalysis::AnalyzerNode>> { struct __list_node_base<SoundAnalysis::AnalyzerNode, void *> { void *__prev_; void *__next_; } __end_; struct __compressed_pair<unsigned long, std::allocator<std::__list_node<SoundAnalysis::AnalyzerNode, void *>>> { unsigned long long __value_; } __size_alloc_; } mAnalyzerNodes; struct RootNode { undefined * *_vptr$ProcessingNode; struct ProcessingNode *mUpstreamNode; struct list<SoundAnalysis::ProcessingNode *, std::allocator<SoundAnalysis::ProcessingNode *>> { struct __list_node_base<SoundAnalysis::ProcessingNode *, void *> { void *__prev_; void *__next_; } __end_; struct __compressed_pair<unsigned long, std::allocator<std::__list_node<SoundAnalysis::ProcessingNode *, void *>>> { unsigned long long __value_; } __size_alloc_; } mDownstreamNodes; struct Box *mProcessingBox; struct FormatAndBlockSize { struct StreamDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } mFormat; unsigned int mBlockSize; } mUpstreamFormat; struct FormatAndBlockSize { struct StreamDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } mFormat; unsigned int mBlockSize; } mDownstreamFormat; } mRootNode; unsigned int mMaxFramesPerSlice; struct function<void (std::shared_ptr<DSPGraph::Graph>, unsigned long)> { struct __value_func<void (std::shared_ptr<DSPGraph::Graph>, unsigned long)> { struct type { unsigned char x[24] __lx; } __buf_; void *__f_; } __f_; } mWillInitializeCallback; long long mCurrentInputSampleTime; } _processingTree;
  AVAudioFormat *_currentFormat;
  NSArray *_requests;
  NSMutableArray *_analyzerInfos;
  BOOL _shouldRebuildProcessingTree;
}

@property (readonly, nonatomic) double clientSampleRate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (void)dealloc;
- (long long)clientSampleTimeFromSampleTime:(long long)time fromBox:(void *)box;
- (id)detailedDescription;
@end

#endif /* SNForwardPassAudioStreamAnalyzer_h */
