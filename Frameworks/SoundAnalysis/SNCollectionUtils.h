//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 162.13.0.0.0
//
#ifndef SNCollectionUtils_h
#define SNCollectionUtils_h
@import Foundation;

@interface SNCollectionUtils : NSObject // (Swift)
/* class methods */
+ (id)subtractSetArray:(id)array fromSetArray:(id)array;
+ (id)mapValuesInDictionary:(id)dictionary pairTransform:(id /* block */)transform error:(id *)error;
+ (id)mapValuesInDictionary:(id)dictionary pairTransform:(id /* block */)transform;
+ (id)mapValuesInDictionary:(id)dictionary transform:(id /* block */)transform error:(id *)error;
+ (id)mapValuesInDictionary:(id)dictionary transform:(id /* block */)transform;
+ (id)mapKeysInDictionary:(id)dictionary fallablePairTransform:(id /* block */)transform error:(id *)error;
+ (id)mapKeysInDictionary:(id)dictionary pairTransform:(id /* block */)transform error:(id *)error;
+ (id)mapKeysInDictionary:(id)dictionary fallableTransform:(id /* block */)transform error:(id *)error;
+ (id)mapKeysInDictionary:(id)dictionary transform:(id /* block */)transform error:(id *)error;
+ (id)mapKeysInDictionary:(id)dictionary keyMappings:(id)mappings error:(id *)error;
+ (BOOL)applyToEachKeyValuePairInDictionary:(id)dictionary apply:(id /* block */)apply error:(id *)error;
+ (void)applyToEachKeyValuePairInDictionary:(id)dictionary apply:(id /* block */)apply;
+ (id)filterKeyValuePairsInDictionary:(id)dictionary withKeyValuePredicate:(id /* block */)predicate;
+ (id)filterKeyValuePairsInDictionary:(id)dictionary keepingKeys:(id)keys;
+ (id)filterKeyValuePairsInDictionary:(id)dictionary removingKeys:(id)keys;
+ (id)filterToArrayFromCollection:(id)collection predicate:(id /* block */)predicate;
+ (id)filterToSetFromCollection:(id)collection predicate:(id /* block */)predicate;
+ (id)filterToArrayFromCollection:(id)collection removingObjects:(id)objects;
+ (id)filterToSetFromCollection:(id)collection removingObjects:(id)objects;
+ (id)reduceCollection:(id)collection from:(id)from reducer:(id /* block */)reducer error:(id *)error;
+ (id)reduceCollection:(id)collection from:(id)from reducer:(id /* block */)reducer;
+ (BOOL)anyInCollection:(id)collection satisfyPredicate:(id /* block */)predicate;
+ (BOOL)allInCollection:(id)collection satisfyPredicate:(id /* block */)predicate;
+ (id)firstInCollection:(id)collection satisfyingPredicate:(id /* block */)predicate;
+ (id)uniqueMatchInCollection:(id)collection satisfyingPredicate:(id /* block */)predicate;
+ (id)mapToSetArrayFromCollection:(id)collection transform:(id /* block */)transform error:(id *)error;
+ (id)mapToSetArrayFromCollection:(id)collection transform:(id /* block */)transform;
+ (id)mapToArrayFromCollection:(id)collection transform:(id /* block */)transform error:(id *)error;
+ (id)mapToArrayFromCollection:(id)collection transform:(id /* block */)transform;
+ (id)mapToSetFromCollection:(id)collection transform:(id /* block */)transform error:(id *)error;
+ (id)mapToSetFromCollection:(id)collection transform:(id /* block */)transform;
+ (BOOL)applyToEachInCollection:(id)collection apply:(id /* block */)apply error:(id *)error;
+ (void)applyToEachInCollection:(id)collection apply:(id /* block */)apply;
+ (id)mapcatToArrayFromCollection:(id)collection transform:(id /* block */)transform error:(id *)error;
+ (id)mapcatToArrayFromCollection:(id)collection transform:(id /* block */)transform;
+ (id)mapcatToSetFromCollection:(id)collection transform:(id /* block */)transform error:(id *)error;
+ (id)mapcatToSetFromCollection:(id)collection transform:(id /* block */)transform;
+ (id)mapcatToDictionaryFromCollection:(id)collection fallableTransform:(id /* block */)transform error:(id *)error;
+ (id)mapcatToDictionaryFromCollection:(id)collection transform:(id /* block */)transform error:(id *)error;
+ (id)toSetArrayConcatenateCollections:(id)collections;
+ (id)toArrayConcatenateCollections:(id)collections;
+ (id)toSetConcatenateCollections:(id)collections;
+ (id)concatenateDictionaries:(id)dictionaries error:(id *)error;
+ (id)zipToArrayFromFirstCollection:(id)collection secondCollection:(id)collection zip:(id /* block */)zip error:(id *)error;
+ (id)zipToArrayFromFirstCollection:(id)collection secondCollection:(id)collection zip:(id /* block */)zip;
+ (id)zipValuesFromFirstDictionary:(id)dictionary secondDictionary:(id)dictionary keyedZip:(id /* block */)zip error:(id *)error;
+ (id)zipValuesFromFirstDictionary:(id)dictionary secondDictionary:(id)dictionary zip:(id /* block */)zip error:(id *)error;
+ (id)zipValuesFromFirstDictionary:(id)dictionary secondDictionary:(id)dictionary keyedZip:(id /* block */)zip;
+ (id)zipValuesFromFirstDictionary:(id)dictionary secondDictionary:(id)dictionary zip:(id /* block */)zip;
+ (id)groupIntoArraysFromCollection:(id)collection usingKeyGenerator:(id /* block */)generator;
+ (id)reverseDictionary:(id)dictionary error:(id *)error;
+ (id /* block */)iteratorForCollection:(id)collection;
+ (id)maxInCollection:(id)collection compare:(id /* block */)compare;
+ (id)maxNumberInCollection:(id)collection;
+ (id)optionalObjectAtIndexNumber:(id)number inArray:(id)array error:(id *)error;
+ (id)requiredObjectAtIndexNumber:(id)number inArray:(id)array error:(id *)error;
+ (id)objectsFromArray:(id)array atIndices:(id)indices error:(id *)error;
+ (id)partitionToArraysFromCollection:(id)collection memberCountPerPartition:(unsigned long long)partition;
+ (id)partitionToArraysFromCollection:(id)collection memberCountPerPartition:(unsigned long long)partition error:(id *)error;
+ (id)setArrayFromCollection:(id)collection;
+ (id)arrayFromCollection:(id)collection;
+ (id)setFromCollection:(id)collection;
+ (BOOL)checkSetEqualityBetweenCollection:(id)collection expected:(id)expected;
+ (BOOL)validateSetEqualityBetweenCollection:(id)collection expected:(id)expected error:(id *)error;
+ (id)shapeCollection:(id)collection shape:(id)shape error:(id *)error;
+ (long long)comparisonResultFromInt32:(int)int32;
+ (id)lastItemsFromArraysInCollection:(id)collection;
+ (id)toArrayKeepAllButLastInCollection:(id)collection;
+ (id)toArrayKeepAllButFirstInCollection:(id)collection;
+ (id)zipPairsToArrayInCollection:(id)collection zip:(id /* block */)zip;
+ (id)generateArrayWithRangeFrom:(long long)from step:(long long)step count:(long long)count;

/* instance methods */
- (id)init;
@end

#endif /* SNCollectionUtils_h */
