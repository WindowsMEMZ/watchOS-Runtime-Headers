//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef JSManagedValue_h
#define JSManagedValue_h
@import Foundation;

#include "JSValue.h"

@protocol {JSWeakValue="m_tag"i"m_value"(WeakValueUnion="primitive"{JSValue="u"(EncodedValueDescriptor="asInt64"q"ptr"^{JSCell}"asBits"{?="payload"i"tag"i})}"object"{Weak<JSC::JSObject>="m_impl"^{WeakImpl}}"string"{Weak<JSC::JSString>="m_impl"^{WeakImpl}})}, {RefPtr<JSC::JSLock, WTF::RawPtrTraits<JSC::JSLock>, WTF::DefaultRefDerefTraits<JSC::JSLock>>="m_ptr"^{JSLock}}, {RetainPtr<NSMapTable>="m_ptr"^v}, {Weak<JSC::JSGlobalObject>="m_impl"^{WeakImpl}};

@interface JSManagedValue : NSObject {
  /* instance variables */
  struct Weak<JSC::JSGlobalObject> { struct WeakImpl *m_impl; } m_globalObject;
  struct RefPtr<JSC::JSLock, WTF::RawPtrTraits<JSC::JSLock>, WTF::DefaultRefDerefTraits<JSC::JSLock>> { struct JSLock *m_ptr; } m_lock;
  struct JSWeakValue { int m_tag; union WeakValueUnion { struct JSValue { union EncodedValueDescriptor { long long asInt64; struct JSCell *ptr; struct { int payload; int tag; } asBits; } u; } primitive; struct Weak<JSC::JSObject> { struct WeakImpl *m_impl; } object; struct Weak<JSC::JSString> { struct WeakImpl *m_impl; } string; } m_value; } m_weakValue;
  struct RetainPtr<NSMapTable> { void *m_ptr; } m_owners;
}

@property (readonly) JSValue *value;

/* class methods */
+ (id)managedValueWithValue:(id)value;
+ (id)managedValueWithValue:(id)value andOwner:(id)owner;

/* instance methods */
- (id)init;
- (id)initWithValue:(id)value;
- (void)dealloc;
- (void)didAddOwner:(id)owner;
- (void)didRemoveOwner:(id)owner;
- (void)disconnectValue;
@end

#endif /* JSManagedValue_h */
