//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef JSVirtualMachine_h
#define JSVirtualMachine_h
@import Foundation;

@protocol {Lock="m_byte"{Atomic<unsigned char>="value"{atomic<unsigned char>="__a_"{__cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>>="__a_value"AC}}}}, {RetainPtr<NSMapTable>="m_ptr"^v};

@interface JSVirtualMachine : NSObject {
  /* instance variables */
  struct OpaqueJSContextGroup * m_group;
  struct Lock { struct Atomic<unsigned char> { struct atomic<unsigned char> { struct __cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>> { atomic  __a_value; unsigned char x0; } __a_; } value; } m_byte; } m_externalDataMutex;
  struct RetainPtr<NSMapTable> { void *m_ptr; } m_contextCache;
  struct RetainPtr<NSMapTable> { void *m_ptr; } m_externalObjectGraph;
  struct RetainPtr<NSMapTable> { void *m_ptr; } m_externalRememberedSet;
}

@property (readonly) struct OpaqueJSContextGroup * JSContextGroupRef;

/* class methods */
+ (id)virtualMachineWithContextGroupRef:(struct OpaqueJSContextGroup *)ref;
+ (unsigned long long)setNumberOfDFGCompilerThreads:(unsigned long long)threads;
+ (unsigned long long)setNumberOfFTLCompilerThreads:(unsigned long long)threads;
+ (void)setCrashOnVMCreation:(BOOL)vmcreation;

/* instance methods */
- (id)contextForGlobalContextRef:(struct OpaqueJSContext *)ref;
- (void)addContext:(id)context forGlobalContextRef:(struct OpaqueJSContext *)ref;
- (void *)externalDataMutex;
- (id)externalObjectGraph;
- (id)externalRememberedSet;
- (void)shrinkFootprintWhenIdle;
- (BOOL)isWebThreadAware;
- (id)init;
- (id)initWithContextGroupRef:(struct OpaqueJSContextGroup *)ref;
- (void)dealloc;
- (BOOL)isOldExternalObject:(id)object;
- (void)addExternalRememberedObject:(id)object;
- (void)addManagedReference:(id)reference withOwner:(id)owner;
- (void)removeManagedReference:(id)reference withOwner:(id)owner;
@end

#endif /* JSVirtualMachine_h */
