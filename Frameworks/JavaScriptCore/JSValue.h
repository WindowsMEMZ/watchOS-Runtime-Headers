//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef JSValue_h
#define JSValue_h
@import Foundation;

#include "JSContext.h"

@interface JSValue : NSObject {
  /* instance variables */
  struct OpaqueJSValue * m_value;
}

@property (readonly) JSContext *context;
@property (readonly) BOOL isUndefined;
@property (readonly) BOOL isNull;
@property (readonly) BOOL isBoolean;
@property (readonly) BOOL isNumber;
@property (readonly) BOOL isString;
@property (readonly) BOOL isObject;
@property (readonly) BOOL isArray;
@property (readonly) BOOL isDate;
@property (readonly) BOOL isSymbol;

/* class methods */
+ (id)valueWithJSValueRef:(struct OpaqueJSValue *)ref inContext:(id)context;
+ (SEL)selectorForStructToValue:(const char *)value;
+ (SEL)selectorForValueToStruct:(const char *)struct;
+ (id)valueWithPoint:(struct CGPoint { double x0; double x1; })point inContext:(id)context;
+ (id)valueWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range inContext:(id)context;
+ (id)valueWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect inContext:(id)context;
+ (id)valueWithSize:(struct CGSize { double x0; double x1; })size inContext:(id)context;
+ (id)valueWithObject:(id)object inContext:(id)context;
+ (id)valueWithBool:(BOOL)bool inContext:(id)context;
+ (id)valueWithDouble:(double)double inContext:(id)context;
+ (id)valueWithInt32:(int)int32 inContext:(id)context;
+ (id)valueWithUInt32:(unsigned int)uint32 inContext:(id)context;
+ (id)valueWithNewObjectInContext:(id)context;
+ (id)valueWithNewArrayInContext:(id)context;
+ (id)valueWithNewRegularExpressionFromPattern:(id)pattern flags:(id)flags inContext:(id)context;
+ (id)valueWithNewErrorFromMessage:(id)message inContext:(id)context;
+ (id)valueWithNullInContext:(id)context;
+ (id)valueWithUndefinedInContext:(id)context;
+ (id)valueWithNewSymbolFromDescription:(id)description inContext:(id)context;
+ (id)valueWithNewPromiseInContext:(id)context fromExecutor:(id /* block */)executor;
+ (id)valueWithNewPromiseResolvedWithResult:(id)result inContext:(id)context;
+ (id)valueWithNewPromiseRejectedWithReason:(id)reason inContext:(id)context;

/* instance methods */
- (id)init;
- (id)initWithValue:(struct OpaqueJSValue *)value inContext:(id)context;
- (id)objectForKeyedSubscript:(id)subscript;
- (id)objectAtIndexedSubscript:(unsigned long long)subscript;
- (void)setObject:(id)object forKeyedSubscript:(id)subscript;
- (void)setObject:(id)object atIndexedSubscript:(unsigned long long)subscript;
- (struct CGPoint { double x0; double x1; })toPoint;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })toRange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })toRect;
- (struct CGSize { double x0; double x1; })toSize;
- (void)dealloc;
- (id)description;
- (struct OpaqueJSValue *)JSValueRef;
- (id)toObject;
- (id)toObjectOfClass:(Class)class;
- (BOOL)toBool;
- (double)toDouble;
- (int)toInt32;
- (unsigned int)toUInt32;
- (id)toNumber;
- (id)toString;
- (id)toDate;
- (id)toArray;
- (id)toDictionary;
- (id)valueForProperty:(id)property;
- (void)setValue:(id)value forProperty:(id)property;
- (BOOL)deleteProperty:(id)property;
- (BOOL)hasProperty:(id)property;
- (void)defineProperty:(id)property descriptor:(id)descriptor;
- (id)valueAtIndex:(unsigned long long)index;
- (void)setValue:(id)value atIndex:(unsigned long long)index;
- (BOOL)isEqualToObject:(id)object;
- (BOOL)isEqualWithTypeCoercionToObject:(id)object;
- (BOOL)isInstanceOf:(id)of;
- (id)callWithArguments:(id)arguments;
- (id)constructWithArguments:(id)arguments;
- (id)invokeMethod:(id)method withArguments:(id)arguments;
@end

#endif /* JSValue_h */
