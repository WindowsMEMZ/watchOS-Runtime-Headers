//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1870.2.1.0.0
//
#ifndef EKEventStore_h
#define EKEventStore_h
@import Foundation;

#include "EKAlarm.h"
#include "EKAuthStatusChecker-Protocol.h"
#include "EKCalendar.h"
#include "EKDaemonConnection.h"
#include "EKDaemonConnectionDelegate-Protocol.h"
#include "EKDataProtectionObserver.h"
#include "EKImageCache.h"
#include "EKReminderStore.h"
#include "EKSequenceToken.h"
#include "EKSourceConstraints.h"

@class CADDatabaseInitializationOptions, CADGenerationStampedObjectID, CADInMemoryChangeTimestamp, CalAccumulatingQueue, NSArray, NSCache, NSDictionary, NSHashTable, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSSet, NSString, NSTimeZone;
@protocol OS_dispatch_queue;

@interface EKEventStore : NSObject<EKDaemonConnectionDelegate> {
  /* instance variables */
  CADDatabaseInitializationOptions *_initializationOptions;
  CADGenerationStampedObjectID *_birthdaySourceID;
  NSMutableDictionary *_defaultCalendarsForNewEventsIDBySourceID;
  CADGenerationStampedObjectID *_suggestedEventCalendarID;
  CADGenerationStampedObjectID *_naturalLanguageSuggestedEventCalendarID;
  CADGenerationStampedObjectID *_subscribedCalendarsSourceID;
  NSMutableDictionary *_calendarsByIdentifier;
  NSMutableDictionary *_cachedValidatedAddresses;
  NSHashTable *_eventsNeedsGeocoding;
  NSMutableDictionary *_lastCommitTempToPermanentObjectIDMap;
  NSMutableDictionary *_rebaseTempObjectIDReverseMap;
  NSMutableArray *_databaseWaitCallbacks;
  NSMutableArray *_databaseWaitTimestamps;
  BOOL _allowsBirthdayCalendarModifications;
  NSNumber *_showDeclinedEventsNumber;
  NSObject<EKAuthStatusChecker> *_authStatusChecker;
  unsigned long long _options;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _flagsLock;
  struct { unsigned int x :1 restoreGenerationChanged; } _flags;
  NSObject<OS_dispatch_queue> *_asynchronousSearchQueue;
  CalAccumulatingQueue *_notificationAccumulatingQueue;
  double _defaultDelayForThrottledNotifications;
  unsigned long long _lastFiredEventStoreChangedNotificationTime;
  unsigned long long _lastFiredNonSyncOnlyEventStoreChangedNotificationTime;
  NSCache *_deletedEventUniqueIdentifiersCache;
  EKSequenceToken *_lastSequenceToken;
}

@property (retain, nonatomic) NSHashTable *insertedObjects;
@property (retain, nonatomic) NSMutableSet *deletedObjects;
@property (retain, nonatomic) NSMutableSet *updatedObjects;
@property (retain, nonatomic) NSMutableSet *objectsPendingSave;
@property (retain, nonatomic) EKDaemonConnection *database;
@property (retain, nonatomic) CADInMemoryChangeTimestamp *lastDatabaseNotificationTimestamp;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *calendarSourcesAndDefaultsQueue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *registeredQueue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *unsavedChangesQueue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *dbChangedQueue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *constraintsCacheQueue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *notificationCollectionCacheQueue;
@property (retain, nonatomic) EKDataProtectionObserver *dataProtectionObserver;
@property (retain, nonatomic) EKSourceConstraints *_cachedDefaultConstraints;
@property (retain, nonatomic) NSMutableDictionary *_cachedConstraints;
@property (retain, nonatomic) NSMutableDictionary *_cachedNotificationCollections;
@property (retain, nonatomic) NSMutableDictionary *registeredObjects;
@property (readonly, nonatomic) NSSet *deletedObjectIDsPendingCommit;
@property (readonly, nonatomic) EKImageCache *imageCache;
@property (readonly, nonatomic) EKReminderStore *reminderStore;
@property (retain, nonatomic) NSDictionary *reminderSourceIDToEventSourceIDMapping;
@property (retain, nonatomic) NSDictionary *eventSourceIDToReminderSourceIDMapping;
@property (readonly, nonatomic) struct os_unfair_lock_s { unsigned int x0; } * reminderSourceMapLock;
@property (retain, nonatomic) EKCalendar *defaultCalendarForNewEvents;
@property (readonly, nonatomic) NSArray *inboxRepliedSectionItems;
@property (readonly, nonatomic) BOOL inboxRepliedSectionHasContent;
@property (readonly, nonatomic) EKCalendar *suggestedEventCalendar;
@property (readonly, nonatomic) EKCalendar *naturalLanguageSuggestedEventCalendar;
@property (readonly, nonatomic) EKCalendar *defaultCalendarForNewReminders;
@property (readonly, nonatomic) BOOL automaticLocationGeocodingAllowed;
@property (readonly, nonatomic) unsigned long long lastConfirmedSplashScreenVersion;
@property (readonly, nonatomic) BOOL allowsBirthdayModifications;
@property (copy, nonatomic) NSTimeZone *timeZone;
@property (readonly, copy, nonatomic) NSString *databasePath;
@property (readonly, nonatomic) EKAlarm *defaultTimedAlarm;
@property (readonly, nonatomic) EKAlarm *defaultAllDayAlarm;
@property (readonly, nonatomic) NSNumber *defaultTimedAlarmOffset;
@property (readonly, nonatomic) NSNumber *defaultAllDayAlarmOffset;
@property (readonly, nonatomic) NSNumber *siriSuggestionsTimedAlarmOffset;
@property (readonly, nonatomic) NSNumber *siriSuggestionsAllDayAlarmOffset;
@property (readonly, nonatomic) BOOL isDataProtected;
@property (nonatomic) BOOL showDeclinedEvents;
@property (nonatomic) BOOL birthdayCalendarEnabled;
@property (nonatomic) int birthdayCalendarVersion;
@property (readonly, nonatomic) BOOL clientCanModifySources;
@property (readonly, nonatomic) NSArray *objectsPendingCommit;
@property (readonly) EKDaemonConnection *connection;
@property (readonly, nonatomic) NSArray *eventNotifications;
@property (readonly, nonatomic) unsigned long long eventNotificationCount;
@property (nonatomic) BOOL skipModificationValidation;
@property (readonly, nonatomic) NSString *eventStoreIdentifier;
@property (readonly, nonatomic) NSArray *delegateSources;
@property (readonly, nonatomic) NSArray *sources;
@property (readonly, nonatomic) NSArray *calendars;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (Class)classForEntityName:(id)name;
+ (id /* block */)reminderStoreContainerTokenProvider;
+ (void)setReminderStoreContainerTokenProvider:(id /* block */)provider;
+ (int)calDatabaseInitOptionsFromEKEventStoreInitOptions:(unsigned long long)options;
+ (unsigned long long)ekEventStoreInitOptionsFromCalDatabaseInitOptions:(int)options;
+ (long long)authorizationStatusForEntityType:(unsigned long long)type;
+ (BOOL)_staticAccessFlagSaysDeniedForEntityType:(unsigned long long)type;
+ (long long)realAuthorizationStatusForEntityType:(unsigned long long)type;
+ (long long)authorizationStatusWithAuditToken:(struct { unsigned int x0[8] })token entityType:(unsigned long long)type;
+ (void)setDenyAccessToEvents:(BOOL)events;
+ (void)setDenyAccessToReminders:(BOOL)reminders;
+ (id)eventStoreChangedDistributedNotificationName;
+ (void)EKObjectIDsFromData:(id)data deletedObjectIDOffsets:(id)idoffsets outChangedIDs:(id *)ids outDeletedIDs:(id *)ids;
+ (id)_contextForNotificationWithChangeType:(unsigned long long)type changedObjectIDs:(id)ids;
+ (double)_defaultDelayForThrottledNotificationsWithInitializationOptions:(id)options;
+ (double)_throttleDelayForEventStoreChangedNotificationWithLastFiredTime:(unsigned long long)time delay:(double)delay;
+ (BOOL)_shouldRefreshSource:(id)source;
+ (void)_refreshFolderListForSource:(id)source isUserRequested:(BOOL)requested;
+ (id)_filteredObjectsWithIdentifiers:(id)identifiers fromObjects:(id)objects;
+ (id)_filteredArrayWithIdentifiers:(id)identifiers fromObjects:(id)objects;
+ (id)_iMIPScheduledEvent:(id)event;
+ (BOOL)_isConfirmedSuggestedEvent:(id)event uniqueKey:(id *)key;
+ (void)_addDaysSpannedByEvent:(id)event toCountedSet:(id)set inRange:(id)range withNSCalendar:(id)nscalendar;
+ (id)calendarObjectIDsForPredicate:(id)predicate;
+ (void)setPredicatePropertyLoadMode:(unsigned long long)mode;
+ (unsigned long long)predicatePropertyLoadMode;

/* instance methods */
- (void)initializeEKEventStorePlusReminders;
- (id)combinedReminderAndEventSources;
- (id)_combineEventSources:(id)sources withReminderSources:(id)sources;
- (void)_rebuildSourceMapsWithEventSources:(id)sources reminderSources:(id)sources;
- (id)combineEventCalendars:(id)calendars withReminderCalendars:(id)calendars;
- (id)eventSourceForReminderSource:(id)source;
- (id)eventSourceIDForReminderSourceID:(id)id;
- (id)reminderSourceForEventSource:(id)source;
- (void)getMapsWithReminderSourceMap:(id *)map eventSourceMap:(id *)map;
- (id)reminderSourceMap;
- (id)eventSourceMap;
- (void)invalidateReminderSourceMaps;
- (void)performHoldingReminderSourceMapLock:(id /* block */)lock;
- (BOOL)restoreGenerationChanged;
- (void)setRestoreGenerationChanged:(BOOL)changed;
- (BOOL)setRestoreGenerationChangedAndGetPreviousValue:(BOOL)value;
- (id)init;
- (id)initWithEKOptions:(unsigned long long)ekoptions path:(id)path sources:(id)sources;
- (id)initWithSources:(id)sources;
- (id)initWithBirthdayCalendarModifications;
- (id)initWithOptions:(int)options path:(id)path;
- (id)initWithOptions:(int)options path:(id)path allowDelegateSources:(BOOL)sources;
- (id)initWithEKOptions:(unsigned long long)ekoptions path:(id)path changeTrackingClientId:(id)id enablePropertyModificationLogging:(BOOL)logging allowDelegateSources:(BOOL)sources;
- (id)initWithEKOptions:(unsigned long long)ekoptions path:(id)path changeTrackingClientId:(id)id enablePropertyModificationLogging:(BOOL)logging allowDelegateSources:(BOOL)sources allowedSourceIdentifiers:(id)identifiers;
- (id)initWithEKOptions:(unsigned long long)ekoptions path:(id)path conainerProvider:(id)provider changeTrackingClientId:(id)id enablePropertyModificationLogging:(BOOL)logging allowDelegateSources:(BOOL)sources allowedSourceIdentifiers:(id)identifiers;
- (id)initWithEKOptions:(unsigned long long)ekoptions;
- (id)initWithOptions:(int)options path:(id)path changeTrackingClientId:(id)id enablePropertyModificationLogging:(BOOL)logging allowDelegateSources:(BOOL)sources;
- (void)dealloc;
- (void)_implicitlyRequestEventAccessForOlderApps;
- (void)requestAccessToEntityType:(unsigned long long)type completion:(id /* block */)completion;
- (void)requestFullAccessToEventsWithCompletion:(id /* block */)completion;
- (void)requestWriteOnlyAccessToEventsWithCompletion:(id /* block */)completion;
- (void)requestFullAccessToRemindersWithCompletion:(id /* block */)completion;
- (void)requestAccessToEntityType:(unsigned long long)type desiredFullAccess:(BOOL)access testing:(BOOL)testing synchronous:(BOOL)synchronous reason:(long long)reason completion:(id /* block */)completion;
- (void)_accessStatusChanged;
- (BOOL)canModifyCalendarDatabase;
- (BOOL)allowDelegateSources;
- (void)setSourceAccountManagement:(int)management;
- (void)setSourceAccountManagement:(int)management withBundleID:(id)id;
- (void)setRemoteClientIdentity:(id)identity;
- (void)_setIsUnitTesting:(BOOL)testing;
- (BOOL)_isUnitTesting;
- (void)setPrivacyClientIdentity:(id)identity;
- (void)_simulateDaemonCrashForUnitTests;
- (void)_setMockPermissions:(id)permissions;
- (int)sequenceNumber;
- (id)sequenceToken;
- (void)changesSinceSequenceToken:(id)token completion:(id /* block */)completion;
- (id)_invalidCADObjectIDs:(id)ids;
- (void)reminderStoreChanged;
- (void)handleExternalDatabaseChangeNotification:(id)notification;
- (void)_handleExternalDatabaseChangedNotificationAsynchronously:(id)asynchronously;
- (void)_handleExternalDatabaseChangeNotification:(id)notification synchronously:(BOOL)synchronously;
- (void)_databaseChangedExternally:(unsigned long long)externally processSynchronously:(BOOL)synchronously;
- (void)_processExternalChangesWithLatestTimestamp:(id)timestamp changedObjectIDsData:(id)data deletedObjectIDOffsets:(id)idoffsets changesWereSyncStatusOnly:(BOOL)only forceImmediateNotification:(BOOL)notification;
- (void)_cacheDeletedEventIdentifierIfNeededForObject:(id)object;
- (void)_postEventStoreChangedNotificationWithChangeType:(unsigned long long)type changedObjectIDs:(id)ids forceImmediate:(BOOL)immediate;
- (void)_postEventStoreChangedNotificationWithTags:(id)tags context:(id)context;
- (void)_updateDefaultDelayForThrottleEventStoreChangedNotifications;
- (double)_throttleDelayForEventStoreChangedNotificationWithTags:(id)tags context:(id)context;
- (void)_defaultCalendarChangedExternally;
- (void)_defaultAlarmChangedExternally;
- (void)daemonRestarted;
- (void)databaseRestoreGenerationChangedExternally:(int)externally;
- (id)_sourceWithID:(id)id;
- (void)_cacheSourceWithCADObjectID:(id)id withDefaultLoadedPropertyValues:(id)values forKeys:(id)keys;
- (void)_loadSourcesIfNeeded;
- (id)sourcesEnabledForEntityType:(unsigned long long)type;
- (id)eventSources;
- (id)reminderSources;
- (id)_deletableSources;
- (id)getSubscribedCalendarsSourceCreateIfNeededWithError:(id *)error;
- (id)localBirthdayCalendarCreateIfNeededWithError:(id *)error;
- (id)delegateSourcesForSource:(id)source;
- (id)parentSourceForDelegateSource:(id)source;
- (void)fetchGrantedDelegatesForSource:(id)source results:(id /* block */)results;
- (void)updateGrantedDelegate:(id)delegate action:(long long)action source:(id)source completion:(id /* block */)completion;
- (void)addExchangeDelegateWithName:(id)name emailAddress:(id)address toSource:(id)source completion:(id /* block */)completion;
- (void)removeExchangeDelegate:(id)delegate completion:(id /* block */)completion;
- (id)_localSourceWithEnableIfNeeded:(BOOL)needed;
- (id)localSource;
- (id)localSourceEnableIfNeeded;
- (id)localBirthdayCalendarSource;
- (id)sourceWithIdentifier:(id)identifier;
- (id)sourceWithExternalID:(id)id;
- (BOOL)saveSource:(id)source commit:(BOOL)commit error:(id *)error;
- (BOOL)removeSource:(id)source commit:(BOOL)commit error:(id *)error;
- (void)_clearCachedSources;
- (BOOL)isSourceManaged:(id)managed;
- (id)dbStatsBySource;
- (BOOL)hideCalendarsFromNotificationCenter:(id)center error:(id *)error;
- (id)calendarsForEntityType:(unsigned long long)type;
- (id)calendarsForEntityType:(unsigned long long)type inSource:(id)source;
- (void)_cacheCalendarWithCADObjectID:(id)id withDefaultLoadedPropertyValues:(id)values forKeys:(id)keys;
- (void)_loadCalendarsIfNeeded;
- (id)_allCalendars;
- (id)_deletableCalendars;
- (BOOL)_calendar:(id)_calendar supportsEntityType:(unsigned long long)type;
- (int)readWriteCalendarCountForEntityType:(unsigned long long)type;
- (id)readWriteCalendarsForEntityType:(unsigned long long)type;
- (id)calendarWithID:(id)id;
- (id)calendarWithCADID:(id)cadid;
- (void)_addObjectToPendingCommits:(id)commits;
- (BOOL)saveCalendar:(id)calendar error:(id *)error;
- (BOOL)removeCalendar:(id)calendar error:(id *)error;
- (BOOL)saveCalendar:(id)calendar commit:(BOOL)commit error:(id *)error;
- (BOOL)_saveCalendar:(id)calendar commit:(BOOL)commit error:(id *)error;
- (BOOL)_saveCalendar:(id)calendar error:(id *)error;
- (BOOL)removeCalendar:(id)calendar commit:(BOOL)commit error:(id *)error;
- (BOOL)_removeCalendar:(id)calendar commit:(BOOL)commit error:(id *)error;
- (BOOL)_removeEventCalendar:(id)calendar commit:(BOOL)commit error:(id *)error;
- (BOOL)deleteCalendar:(id)calendar forEntityType:(unsigned long long)type error:(id *)error;
- (BOOL)eventsExistOnCalendar:(id)calendar;
- (BOOL)futureScheduledEventsExistOnCalendar:(id)calendar;
- (BOOL)eventsMarkedScheduleAgentClientExistOnCalendar:(id)calendar;
- (id)eventsWithIdentifiers:(id)identifiers;
- (id)eventWithRecurrenceIdentifier:(id)identifier;
- (id)eventWithIdentifier:(id)identifier;
- (id)validatedNonDeletedPersistentObjectWithObjectID:(id)id;
- (id)validatedNonDeletedPublicObjectWithObjectID:(id)id;
- (id)eventWithUniqueIdentifier:(id)identifier;
- (id)_eventWithEventIdentifier:(id)identifier;
- (BOOL)_parseURI:(id)uri expectedScheme:(id)scheme identifier:(id *)identifier options:(id *)options;
- (id)eventWithExternalURI:(id)uri;
- (id)_eventWithURI:(id)uri checkValid:(BOOL)valid;
- (id)_eventOccurrenceWithURI:(id)uri;
- (id)eventForUID:(id)uid occurrenceDate:(id)date;
- (id)eventForUID:(id)uid occurrenceDate:(id)date checkValid:(BOOL)valid;
- (id)eventForObjectID:(id)id occurrenceDate:(id)date;
- (id)eventForObjectID:(id)id occurrenceDate:(id)date checkValid:(BOOL)valid;
- (id)eventWithUniqueId:(id)id;
- (id)eventWithUniqueId:(id)id occurrenceDate:(id)date;
- (id)eventWithUUID:(id)uuid occurrenceDate:(id)date;
- (id)_entityWrappersForEventUUIDs:(id)uuids inCalendars:(id)calendars propertiesToLoad:(id)load;
- (BOOL)eventWithUUID:(id)uuid isInCalendars:(id)calendars;
- (id)eventsWithUUIDToOccurrenceDateMap:(id)map inCalendars:(id)calendars;
- (id)allEventsWithUniqueId:(id)id occurrenceDate:(id)date;
- (id)_apiExpectedEventForEvent:(id)event;
- (id)_apiExpectedEventsForEvents:(id)events;
- (BOOL)saveEvent:(id)event span:(long long)span error:(id *)error;
- (BOOL)removeEvent:(id)event span:(long long)span error:(id *)error;
- (BOOL)saveEvent:(id)event span:(long long)span commit:(BOOL)commit error:(id *)error;
- (BOOL)_saveEvent:(id)event span:(long long)span commit:(BOOL)commit error:(id *)error;
- (BOOL)removeEvent:(id)event span:(long long)span commit:(BOOL)commit error:(id *)error;
- (BOOL)_removeEvent:(id)event span:(long long)span commit:(BOOL)commit error:(id *)error;
- (BOOL)setInvitationStatus:(unsigned long long)status forEvent:(id)event error:(id *)error;
- (BOOL)setInvitationStatus:(unsigned long long)status forEvents:(id)events error:(id *)error;
- (id)creatorTeamIdentifierForEvent:(id)event;
- (BOOL)isCurrentProcessCreatorOfEvent:(id)event;
- (id)importICS:(id)ics intoCalendar:(id)calendar options:(unsigned long long)options;
- (id)importICSData:(id)icsdata intoCalendars:(id)calendars options:(unsigned long long)options;
- (id)importEventsWithExternalIDs:(id)ids fromICSData:(id)icsdata intoCalendars:(id)calendars options:(unsigned long long)options batchSize:(int)size;
- (id)_importEventsWithExternalIDs:(id)ids fromICSData:(id)icsdata intoCalendarsWithIDs:(id)ids options:(unsigned long long)options batchSize:(int)size;
- (id)importICSData:(id)icsdata intoCalendar:(id)calendar options:(unsigned long long)options;
- (id)ICSDataForCalendarItems:(id)items options:(unsigned long long)options;
- (id)ICSDataForCalendarItems:(id)items preventLineFolding:(BOOL)folding;
- (id)importVCSData:(id)vcsdata intoCalendars:(id)calendars error:(id *)error;
- (struct CGColor *)copyCGColorForNewCalendar;
- (id)colorStringForNewCalendar;
- (id)defaultLocalCalendar;
- (id)acquireDefaultCalendarForNewEvents;
- (id)defaultCalendarForNewEventsInDelegateSource:(id)source;
- (void)setDefaultCalendar:(id)calendar forNewEventsInDelegateSource:(id)source;
- (id)acquireDefaultCalendarForNewReminders;
- (void)_clearCachedCalendars;
- (void)_removeCachedCalendarFromSource:(id)source;
- (void)_removeCachedCalendarWithCADID:(id)cadid;
- (BOOL)saveDraftOfEvent:(id)event;
- (BOOL)_saveDraftOfEvent:(id)event toDirectory:(id)directory;
- (BOOL)_saveDraftOfEvent:(id)event toDirectory:(id)directory withVersion:(id)version;
- (id)loadDraftOfEventWithOccurrenceID:(id)id;
- (id)_loadDraftOfEventWithOccurrenceID:(id)id fromDirectory:(id)directory;
- (id)_loadDraftOfEventWithOccurrenceID:(id)id fromDirectory:(id)directory withVersion:(id)version;
- (void)deleteDraftOfEventWithOccurrenceID:(id)id;
- (void)_deleteDraftOfEventWithOccurrenceID:(id)id fromDirectory:(id)directory;
- (void)_deleteDraft:(id)draft;
- (id)_draftPathForEventWithOccurrenceID:(id)id draftDirectory:(id)directory;
- (BOOL)saveReminder:(id)reminder error:(id *)error;
- (BOOL)saveReminder:(id)reminder commit:(BOOL)commit error:(id *)error;
- (BOOL)_saveReminder:(id)reminder commit:(BOOL)commit error:(id *)error;
- (BOOL)removeReminder:(id)reminder error:(id *)error;
- (BOOL)removeReminder:(id)reminder commit:(BOOL)commit error:(id *)error;
- (BOOL)_removeReminder:(id)reminder commit:(BOOL)commit error:(id *)error;
- (id)reminderWithExternalURI:(id)uri;
- (id)reminderWithUniqueId:(id)id;
- (id)calendarItemsWithUniqueIdentifier:(id)identifier inCalendar:(id)calendar;
- (id)reminderWithIdentifier:(id)identifier;
- (id)calendarItemWithIdentifier:(id)identifier;
- (id)_calendarItemsWithExternalIdentifier:(id)identifier inCalendars:(id)calendars entityTypes:(unsigned long long)types;
- (id)calendarItemsWithExternalIdentifier:(id)identifier;
- (id)calendarItemsWithExternalIdentifier:(id)identifier inCalendars:(id)calendars;
- (id)eventsWithExternalIdentifier:(id)identifier inCalendars:(id)calendars;
- (id)remindersWithExternalIdentifier:(id)identifier inCalendars:(id)calendars;
- (id)_calendarItemsMatchingPredicate:(id)predicate;
- (id)remindersMatchingPredicate:(id)predicate;
- (id)fetchRemindersMatchingPredicate:(id)predicate completion:(id /* block */)completion;
- (id)predicateForRemindersInCalendars:(id)calendars;
- (id)predicateForCalendarStoreForRemindersInCalendars:(id)calendars;
- (id)predicateForRemindersInCalendars:(id)calendars preloadProperties:(id)properties;
- (id)predicateForIncompleteRemindersWithDueDateStarting:(id)starting ending:(id)ending calendars:(id)calendars;
- (id)predicateForCompletedRemindersWithCompletionDateStarting:(id)starting ending:(id)ending calendars:(id)calendars;
- (BOOL)ignoreExternalChanges;
- (BOOL)enableSourceSyncStatusChanges;
- (BOOL)allowAccessToEventsOnly;
- (BOOL)accessGrantedForEntityType:(unsigned long long)type;
- (int)eventAccessLevel;
- (BOOL)returnEventResults;
- (BOOL)returnReminderResults;
- (BOOL)shouldSaveCalendarAsEventCalendar:(id)calendar;
- (BOOL)shouldSaveCalendarAsReminderCalendar:(id)calendar;
- (id)eventWithUUID:(id)uuid;
- (id)closestCachedOccurrenceToDate:(double)date forEventObjectID:(id)id;
- (id)closestCachedOccurrenceToDate:(double)date forEventObjectID:(id)id prefersForwardSearch:(BOOL)search;
- (int)countOfEventsFromStartDate:(id)date toEndDate:(id)date;
- (id)doEvents:(id)events haveOccurrencesAfterDate:(id)date;
- (id)calendarWithUniqueID:(id)id;
- (id)calendarWithExternalID:(id)id;
- (void)_populateCalendarsByIdentifierIfNeeded;
- (id)_eventCalendarWithIdentifier:(id)identifier;
- (id)calendarWithIdentifier:(id)identifier;
- (id)calendarsWithIdentifiers:(id)identifiers;
- (id)calendarsWithObjectIDs:(id)ids;
- (id)calendarWithExternalURI:(id)uri;
- (id)uniqueIdentifiersForEventsWithObjectIDs:(id)ids;
- (id)uniqueIdentifiersForAllObjectsWithChangesRelatedToObjects:(id)objects;
- (int)syncErrorCount;
- (id)eventsWithErrorsPerSourceID;
- (id)_imageCache;
- (void)_uncacheImage:(id)image;
- (void)_clearImageCache;
- (id)occurrenceCacheGetOccurrencesForCalendars:(id)calendars onDay:(id)day;
- (id)occurrenceCacheGetOccurrenceCountsForCalendars:(id)calendars;
- (void)showDeclinedEventsChanged:(id)changed;
- (void)rebuildOccurrenceCache;
- (void)insertSuggestedEventCalendar;
- (void)removeSuggestedEventCalendar;
- (void)confirmSuggestedEvent:(id)event;
- (void)acceptSuggestedEvent:(id)event;
- (void)acceptSuggestedEvent:(id)event placeOnCalendar:(id)calendar;
- (void)deleteSuggestedEvent:(id)event;
- (Class)_SGSuggestionsServiceClass;
- (BOOL)canModifySuggestedEventCalendar;
- (BOOL)saveNotification:(id)notification commit:(BOOL)commit error:(id *)error;
- (BOOL)saveNotificationCollection:(id)collection commit:(BOOL)commit error:(id *)error;
- (id)sharedCalendarInvitationsForEntityTypes:(unsigned long long)types;
- (void)respondToSharedCalendarInvitation:(id)invitation withStatus:(unsigned long long)status;
- (id)resourceChangesForEntityTypes:(unsigned long long)types;
- (BOOL)markResourceChangeAlertedAndSave:(id)save error:(id *)error;
- (BOOL)removeResourceChange:(id)change error:(id *)error;
- (BOOL)removeResourceChanges:(id)changes error:(id *)error;
- (BOOL)removeResourceChangesForCalendarItem:(id)item error:(id *)error;
- (id)eventNotificationsAfterDate:(id)date;
- (id)eventNotificationsExcludingUncheckedCalendars:(BOOL)calendars filteredByShowsNotificationsFlag:(BOOL)flag earliestExpiringNotification:(id *)notification;
- (id)eventNotificationsAfterDate:(id)date filteredByShowsNotificationsFlag:(BOOL)flag earliestExpiringNotification:(id *)notification;
- (id)eventNotificationsAfterDate:(id)date excludingUncheckedCalendars:(BOOL)calendars filteredByShowsNotificationsFlag:(BOOL)flag earliestExpiringNotification:(id *)notification;
- (unsigned long long)eventNotificationCountExpanded:(BOOL)expanded;
- (unsigned long long)eventNotificationCountExcludingUncheckedCalendars:(BOOL)calendars expanded:(BOOL)expanded;
- (unsigned long long)eventNotificationCountForSource:(id)source excludingDelegateSources:(BOOL)sources filteredByShowsNotificationsFlag:(BOOL)flag excludeObjectIDs:(id)ids;
- (unsigned long long)eventNotificationCountForSource:(id)source excludingDelegateSources:(BOOL)sources filteredByShowsNotificationsFlag:(BOOL)flag excludeObjectIDs:(id)ids expanded:(BOOL)expanded;
- (BOOL)acknowledgeNotifications:(id)notifications error:(id *)error;
- (BOOL)removeInviteReplyNotification:(id)notification error:(id *)error;
- (BOOL)removeInviteReplyNotifications:(id)notifications error:(id *)error;
- (id)attachmentWithUUID:(id)uuid;
- (BOOL)saveAttachment:(id)attachment commit:(BOOL)commit error:(id *)error;
- (BOOL)_refreshDASource:(id)dasource isUserRequested:(BOOL)requested;
- (id)refreshSourcesIfNecessary:(BOOL)necessary;
- (void)refreshSourcesIfNecessary;
- (BOOL)refreshSource:(id)source userRequested:(BOOL)requested;
- (id)refreshFolderListsIfNecessary:(BOOL)necessary;
- (id)refreshEverythingIfNecessary:(BOOL)necessary;
- (void)_registerObjectImmediate:(id)immediate;
- (void)_registerObject:(id)object;
- (void)_unregisterObject:(id)object;
- (void)_detachObject:(id)object;
- (void)_reregisterObject:(id)object oldID:(id)id;
- (void)_forgetRegisteredObjects;
- (BOOL)_isRegisteredObject:(id)object;
- (id)persistentObjectWithEntityName:(id)name;
- (id)insertedPersistentObjectWithEntityName:(id)name;
- (id)_addFetchedObjectWithID:(id)id;
- (id)registerFetchedObjectWithID:(id)id;
- (id)registerFetchedObjectWithID:(id)id withDefaultLoadedPropertyKeys:(id)keys values:(id)values;
- (BOOL)objectWithIDExists:(id)idexists;
- (id)objectWithObjectID:(id)id;
- (id)publicObjectWithPersistentObject:(id)object;
- (id)publicObjectWithObjectID:(id)id;
- (id)publicObjectWithFetchedObjectID:(id)id;
- (void)_trackModifiedObject:(id)object;
- (void)_objectDidReset:(id)reset;
- (void)_insertObject:(id)object;
- (BOOL)isObjectInserted:(id)inserted;
- (void)_deleteObject:(id)object;
- (void)rollback;
- (void)rollbackObjectsWithIdentifiers:(id)identifiers;
- (void)_clearAllCaches;
- (void)reset;
- (BOOL)save:(id *)save;
- (BOOL)commit:(id *)commit;
- (BOOL)_commit:(id *)_commit;
- (BOOL)commitWithRollback:(id *)rollback;
- (BOOL)commitWithRollbackForNewClients:(id *)clients;
- (BOOL)commitObjects:(id)objects error:(id *)error;
- (BOOL)objectsHaveChangesToCommit:(id)commit;
- (void)_clearPendingChangesForObjectsWithOwner:(id)owner;
- (BOOL)_commitObjectsWithIdentifiers:(id)identifiers error:(id *)error;
- (id)_markObjectsWithIdentifiersAsCommitted:(id)committed;
- (void)_clearEventsNeedingGeocodingWithCommittedObjects:(id)objects;
- (void)_fetchAndClearEventsNeedingGeocoding:(id *)geocoding withCommittedObjects:(id)objects;
- (void)ensureLoadedProperties:(id)properties forObjects:(id)objects;
- (void)_fetchProperties:(id)properties forObjects:(id)objects;
- (id)redactedMimicSaveEvent:(id)event oldToNewObjectIDMap:(id)idmap serializedDictionary:(id)dictionary objectIDToChangeSetDictionaryMap:(id)map objectIDToPersistentDictionaryMap:(id)map;
- (void)_resetAndApplyChangesForRedactedMimicCommitOnObject:(id)object usingModifiedObject:(id)object;
- (id)mimicSaveAndCommitEvent:(id)event oldToNewObjectIDMap:(id)idmap insertedObjectIDs:(id)ids updatedObjectIDs:(id)ids deletedObjectIDs:(id)ids;
- (void)_mimicCommitWithOldToNewObjectIDMap:(id)idmap insertedObjectsToCommit:(id)commit updatedObjectsToCommit:(id)commit deletedObjectsToCommit:(id)commit;
- (void)_resetForMimicCommitOnObject:(id)object oldToNewObjectIDMap:(id)idmap;
- (id)insertedObjectIDs;
- (id)updatedObjectIDs;
- (id)deletedObjectIDs;
- (id)lastCommitTempToPermanentObjectIDMap;
- (void)waitUntilDatabaseUpdatedToTimestamp:(id)timestamp callback:(id /* block */)callback;
- (id)lastDatabaseTimestampForOOPToWaitOn;
- (void)recordObjectRebaseWithOldObjectID:(id)id newObjectID:(id)id;
- (void)startRecordingObjectIDChangeMap;
- (void)stopRecordingObjectIDChangeMap;
- (BOOL)shouldRecordObjectIDMap;
- (void)_validateEventPredicate:(id)predicate;
- (void)_implicitUpgradeToFullAccessIfNeededWithReason:(long long)reason;
- (id)eventsMatchingPredicate:(id)predicate;
- (id)eventObjectIDsMatchingPredicate:(id)predicate;
- (void)enumerateEventsMatchingPredicate:(id)predicate usingBlock:(id /* block */)block;
- (id)fetchEventsMatchingPredicate:(id)predicate resultHandler:(id /* block */)handler;
- (id)objectsMatchingPredicate:(id)predicate;
- (void)fetchEventCountsInRange:(id)range inCalendars:(id)calendars exclusionOptions:(long long)options completion:(id /* block */)completion;
- (void)cancelFetchRequest:(id)request;
- (id)nextEventWithCalendarIdentifiers:(id)identifiers exclusionOptions:(long long)options;
- (id)nextEventWithCalendars:(id)calendars exclusionOptions:(long long)options;
- (id)nextEventsWithCalendars:(id)calendars limit:(unsigned long long)limit exclusionOptions:(long long)options;
- (id)_nextEventsWithFetchBlock:(id /* block */)block steps:(id)steps limit:(unsigned long long)limit;
- (id)alarmWithUUID:(id)uuid;
- (id)alarmWithExternalID:(id)id;
- (void)alarmOccurrencesBetweenStartDate:(id)date endDate:(id)date inCalendars:(id)calendars completion:(id /* block */)completion;
- (id)predicateForEventsWithStartDate:(id)date endDate:(id)date calendars:(id)calendars;
- (id)predicateForEventsWithStartDate:(id)date endDate:(id)date uniqueID:(id)id calendars:(id)calendars;
- (id)predicateForEventsWithStartDate:(id)date endDate:(id)date calendars:(id)calendars loadDefaultProperties:(BOOL)properties;
- (id)predicateForEventsWithStartDate:(id)date endDate:(id)date calendars:(id)calendars prefetchHint:(long long)hint exclusionOptions:(long long)options;
- (id)predicateForEventsWithStartDate:(id)date endDate:(id)date calendars:(id)calendars exclusionOptions:(long long)options filterdOutTitles:(id)titles randomize:(BOOL)randomize limit:(long long)limit;
- (id)predicateForAssistantEventSearchWithTimeZone:(id)zone startDate:(id)date endDate:(id)date title:(id)title location:(id)location notes:(id)notes participants:(id)participants calendars:(id)calendars limit:(long long)limit;
- (id)predicateForNotifiableEvents;
- (id)predicateForNotificationCenterVisibleEvents;
- (id)predicateForUnacknowledgedEvents;
- (id)predicateForUnalertedEvents;
- (id)predicateForUpcomingEventsWithLimit:(int)limit;
- (id)predicateForMasterEventsInCalendars:(id)calendars;
- (id)predicateForScheduleAgentClientEventsInCalendar:(id)calendar;
- (BOOL)hasImmediatelyEligibleTravelEvents;
- (id)travelEligibleEventsInCalendars:(id)calendars startDate:(id)date endDate:(id)date;
- (id)predicateForPotentialTravelEventsInCalendars:(id)calendars startDate:(id)date endDate:(id)date;
- (id)predicateForUpNextEventsInCalendars:(id)calendars startDate:(id)date endDate:(id)date startDateRestrictionThreshold:(double)threshold;
- (id)predicateForNaturalLanguageSuggestedEventsWithSearchString:(id)string;
- (id)predicateForNaturalLanguageSuggestedEventsWithSearchString:(id)string startDate:(id)date;
- (id)predicateForEventsCreatedFromSuggestion;
- (id)predicateForEventCreatedFromSuggestionWithOpaqueKey:(id)key;
- (id)predicateForEventsCreatedFromSuggestionWithExtractionGroupIdentifier:(id)identifier;
- (id)predicateForEventsWithStartDate:(id)date endDate:(id)date calendars:(id)calendars matchingContacts:(id)contacts;
- (id)predicateForCalendarItemsOfType:(unsigned long long)type inCalendar:(id)calendar;
- (id)predicateForMasterEventsWithExternalTrackingStatusInCalendar:(id)calendar;
- (id)predicateForCalendarItemsOfType:(unsigned long long)type withUniqueIdentifier:(id)identifier inCalendar:(id)calendar;
- (id)predicateForCalendarItemsOfType:(unsigned long long)type withUniqueIdentifier:(id)identifier inSource:(id)source;
- (id)predicateForCalendarItemsOfType:(unsigned long long)type withExternalID:(id)id inCalendar:(id)calendar;
- (id)predicateForCalendarItemsOfType:(unsigned long long)type withExternalID:(id)id inSource:(id)source;
- (id)predicateForEventsWithAttendeesInCalendar:(id)calendar;
- (id)predicateForMasterEventsWithStartDate:(id)date title:(id)title inCalendar:(id)calendar;
- (id)predicateForMasterEventsInCalendar:(id)calendar;
- (id)predicateForRandomMasterEventsWithStartDate:(id)date endDate:(id)date needToHaveAttendee:(BOOL)attendee needToHaveLocation:(BOOL)location allDay:(BOOL)day filteredOutTitles:(id)titles limit:(long long)limit calendars:(id)calendars;
- (id)predicateForEventsInSubscribedCalendar:(id)calendar;
- (id)predicateForMasterEventsWithOccurrencesWithStartDate:(id)date endDate:(id)date inCalendar:(id)calendar;
- (id)predicateForMasterEventsWithInvitationsAndOccurrencesAfter:(id)after inCalendar:(id)calendar;
- (id)predicateForNonrecurringEventsWithStartDate:(id)date endDate:(id)date calendars:(id)calendars;
- (unsigned long long)timeToLeaveLocationAuthorizationStatus;
- (id)predicateForEventsWithConferenceURL:(id)url limit:(long long)limit;
- (long long)registerForDetailedChangeTracking:(id *)tracking;
- (long long)registerForDetailedChangeTrackingInSource:(id)source error:(id *)error;
- (BOOL)unregisterForDetailedChangeTracking:(id *)tracking;
- (void)fetchChangedObjectIDsSinceToken:(long long)token resultHandler:(id /* block */)handler;
- (void)changedObjectIDsSinceToken:(long long)token resultHandler:(id /* block */)handler;
- (void)fetchChangedObjectIDs:(id /* block */)ids;
- (void)_processChangedObjectIDsWithErrorCode:(int)code changesTruncated:(BOOL)truncated latestToken:(id)token changeData:(id)data resultHandler:(id /* block */)handler;
- (void)markChangedObjectIDsConsumedUpToToken:(long long)token;
- (void)consumeAllChangesUpToToken:(id)token;
- (BOOL)consumeAllChangesUpToToken:(id)token except:(id)except error:(id *)error;
- (BOOL)markIndividualChangesConsumed:(id)consumed error:(id *)error;
- (void)recordSequenceTokenForLegacyClients:(id)clients;
- (void)clearSuperfluousChanges;
- (void)setCachedDefaultAlarmOffsetsToNSNotFound;
- (void)purgeChangelog;
- (void)cacheValidationStatusForAddress:(id)address status:(unsigned long long)status;
- (unsigned long long)addressValidationStatus:(id)status;
- (BOOL)occurrencesExistInRangeForEvent:(id)event startDate:(id)date endDate:(id)date mustStartInInterval:(BOOL)interval timezone:(id)timezone;
- (id)cachedConstraintsForSource:(id)source;
- (id)cachedConstraintsForCalendar:(id)calendar;
- (id)cachedConstraintsForReminder:(id)reminder;
- (id)cachedConstraintsForEvent:(id)event;
- (id)cachedConstraintsForEventOrSourceWithCADObjectID:(id)id;
- (void)_clearCachedConstraintsForObjectWithCADObjectID:(id)id;
- (void)_clearAllCachedConstraints;
- (void)cacheConstraints:(id)constraints forObjectWithCADObjectID:(id)id;
- (id)_fetchConstraintsForObjectWithCADObjectID:(id)id;
- (id)sourceIdentifierForEvent:(id)event;
- (id)notificationCollectionForSource:(id)source;
- (id)_fetchPersistentNotificationCollectionForSourceWithCADObjectID:(id)id;
- (BOOL)needsGeocodingForEvent:(id)event;
- (void)setNeedsGeocoding:(BOOL)geocoding forEvent:(id)event;
- (BOOL)shouldPermitOrganizerEmailFromJunkChecks:(id)checks;
- (BOOL)shouldPermitOrganizerPhoneNumberFromJunkChecks:(id)checks;
- (id)fetchStorageUsage;
- (void)analyticsSendEvent:(id)event appendingClientBundleIDToPayload:(id)payload;
- (void)setCachedEKSourceConstraintObject:(id)object forKey:(id)key;
- (void)postSyntheticRouteHypothesis:(id)hypothesis forEventWithExternalURL:(id)url;
- (id)beginCalDAVServerSimulationWithHostname:(id)hostname;
- (void)endCalDAVServerSimulation:(id)simulation;
- (BOOL)backupDatabaseToDestination:(id)destination withFormat:(unsigned long long)format error:(id *)error;
- (void)_resetAndNotifyAfterDatabaseRestoreGenerationChanged;
- (BOOL)restoreDatabaseFromBackup:(id)backup withFormat:(unsigned long long)format error:(id *)error;
- (id)predicateForPreloadedIncompleteRemindersWithDueDate:(id)date calendars:(id)calendars sortOrder:(int)order preloadProperties:(id)properties;
- (id)predicateForPreloadedIncompleteRemindersWithDueDate:(id)date calendars:(id)calendars sortOrder:(int)order preloadProperties:(id)properties maxResults:(unsigned long long)results;
- (id)predicateForPreloadedCompletedRemindersWithDueDate:(id)date calendars:(id)calendars sortOrder:(int)order preloadProperties:(id)properties;
- (id)reminderObjectIDsMatchingPredicate:(id)predicate;
- (id)predicateForIncompleteRemindersAndRemindersCompletedAfter:(id)after inCalendar:(id)calendar;
- (id)predicateForRemindersWithTitle:(id)title listTitle:(id)title limitToCompletedOrIncomplete:(BOOL)incomplete completed:(BOOL)completed dueAfter:(id)after dueBefore:(id)before searchTerm:(id)term sortOrder:(int)order maxResults:(unsigned long long)results;
@end

#endif /* EKEventStore_h */
