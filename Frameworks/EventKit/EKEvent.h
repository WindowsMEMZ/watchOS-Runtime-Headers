//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1870.2.1.0.0
//
#ifndef EKEvent_h
#define EKEvent_h
@import Foundation;

#include "EKCalendarItem.h"
#include "CalDateRangeProtocol-Protocol.h"
#include "EKEventStore.h"
#include "EKImage.h"
#include "EKJunkInvitationProtocol_Private-Protocol.h"
#include "EKParticipant.h"
#include "EKRecurrenceIdentifier.h"
#include "EKStructuredLocation.h"
#include "EKSuggestedEventInfo.h"
#include "EKVirtualConference.h"

@class EKCalendarDate, NSArray, NSDate, NSMutableArray, NSNumber, NSSet, NSString, NSURL;

@interface EKEvent : EKCalendarItem<EKJunkInvitationProtocol_Private, CalDateRangeProtocol> {
  /* instance variables */
  EKStructuredLocation *_cachedLocationPrediction;
  NSDate *_cachedLocationPredictionExpirationDate;
  BOOL _locationPredictionFrozen;
  BOOL _locationPredictionAllowed;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _locationPredictionLock;
  NSMutableArray *_virtualConferenceURLsToInvalidateOnCommit;
}

@property (retain, nonatomic) NSArray *locations;
@property (readonly, nonatomic) NSArray *locationsWithoutPrediction;
@property (copy, nonatomic) EKCalendarDate *occurrenceStartDate;
@property (copy, nonatomic) EKCalendarDate *occurrenceEndDate;
@property (nonatomic) BOOL occurrenceIsAllDay;
@property (copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;
@property (copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;
@property (copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;
@property (nonatomic) BOOL requiresDetachDueToSnoozedAlarm;
@property (nonatomic) int clearModifiedFlags;
@property (retain, nonatomic) NSDate *endDateUnadjustedForLegacyClients;
@property (readonly, nonatomic) EKRecurrenceIdentifier *recurrenceIdentifier;
@property (readonly, nonatomic) NSDate *recurrenceDate;
@property (readonly, nonatomic) NSString *eventOccurrenceID;
@property (nonatomic) long long privacyLevel;
@property (readonly, nonatomic) BOOL locationIsAConferenceRoom;
@property (readonly, nonatomic) double duration;
@property (nonatomic) double travelTime;
@property (readonly, nonatomic) NSDate *startDateIncludingTravel;
@property (readonly, nonatomic) BOOL isStartDateDirty;
@property (readonly, nonatomic) BOOL isEndDateDirty;
@property (readonly, nonatomic) BOOL allowsTravelTimeModifications;
@property (readonly, nonatomic) BOOL allowsAllDayModifications;
@property (retain, @dynamic, nonatomic) EKStructuredLocation *travelStartLocation;
@property (retain, @dynamic, nonatomic) EKStructuredLocation *endLocation;
@property (readonly, nonatomic) BOOL automaticLocationGeocodingAllowed;
@property (nonatomic) BOOL needsGeocoding;
@property (nonatomic) long long travelAdvisoryBehavior;
@property (readonly, nonatomic) BOOL travelAdvisoryBehaviorIsEffectivelyEnabled;
@property (readonly, nonatomic) BOOL eligibleForTravelAdvisories;
@property (readonly, nonatomic) BOOL potentiallyEligibleForTravelAdvisories;
@property (retain, nonatomic) EKSuggestedEventInfo *suggestionInfo;
@property (readonly, nonatomic) NSString *locationWithoutPrediction;
@property (readonly, nonatomic) EKStructuredLocation *preferredLocationWithoutPrediction;
@property (retain, nonatomic) NSDate *proposedStartDate;
@property (readonly, nonatomic) NSDate *proposedEndDate;
@property (readonly, nonatomic) BOOL allowsProposedTimeModifications;
@property (readonly, nonatomic) BOOL allowsResponseCommentModifications;
@property (nonatomic) BOOL isPhantom;
@property (@dynamic, nonatomic) unsigned long long cachedJunkStatus;
@property (readonly, nonatomic) BOOL isSignificantlyDetached;
@property (readonly, nonatomic) BOOL isSignificantlyDetachedIgnoringParticipation;
@property (retain, nonatomic) EKImage *image;
@property (nonatomic) BOOL completed;
@property (readonly, nonatomic) NSString *birthdayContactName;
@property (readonly, nonatomic) BOOL hasComplexRecurrence;
@property (readonly, nonatomic) NSDate *originalStartDate;
@property (readonly, @dynamic, nonatomic) NSString *UUID;
@property (retain, nonatomic) NSURL *conferenceURL;
@property (nonatomic) BOOL preventConferenceURLDetection;
@property (readonly, nonatomic) NSURL *externalURL;
@property (readonly, nonatomic) NSString *showEventURLString;
@property (readonly, nonatomic) BOOL isEditable;
@property (readonly, nonatomic) BOOL isPrivateEventSharedToMe;
@property (readonly, nonatomic) NSURL *launchURL;
@property (nonatomic) long long participationStatus;
@property (readonly, nonatomic) long long pendingParticipationStatus;
@property (readonly, nonatomic) BOOL allowsParticipationStatusModifications;
@property (readonly, nonatomic) long long currentUserGeneralizedParticipantRole;
@property (readonly, nonatomic) BOOL currentUserInvitedAttendee;
@property (readonly, nonatomic) BOOL allowsAvailabilityModifications;
@property (readonly, nonatomic) BOOL allowsPrivacyLevelModifications;
@property (retain, nonatomic) NSDate *participationStatusModifiedDate;
@property (readonly, nonatomic) BOOL supportsParticipationStatusModificationsWithoutNotification;
@property (nonatomic) long long status;
@property (nonatomic) unsigned long long invitationStatus;
@property (nonatomic) BOOL isAlerted;
@property (nonatomic) BOOL dateChanged;
@property (nonatomic) BOOL timeChanged;
@property (nonatomic) BOOL titleChanged;
@property (nonatomic) BOOL locationChanged;
@property (nonatomic) BOOL videoConferenceChanged;
@property (nonatomic) BOOL recurrenceChanged;
@property (nonatomic) BOOL attendeeComment;
@property (nonatomic) BOOL attendeeStatus;
@property (nonatomic) BOOL attendeeProposedStartDate;
@property (nonatomic) BOOL attendeeDeclinedStartDate;
@property (@dynamic, nonatomic) BOOL attendeeReplyChanged;
@property (nonatomic) int externalTrackingStatus;
@property (readonly, copy, nonatomic) NSDate *initialStartDate;
@property (readonly, copy, nonatomic) NSDate *initialEndDate;
@property (readonly, @dynamic, nonatomic) BOOL isMaster;
@property (readonly, nonatomic) BOOL isMasterOrDetachedOccurrence;
@property (readonly, nonatomic) BOOL isStatusDirty;
@property (readonly, nonatomic) BOOL isAllDayDirty;
@property (readonly, nonatomic) EKCalendarDate *startCalendarDateIncludingTravelTime;
@property (readonly, nonatomic) double durationIncludingTravel;
@property (readonly, nonatomic) long long travelRoutingMode;
@property (readonly, nonatomic) BOOL canBeRespondedTo;
@property (readonly, nonatomic) BOOL canDetachSingleOccurrence;
@property (readonly, nonatomic) BOOL hasAttachmentChanges;
@property (readonly, nonatomic) EKCalendarDate *startCalendarDate;
@property (readonly, nonatomic) EKCalendarDate *endCalendarDate;
@property (nonatomic) long long locationPredictionState;
@property (readonly, nonatomic) BOOL hasPredictedLocation;
@property (nonatomic) BOOL firedTTL;
@property (readonly, nonatomic) BOOL responseMustApplyToAll;
@property (nonatomic) unsigned long long junkStatus;
@property (nonatomic) int flags;
@property (copy, nonatomic) NSSet *actions;
@property (readonly, nonatomic) BOOL isMainOccurrence;
@property (readonly, nonatomic) BOOL privacySet;
@property (copy, nonatomic) NSString *recurrenceSet;
@property (retain, nonatomic) EKVirtualConference *virtualConference;
@property (retain, nonatomic) NSString *virtualConferenceTextRepresentation;
@property (nonatomic) long long specialDayType;
@property (readonly, nonatomic) BOOL isUndetached;
@property (readonly, nonatomic) NSString *eventIdentifier;
@property (nonatomic) BOOL allDay;
@property (copy, nonatomic) NSDate *startDate;
@property (copy, nonatomic) NSDate *endDate;
@property (copy, @dynamic, nonatomic) EKStructuredLocation *structuredLocation;
@property (readonly, @dynamic, nonatomic) EKParticipant *organizer;
@property (nonatomic) long long availability;
@property (readonly, nonatomic) BOOL isDetached;
@property (readonly, nonatomic) NSDate *occurrenceDate;
@property (readonly, nonatomic) NSString *birthdayContactIdentifier;
@property (readonly, nonatomic) long long birthdayPersonID;
@property (readonly, nonatomic) NSString *birthdayPersonUniqueID;
@property (readonly, nonatomic) NSString *sendersEmail;
@property (readonly, nonatomic) NSString *sendersPhoneNumber;
@property (readonly, nonatomic) BOOL supportsJunkReporting;
@property (readonly, nonatomic) EKEventStore *eventStore;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)EKObjectChangeSummarizer_singleValueDiffKeys;
+ (id)EKObjectChangeSummarizer_multiValueDiffKeys;
+ (id)_locationStringForLocations:(id)locations;
+ (Class)frozenClass;
+ (id)knownRelationshipSingleValueKeys;
+ (id)knownRelationshipMultiValueKeys;
+ (id)knownKeysToSkipForFutureChanges;
+ (id)knownKeysToUseForFutureChanges;
+ (id)knownSingleValueKeysForComparison;
+ (id)eventWithEventStore:(id)store;
+ (id)externalUriScheme;
+ (id)_modifiedNotificationUserInfoWithIdentifier:(id)identifier forRevert:(BOOL)revert;
+ (long long)_eventAvailabilityForParticipantStatus:(long long)status supportedEventAvailabilities:(unsigned long long)availabilities isAllDayEvent:(BOOL)event;
+ (id)_updatedPredictedLocationRespectingTimeoutBudgetForEvent:(id)event error:(id *)error;
+ (id)_basicChangesRequiringSpanAll;
+ (id)_relatedCachedTimeKeys;
+ (BOOL)isMultiDayTimedEventWithStartDate:(id)date endDate:(id)date allDay:(BOOL)day inCalendar:(id)calendar;
+ (BOOL)_allowSlicingFromDetachedOccurrence;
+ (long long)_coercedEventAvailabilityForDesiredAvailability:(long long)availability supportedAvailabilities:(unsigned long long)availabilities;
+ (BOOL)_notDetachedOccurrenceOfEvent:(id)event existsInDateRangeWithStartDate:(id)date endDate:(id)date inTimeZone:(id)zone;
+ (BOOL)_validateSpanForRemove:(long long)remove error:(id *)error;
+ (void)_detachOrSliceEvent:(id)event withSpan:(long long)span savingEvent:(id)event withOriginalStartDate:(id)date newStartDate:(id)date;
+ (id)generateUniqueIDWithEvent:(id)event originalEvent:(id)event calendar:(id)calendar;
+ (id)knownRequireRSVPKeys;
+ (id)knownPerUserPropertyKeys;
+ (BOOL)_calendarsAreSharedToMeInSameSourceAndHaveSameOwner:(id)owner;
+ (id)eventFromICSEvent:(id)icsevent inStore:(id)store;
+ (long long)ekWeekDayFromVCSWeekDay:(unsigned long long)day;

/* instance methods */
- (void)setIsJunk:(BOOL)junk shouldSave:(BOOL)save;
- (BOOL)_couldBeJunkCommon;
- (void)setNotesCommon:(id)common;
- (void)setURLCommon:(id)urlcommon;
- (void)parsedConference:(id *)conference andNotes:(id *)notes;
- (void)clearParsedConference;
- (BOOL)conferenceURLForDisplayCached;
- (id)conferenceURLForDisplay;
- (void)clearDetectedConferenceURL;
- (id)conferenceURLDetected;
- (id)conferenceURLDetectedString;
- (BOOL)_detectedConferenceURLOnBackingObjectMayBeInvalid;
- (id)_detectConferenceURL;
- (id)_prioritizedConferencesSources;
- (id)init;
- (id)initWithEventStore:(id)store;
- (id)initWithPersistentObject:(id)object;
- (id)initWithPersistentObject:(id)object objectForCopy:(id)copy;
- (id)initWithPersistentObject:(id)object occurrenceDate:(id)date;
- (id)_calculateDurationWithStart:(id)start end:(id)end allDay:(BOOL)day;
- (unsigned long long)entityType;
- (id)specificIdentifier;
- (void)_invalidateRecurrenceIdentifier;
- (id)externalURI;
- (BOOL)isEqual:(id)equal;
- (void)postModifiedNotification;
- (void)postModifiedNotificationWithUserInfo:(id)info;
- (id)constraints;
- (id)committedValueForKey:(id)key;
- (void)setTitle:(id)title;
- (id)title;
- (BOOL)phantomMaster;
- (void)setPhantomMaster:(BOOL)master;
- (BOOL)_isAllDay;
- (BOOL)isAllDay;
- (void)updateDefaultAlarms;
- (void)_updateRecurrenceEndDatesWithAdjustmentMode:(unsigned long long)mode;
- (id)startDateRaw;
- (void)setStartDateRaw:(id)raw;
- (id)_committedStartDate;
- (id)_committedEndDate;
- (void)overrideStartDate:(id)date;
- (void)overrideEndDate:(id)date;
- (id)_pinDate:(id)date withPinMode:(unsigned long long)mode;
- (id)adjustedPersistedDateForDate:(id)date withAdjustmentMode:(unsigned long long)mode pinMode:(unsigned long long)mode clientCalendarDate:(id *)date;
- (id)adjustedPersistedDateForDate:(id)date persistedDateIsInUTC:(BOOL)utc withAdjustmentMode:(unsigned long long)mode pinMode:(unsigned long long)mode clientCalendarDate:(id *)date;
- (void)_updateStartDateForDate:(id)date withAdjustmentMode:(unsigned long long)mode;
- (void)_updateStartDateForDate:(id)date withAdjustmentMode:(unsigned long long)mode adjustEndDate:(BOOL)date;
- (void)_setStartDate:(id)date andClearProposedTimes:(BOOL)times allowSettingIfNotEditable:(BOOL)editable;
- (id)endDateRaw;
- (void)setEndDateRaw:(id)raw;
- (void)_setEndDateUnadjustedForLegacyClients:(id)clients allowSettingIfNotEditable:(BOOL)editable;
- (void)_updateEndDateForDate:(id)date withAdjustmentMode:(unsigned long long)mode;
- (void)_updateEndDateForDate:(id)date withAdjustmentMode:(unsigned long long)mode adjustStartDate:(BOOL)date;
- (void)forceSetTimeZone:(id)zone;
- (void)setTimeZone:(id)zone;
- (BOOL)_settingTimeZoneChangesStartEndDates;
- (id)effectiveTimeZone;
- (BOOL)isFloating;
- (long long)selfParticipantStatus;
- (BOOL)_isParticipationStatusDirty;
- (BOOL)_isOnlyChangeToAttendeesSelfAttendeeParticipationStatus;
- (BOOL)_userAddressesRepresentInvitedAttendee:(id)attendee checkEmailAddresses:(BOOL)addresses;
- (BOOL)isCurrentUserInvitedAttendee;
- (BOOL)currentUserMayActAsOrganizer;
- (void)markEventAsAttendeeForward;
- (long long)_parentParticipationStatus;
- (id)birthdayID;
- (void)setBirthdayContact:(id)contact;
- (BOOL)isBirthday;
- (void)setLunarCalendarString:(id)string;
- (id)lunarCalendarString;
- (id)recurrenceRule;
- (void)setRecurrenceRule:(id)rule;
- (void)makeRecurrenceEndDateBased;
- (id)_occurrenceDatesForCount:(unsigned long long)count;
- (id)_lastRecurrenceDate;
- (id)_adjustDateIfFloatingForDate:(id)date;
- (void)makeRecurrenceEndCountBased;
- (id)startDateForRecurrence;
- (BOOL)futureOccurrencesCannotBeAffectedByChangingStartDateToDate:(id)date;
- (id)responseComment;
- (void)setResponseComment:(id)comment;
- (id)_defaultAlarmOffset;
- (BOOL)shouldHaveDefaultAlarms;
- (id)defaultAlarm;
- (id)defaultAlarms;
- (id)_originallyCommittedVirtualConference;
- (void)invalidateVirtualConferenceURLIfNeededOnCommit:(id)commit;
- (void)clearVirtualConferenceURLsQueuedForInvalidation;
- (void)invalidateRemovedVirtualConferences;
- (id)_buildConferenceStringFromNotesWithoutConference:(id)conference serializedConference:(id)conference;
- (id)specialDayString;
- (void)setSpecialDayString:(id)string;
- (void)removeServerRefreshRelatedProperties;
- (BOOL)flag:(int)flag;
- (void)setFlag:(int)flag value:(BOOL)value;
- (void)clearInvitationStatus;
- (void)addEventAction:(id)action;
- (void)removeEventAction:(id)action;
- (void)_setInvitationStatusAlertedIfNecessary;
- (void)_setInvitationStatusUnalertedIfNecessary;
- (BOOL)_shouldAlertInviteeDeclines;
- (id)_travelTimeInternalDescription;
- (BOOL)isProposedTimeEvent;
- (BOOL)allowsAttendeesModifications;
- (void)setPrivacyLevelWithoutVerifyingPrivacyModificationsAllowed:(long long)allowed;
- (BOOL)_invitationChangedPropertyForFlag:(unsigned int)flag;
- (unsigned int)invitationChangedProperties;
- (void)setInvitationChangedProperties:(unsigned int)properties;
- (void)_setInvitationChangedProperty:(BOOL)property forFlag:(unsigned int)flag;
- (BOOL)canForward;
- (BOOL)serverSupportedProposeNewTime;
- (BOOL)disallowProposeNewTime;
- (BOOL)supportsAddingAttachments;
- (void)setNotes:(id)notes;
- (id)displayNotes;
- (void)setDisplayNotes:(id)notes;
- (void)setURL:(id)url;
- (id)URL;
- (void)setStructuredLocation:(id)location preserveConferenceRooms:(BOOL)rooms;
- (id)roomAttendees;
- (void)addConferenceRooms:(id)rooms;
- (void)removeConferenceRooms:(id)rooms;
- (id)_conferenceRoomDisplayStrings;
- (BOOL)_needsPredictedLocationCacheUpdateHoldingLock;
- (id)_updatePredictedLocationCacheIfNeededHoldingLock;
- (id)_firstNonConferenceRoomLocationTitle;
- (id)_updatePredictedLocationCacheIfNeeded;
- (void)_clearLocationPredictionCacheIfNotFrozenHoldingLock;
- (void)_clearLocationPredictionCacheIfNotFrozen;
- (void)confirmPredictedLocation:(id)location;
- (void)rejectPredictedLocation;
- (void)setPredictedLocationFrozen:(BOOL)frozen;
- (void)setLocationPredictionAllowed:(BOOL)allowed;
- (void)forceLocationPredictionUpdate;
- (id)conferenceURLString;
- (void)setConferenceURLString:(id)urlstring;
- (void)setCalendar:(id)calendar;
- (BOOL)isTentative;
- (long long)compareStartDateWithEvent:(id)event;
- (long long)compareStartDateIncludingTravelWithEvent:(id)event;
- (long long)compareOriginalStartDateWithEvent:(id)event;
- (BOOL)allowsRecurrenceModifications;
- (BOOL)allowsCalendarModifications;
- (BOOL)_changesRequireDetachOrSlice;
- (BOOL)requiresDetach;
- (BOOL)changingAllDayPropertyIsAllowed;
- (BOOL)hasChangesRequiringSpanAll;
- (BOOL)_hasOrHadRecurrenceRule;
- (BOOL)_hasBasicChangesRequiringSpanAll;
- (BOOL)_hasRecurrenceRuleChangeRequiringSpanAll;
- (BOOL)_eligibleForTravelAdvisoriesIncludePotential:(BOOL)potential;
- (BOOL)couldBeJunk;
- (void)clearCachedTimeValues;
- (id)startOfDayForStartDateInCalendar:(id)calendar;
- (id)startOfDayForEndDateInCalendar:(id)calendar;
- (long long)daysSpannedInCalendar:(id)calendar;
- (BOOL)isMultiDayTimedEventInCalendar:(id)calendar;
- (void)_clearOriginalDateFields;
- (id)snapshotCopyWithPropertyKeysToCopy:(id)copy propertyKeysToSkip:(id)skip;
- (id)previouslySavedCopy;
- (void)_resetInternalStateWithForce:(BOOL)force;
- (id)uniqueId;
- (BOOL)allowsAlarmModifications;
- (BOOL)_hasExternalIDOrDeliverySource;
- (BOOL)hasValidEventAction;
- (id)privacyDescription;
- (BOOL)refresh;
- (BOOL)refreshAndNotify:(BOOL)notify;
- (BOOL)validateOccurrenceDateStillMatchesRecurrenceRules;
- (void)snoozeAlarm:(id)alarm withTimeIntervalFromNow:(double)now;
- (void)snoozeAlarm:(id)alarm withTimeIntervalFromNow:(double)now pinsTriggerToStartDate:(BOOL)date;
- (void)snoozeAlarm:(id)alarm untilTargetDate:(id)date;
- (void)snoozeAlarm:(id)alarm untilTargetDate:(id)date pinsTriggerToStartDate:(BOOL)date;
- (void)_snoozeAlarm:(id)alarm withTimeIntervalFromNow:(double)now orTargetDate:(id)date pinsTriggerToStartDate:(BOOL)date;
- (BOOL)validate:(id *)validate;
- (BOOL)validateWithSpan:(long long)span error:(id *)error;
- (id)_generateNewUniqueID;
- (void)_willSave;
- (BOOL)saveWithSpan:(long long)span error:(id *)error;
- (BOOL)_needsAttendeePartStatReset;
- (void)_deleteErrorIfInvalid;
- (id)_eventKitPropertyKeyForCalendarItemErrorPropertyKey:(id)key;
- (void)_saveUndeletedDetachedOccurrence;
- (BOOL)_saveUndetachedOccurrenceWithError:(id *)error;
- (void)_extendConferenceURLExpirationDateToDate:(id)date;
- (void)_updateModifiedPropertiesForThisEventAndAllDetachments;
- (void)_updateVideoConferenceOnlyModified;
- (void)_updateModifiedProperties;
- (void)_propagateAlarmChangesToDetachedEvents:(id)events;
- (void)_propagateChangesToDetachedEvents:(id)events significantlyDetachedEvents:(id)events startDateOffset:(id)offset duration:(id)duration calendar:(id)calendar;
- (void)_updateSelfAttendeeToMatchSelfAttendee:(id)attendee;
- (void)_duplicateAddedAttachmentsToDetachedEvents:(id)events significantlyDetachedEvents:(id)events;
- (void)_updateUUIDForNewParticipants;
- (BOOL)_isSignificantlyDetachedComparedToMaster:(id)master shouldIgnorePartStat:(BOOL)stat;
- (id)_updateMasterDate:(id)date forChangeToOccurrenceDate:(id)date fromOriginalOccurrenceDate:(id)date;
- (void)_applyTimeChangesToMaster;
- (void)_clearExceptionDatesAndUpdateDetachedOriginalDates:(id)dates;
- (void)_filterExceptionDatesAndDetachments;
- (id)_leftoversInDates:(id)dates withGeneratedDates:(id)dates;
- (void)_adjustAlarmsAfterMovingOrCopyingFromCalendar:(id)calendar toCalendar:(id)calendar;
- (void)_removeInvalidAlarmsDuringSave;
- (void)_adjustRecurrenceRulesAfterMovingOrCopyingFromCalendar:(id)calendar toCalendar:(id)calendar notes:(id)notes;
- (void)_adjustAfterMovingOrCopyingFromOldCalendar:(id)calendar toNewCalendar:(id)calendar cachedConstraintsForOldCalendar:(id)calendar savingItem:(id)item;
- (void)_adjustExternalFieldsAfterMovingOrCopyingFromCalendar:(id)calendar toCalendar:(id)calendar cachedConstraintsForOldCalendar:(id)calendar;
- (void)_adjustAttendeesAfterMovingOrCopyingFromCalendar:(id)calendar toCalendar:(id)calendar;
- (void)_adjustPrivacyAfterMovingOrCopyingFromCalendar:(id)calendar toCalendar:(id)calendar cachedConstraintsForOldCalendar:(id)calendar savingItem:(id)item;
- (void)_adjustAvailabilityAfterMovingOrCopyingFromCalendar:(id)calendar toCalendar:(id)calendar;
- (void)_adjustScheduleAgentAfterMovingOrCopyingFromCalendar:(id)calendar toCalendar:(id)calendar cachedConstraintsForOldCalendar:(id)calendar;
- (void)_adjustAttachmentsAfterMovingOrCopyingFromCalendar:(id)calendar toCalendar:(id)calendar cachedConstraintsForOldCalendar:(id)calendar savingItem:(id)item;
- (void)_adjustURLAfterMovingOrCopyingToCalendar:(id)calendar notes:(id)notes;
- (void)_adjustTimeZoneAfterMovingOrCopyingToCalendar:(id)calendar notes:(id)notes;
- (void)markAsSaved;
- (void)markAsCommitted;
- (void)markAsUndeleted;
- (void)markAsUndetachedWithStartDate:(id)date endDate:(id)date;
- (void)_addOrganizerToRecentsIfNeeded;
- (void)_addNewAttendeesToRecentsIfNeeded;
- (void)reset;
- (BOOL)_reset;
- (BOOL)revert;
- (void)rollback;
- (id)nextOccurrenceOrDetachmentAfter:(id)after;
- (id)earliestOccurrenceEndingAfter:(id)after;
- (id)earliestOccurrenceEndingAfter:(id)after excludeSignificantDetachments:(BOOL)detachments excludeCanceledDetachments:(BOOL)detachments excludeDeclinedDetachments:(BOOL)detachments;
- (BOOL)hasAttendeeProposedTimes;
- (id)copyToCalendar:(id)calendar withOptions:(long long)options;
- (id)duplicateWithOptions:(long long)options;
- (id)_keysToChangeForDuplicateWithOptions:(long long)options;
- (unsigned long long)countOfAttendeeProposedTimes;
- (id)committedConstraints;
- (BOOL)validateRecurrenceRule:(id)rule error:(id *)error;
- (BOOL)overlapsWithOrIsSameDayAsEventInSeries;
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(long long)span error:(id *)error;
- (BOOL)durationOverlapsRecurrenceInterval;
- (BOOL)_occurrenceExistsOnDate:(id)date timeZone:(id)zone;
- (BOOL)_checkStartDateConstraintAgainstDate:(struct { int x0; char x1; char x2; char x3; char x4; double x5; })date timeZone:(id)zone error:(id *)error;
- (BOOL)conformsToRecurrenceRules:(id)rules;
- (BOOL)allowsSpansOtherThanThisEvent;
- (BOOL)_isSimpleRepeatingEvent;
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(long long)span;
- (BOOL)_shouldDeclineInsteadOfDelete;
- (void)_deleteWithSpan:(long long)span;
- (void)_deleteFromOccurrenceDateOnward:(id)onward;
- (void)_updateSelfFromDetachedEventIfNeededForDelete;
- (void)_deleteThisOccurrence;
- (BOOL)_cancelWithSpan:(long long)span error:(id *)error;
- (void)_cancelDetachedEvents;
- (BOOL)_isOriginalOccurrenceStartDateSameAsCommittedStartDate;
- (BOOL)removeWithSpan:(long long)span error:(id *)error;
- (BOOL)isFirstOccurrence;
- (BOOL)isOnlyOccurrence;
- (BOOL)isPartOfExistingRecurringSeries;
- (id)masterEvent;
- (BOOL)_eventIsTheOnlyRemainingOccurrence;
- (BOOL)_noRemainingEarlierOccurrences;
- (void)rebaseToEventStore:(id)store;
- (void)rebaseSkippingRelationProperties:(id)properties;
- (void)_recursivelyAssignAllAttachmentsNewIdentities;
- (void)_assignAllAttachmentsNewIdentities;
- (BOOL)_shouldPreserveFutureWhenSlicingWithStartDate:(id)date newStartDate:(id)date;
- (void)_detachOrSliceWithSpan:(long long)span withOriginalStartDate:(id)date newStartDate:(id)date;
- (id)privacyLevelString;
- (BOOL)updateEventToEvent:(id)event;
- (BOOL)updateEventToEvent:(id)event commit:(BOOL)commit;
- (BOOL)_fetchedEventIsConflict:(id)conflict forStartDate:(id)date endDate:(id)date;
- (id)potentialConflictOccurrenceDatesInTimePeriod:(double *)period;
- (id)scanForConflicts;
- (BOOL)updateWithGeocodedMapItemAndSaveWithCommit:(id)commit eventStore:(id)store error:(id *)error;
- (void)dismissAcceptedProposeNewTimeNotification;
- (void)_clearAttendeeChangedFlags;
- (void)dismissAttendeeRepliedNotification;
- (void)_respondToProposedTimeFromAttendee:(id)attendee shouldAccept:(BOOL)accept;
- (void)acceptProposedTimeNotificationFromAttendee:(id)attendee;
- (void)declineProposedTimeNotificationFromAttendee:(id)attendee;
- (id)committedCopy;
- (id)diffFromCommitted;
- (BOOL)isEqual:(id)equal comparingKeys:(id)keys;
- (BOOL)isDifferentWithDiff:(id)diff;
- (BOOL)_diff:(id)_diff isDifferentFromCommittedEventHelperRequiresReschedule:(BOOL)reschedule;
- (BOOL)isDifferentAndRequiresRescheduleWithDiff:(id)diff;
- (BOOL)isDifferentAndModifiedAttendeesWithDiff:(id)diff;
- (BOOL)isDifferentAndHasForwardedAttendeesWithDiff:(id)diff;
- (BOOL)isDifferentAndHasNewProposedTimeWithDiff:(id)diff;
- (BOOL)isDifferentExceptingPerUserPropertiesWithDiff:(id)diff;
- (BOOL)isDifferentFromCommittedEventAndRequiresReschedule;
- (BOOL)isDifferentAndRequiresRSVPWithDiff:(id)diff;
- (BOOL)isDifferentFromCommittedEventAndRequiresRSVP;
- (BOOL)isDifferentAndHasUnscheduledAttendeesWithDiff:(id)diff;
- (BOOL)isDifferentFromCommittedEventAndHasUnscheduledAttendees;
- (BOOL)isPrivacySet;
- (long long)requirementsToMoveFromCalendar:(id)calendar toCalendar:(id)calendar;
- (long long)requirementsToMoveToCalendar:(id)calendar;
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar error:(id *)error;
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar allowedRequirements:(long long)requirements error:(id *)error;
- (BOOL)canMoveOrCopyToCalendar:(id)calendar fromCalendar:(id)calendar error:(id *)error;
- (BOOL)requiresCopyToMoveFromCalendar:(id)calendar toCalendar:(id)calendar;
- (BOOL)_canMoveOrCopyFromCalendar:(id)calendar toCalendar:(id)calendar allowedRequirements:(long long)requirements error:(id *)error;
- (BOOL)seriesHasOutOfOrderEvents;
- (BOOL)isOutOfOrderWithEventInSeries;
- (BOOL)seriesHasOverlappingOrOnSameDayOrOutOfOrderEvents;
- (BOOL)_requirementsToMoveOrCopyToCalendarHelperAllowedToMoveOrCopyEventFromCalendar:(id)calendar toCalendar:(id)calendar;
- (BOOL)_hasAbsoluteAlarms;
- (id)_nsCalendar;
- (BOOL)_suggestedStartDateHelperRecurrenceRuleRequiresExpansion:(id)expansion forDate:(id)date;
- (id)suggestedStartDateForCurrentRecurrenceRule;
- (id)suggestedStartDateForCurrentRecurrenceRuleWithSimulatedNowDate:(id)date;
- (BOOL)isValidAttendee:(id)attendee forCalendar:(id)calendar;
- (BOOL)_isValidAttendee:(id)attendee forCalendar:(id)calendar selfAttendeeIsValid:(BOOL)valid;
- (id)attendeesNotIncludingOrganizer;
- (BOOL)isAttendeeSameAsOrganizer:(id)organizer;
- (BOOL)_requirementsToMoveToCalendarHelperAlterationsRequiredToMoveEventFromCalendar:(id)calendar toCalendar:(id)calendar;
- (BOOL)_requirementsToMoveToCalendarHelperDuplicationRequiredToMoveEventFromCalendar:(id)calendar toCalendar:(id)calendar;
- (BOOL)_requirementsToMoveToCalendarHelperNeedToRemoveOriginalToMoveEventFromCalendar:(id)calendar toCalendar:(id)calendar;
- (BOOL)_requirementsToMoveToCalendarHelperReinviteAttendeesRequiredToMoveEventFromCalendar:(id)calendar toCalendar:(id)calendar;
- (BOOL)_requirementsToMoveToCalendarHelperRemoveAttendeesRequiredToMoveEventFromCalendar:(id)calendar toCalendar:(id)calendar;
- (void)setRecurrenceRuleString:(id)string;
- (id)_ekRecurrenceRuleFromICSRecurrenceRule:(id)rule;
- (void)updateWithVCSEntity:(id)vcsentity inCalendar:(id)calendar;
- (id)_ekRecurrenceRuleFromVCSRecurrenceRule:(id)rule;
@end

#endif /* EKEvent_h */
