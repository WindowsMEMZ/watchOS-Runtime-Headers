//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1870.2.1.0.0
//
#ifndef EKRecurrenceRule_h
#define EKRecurrenceRule_h
@import Foundation;

#include "EKObject.h"
#include "EKRecurrenceEnd.h"
#include "EKRecurrenceHelper.h"
#include "NSCopying-Protocol.h"

@class NSArray, NSDate, NSDateComponents, NSString;

@interface EKRecurrenceRule : EKObject<NSCopying> {
  /* instance variables */
  EKRecurrenceHelper *_recurrenceHelper;
}

@property (readonly, nonatomic) BOOL shouldPinMonthDays;
@property (readonly, nonatomic) NSDateComponents *dateComponents;
@property (readonly) BOOL usesEndDate;
@property (readonly, nonatomic) NSString *UUID;
@property (readonly, nonatomic) NSDate *cachedEndDate;
@property (readonly, nonatomic) BOOL dirtyStateMayAffectExceptionDates;
@property (readonly, nonatomic) NSString *calendarIdentifier;
@property (copy, nonatomic) EKRecurrenceEnd *recurrenceEnd;
@property (readonly, nonatomic) long long frequency;
@property (readonly, nonatomic) long long interval;
@property (readonly, nonatomic) long long firstDayOfTheWeek;
@property (readonly, nonatomic) NSArray *daysOfTheWeek;
@property (readonly, nonatomic) NSArray *daysOfTheMonth;
@property (readonly, nonatomic) NSArray *daysOfTheYear;
@property (readonly, nonatomic) NSArray *weeksOfTheYear;
@property (readonly, nonatomic) NSArray *monthsOfTheYear;
@property (readonly, nonatomic) NSArray *setPositions;

/* class methods */
+ (id)knownSingleValueKeysForComparison;
+ (Class)frozenClass;
+ (id)knownIdentityKeysForComparison;
+ (id)knownRelationshipWeakKeys;
+ (id)recurrenceRuleWithType:(long long)type interval:(unsigned long long)interval end:(id)end;
+ (long long)_ekWeekdayFromCalDayOfWeek:(int)week;
+ (int)_calDayOfWeekFromEKWeekday:(long long)ekweekday;
+ (id)iCalendarValueFromRecurrenceType:(long long)type;
+ (id)iCalendarValueFromDayOfTheWeek:(unsigned long long)week;
+ (id)iCalendarValueFromDate:(id)date isDateOnly:(BOOL)only isFloating:(BOOL)floating;
+ (long long)daysTypeForDayArray:(id)array;
+ (id)_acceptableStartDateRangeForDailyRecurrenceWithCurrentStartDate:(id)date;
+ (id)_acceptableStartDateRangeForWeeklyRecurrenceWithCurrentStartDate:(id)date calendar:(id)calendar;
+ (id)_acceptableStartDateRangeForMonthlyRecurrenceWithCurrentStartDate:(id)date calendar:(id)calendar;
+ (id)_acceptableStartDateRangeForYearlyRecurrenceWithCurrentStartDate:(id)date calendar:(id)calendar;

/* instance methods */
- (id)init;
- (id)initRecurrenceWithFrequency:(long long)frequency interval:(long long)interval daysOfTheWeek:(id)week daysOfTheMonth:(id)month monthsOfTheYear:(id)year weeksOfTheYear:(id)year daysOfTheYear:(id)year setPositions:(id)positions end:(id)end;
- (id)initRecurrenceWithFrequency:(long long)frequency interval:(long long)interval end:(id)end;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)zone;
- (int)frequencyRaw;
- (void)setFrequencyRaw:(int)raw;
- (id)endDate;
- (void)setEndDate:(id)date;
- (unsigned long long)count;
- (void)setCount:(unsigned long long)count;
- (id)cachedEndDateTimeZone;
- (void)setCachedEndDateTimeZone:(id)zone;
- (void)invalidateCachedEndDate;
- (int)firstDayOfTheWeekRaw;
- (void)setFirstDayOfTheWeekRaw:(int)raw;
- (id)specifier;
- (void)setSpecifier:(id)specifier;
- (id)_recurrenceHelper;
- (void)_updateSpecifierIfNeeded;
- (void)_resetInternalStateWithForce:(BOOL)force;
- (void)rollback;
- (BOOL)mayOccurAfterDate:(id)date;
- (void)pinToEndsOfMonthsWithCalendarItem:(id)item;
- (BOOL)isWeekdayRule;
- (BOOL)isWeekendRule;
- (BOOL)isAnyDayRule;
- (BOOL)isSimpleRule;
- (id)_adjustDateIntoUTC:(id)utc dateOnly:(BOOL)only floating:(BOOL)floating;
- (id)stringValueAsDateOnly:(BOOL)only isFloating:(BOOL)floating;
- (id)humanReadableDescriptionWithStartDate:(id)date;
- (id)humanReadableDescriptionWithStartDate:(id)date isConcise:(BOOL)concise;
- (BOOL)hasDuplicateMonthsOfYear;
- (BOOL)newStartDateIsValid:(id)valid currentStartDate:(id)date calendar:(id)calendar;
- (BOOL)newStartDateIsInvalid:(id)invalid currentStartDate:(id)date calendar:(id)calendar;
- (id)_acceptableStartDateRangeWithCurrentStartDate:(id)date calendar:(id)calendar;
- (BOOL)isEqualToRecurrenceRule:(id)rule;
@end

#endif /* EKRecurrenceRule_h */
