//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1838.60.8.0.0
//
#ifndef NEConfigurationManager_h
#define NEConfigurationManager_h
@import Foundation;

#include "NEHelper.h"

@class NSData, NSDictionary, NSKeyedUnarchiver, NSMutableDictionary, NSString, NSUUID;
@protocol OS_dispatch_queue;

@interface NEConfigurationManager : NSObject {
  /* instance variables */
  NSString *_description;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  BOOL _hasReadPermission;
  BOOL _isVPNPublicAPI;
  BOOL _isVPNPrivateAPI;
  BOOL _isNEHelper;
  BOOL _isSynchronous;
  BOOL _isSyncedOnQueue;
  int _changedNotifyToken;
  NSObject<OS_dispatch_queue> *_queue;
  NSObject<OS_dispatch_queue> *_outerQueue;
  NSDictionary *_currentIndex;
  NSObject<OS_dispatch_queue> *_changedQueue;
  id /* block */ _changedHandler;
  NSMutableDictionary *_loadedIndex;
  NSMutableDictionary *_loadedConfigurations;
  NSKeyedUnarchiver *_decoder;
  long long _generation;
  NEHelper *_helper;
  NSData *_SCPreferencesSignature;
  NSMutableDictionary *_appGroupMap;
}

@property BOOL hasVPNAPIEntitlement;
@property (readonly) NSUUID *userUUID;
@property (copy) id /* block */ incomingMessageHandler;
@property long long configurationChangeSource;
@property (nonatomic) BOOL appGroupsChanged;
@property (readonly) NSString *pluginType;

/* class methods */
+ (id)sharedManager;
+ (id)sharedManagerForAllUsers;
+ (id)networkPrivacyConfigurationName;

/* instance methods */
- (id)init;
- (id)initWithPluginType:(id)type;
- (id)initForAllUsers;
- (id)initSynchronous;
- (void)dealloc;
- (id)description;
- (void)postGeneration;
- (id)copyCurrentIndexWithConfigurationIDsExpunged:(id)expunged;
- (void)saveConfigurationToDisk:(id)disk currentSignature:(id)signature userUUID:(id)uuid isUpgrade:(BOOL)upgrade completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)removeConfigurationFromDisk:(id)disk completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)syncConfigurationsWithSC:(id)sc completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)loadIndexWithFilter:(id)filter completionQueue:(id)queue handler:(id /* block */)handler;
- (void)loadConfigurations:(id)configurations withFilter:(id)filter completionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)loadConfigurationWithID:(id)id withCompletionQueue:(id)queue handler:(id /* block */)handler;
- (void)loadConfigurationAndUserWithID:(id)id withCompletionQueue:(id)queue handler:(id /* block */)handler;
- (void)loadConfigurationsWithCompletionQueue:(id)queue handler:(id /* block */)handler;
- (void)saveConfiguration:(id)configuration withCompletionQueue:(id)queue handler:(id /* block */)handler;
- (void)removeConfiguration:(id)configuration withCompletionQueue:(id)queue handler:(id /* block */)handler;
- (void)setChangedQueue:(id)queue andHandler:(id /* block */)handler;
- (void)handleFileRemovedWithCompletionQueue:(id)queue completionHandler:(id /* block */)handler;
- (void)handleApplicationsRemoved:(id)removed completionQueue:(id)queue withCompletionHandler:(id /* block */)handler;
- (void)copyIdentities:(id)identities fromDomain:(long long)domain withCompletionQueue:(id)queue handler:(id /* block */)handler;
- (void)triggerLocalAuthenticationForConfigurationWithID:(id)id withCompletionQueue:(id)queue handler:(id /* block */)handler;
- (void)showLocalNetworkAlertForApp:(id)app withCompletionQueue:(id)queue handler:(id /* block */)handler;
- (void)showLocalNetworkAlertForApp:(id)app withCompletionQueue:(id)queue query:(id)query hasEntitlement:(BOOL)entitlement handler:(id /* block */)handler;
- (void)repopulateNetworkPrivacyConfigurationResetAll:(BOOL)all;
- (void)fetchClientListenerWithBundleID:(id)id completionQueue:(id)queue handler:(id /* block */)handler;
- (void)fetchUpgradeInfoForPluginType:(id)type completionQueue:(id)queue handler:(id /* block */)handler;
- (id)getCurrentUserUUIDForConfigurationID:(id)id fromIndex:(id)index;
- (id)copyAppGroupMapDidChange:(BOOL *)change;
- (void)addGroups:(id)groups forApp:(id)app;
- (id)debugDescription;
@end

#endif /* NEConfigurationManager_h */
