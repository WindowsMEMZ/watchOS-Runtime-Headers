//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 50.0.6.0.0
//
#ifndef SKAction_h
#define SKAction_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@interface SKAction : NSObject<NSCopying, NSSecureCoding> {
  /* instance variables */
  struct SKCAction { undefined * * x0; unsigned int x1; float x2; id /* block */ x3; id x4; BOOL x5; double x6; double x7; float x8; float x9; double x10; BOOL x11; BOOL x12; id /* block */ x13; long long x14; float x15; float x16; float x17; float x18; } * _caction;
}

@property (nonatomic) BOOL finished;
@property (nonatomic) double duration;
@property (nonatomic) long long timingMode;
@property (copy, nonatomic) id /* block */ timingFunction;
@property (nonatomic) double speed;

/* class methods */
+ (id)stereoPanTo:(float)to duration:(double)duration;
+ (id)stereoPanBy:(float)by duration:(double)duration;
+ (id)changeReverbTo:(float)to duration:(double)duration;
+ (id)changeReverbBy:(float)by duration:(double)duration;
+ (id)changeObstructionTo:(float)to duration:(double)duration;
+ (id)changeObstructionBy:(float)by duration:(double)duration;
+ (id)changeOcclusionTo:(float)to duration:(double)duration;
+ (id)changeOcclusionBy:(float)by duration:(double)duration;
+ (id)changeVolumeTo:(float)to duration:(double)duration;
+ (id)changeVolumeBy:(float)by duration:(double)duration;
+ (id)play;
+ (id)pause;
+ (id)stop;
+ (id)changePlaybackRateTo:(float)to duration:(double)duration;
+ (id)changePlaybackRateBy:(float)by duration:(double)duration;
+ (id)changeChargeTo:(float)to duration:(double)duration;
+ (id)changeChargeBy:(float)by duration:(double)duration;
+ (id)changeMassTo:(float)to duration:(double)duration;
+ (id)changeMassBy:(float)by duration:(double)duration;
+ (id)applyForce:(struct CGVector { double x0; double x1; })force duration:(double)duration;
+ (id)applyForce:(struct CGVector { double x0; double x1; })force atPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration;
+ (id)applyTorque:(double)torque duration:(double)duration;
+ (id)applyImpulse:(struct CGVector { double x0; double x1; })impulse duration:(double)duration;
+ (id)applyImpulse:(struct CGVector { double x0; double x1; })impulse atPoint:(struct CGPoint { double x0; double x1; })point duration:(double)duration;
+ (id)applyAngularImpulse:(double)impulse duration:(double)duration;
+ (id)moveByX:(double)x y:(double)y duration:(double)duration;
+ (id)moveBy:(struct CGVector { double x0; double x1; })by duration:(double)duration;
+ (id)moveBY:(struct CGVector { double x0; double x1; })by duration:(double)duration;
+ (id)moveTo:(struct CGPoint { double x0; double x1; })to duration:(double)duration;
+ (id)moveToX:(double)x duration:(double)duration;
+ (id)moveToY:(double)y duration:(double)duration;
+ (id)rotateByAngle:(double)angle duration:(double)duration;
+ (id)rotateToAngle:(double)angle duration:(double)duration;
+ (id)rotateToAngle:(double)angle duration:(double)duration shortestUnitArc:(BOOL)arc;
+ (id)scaleBy:(double)by duration:(double)duration;
+ (id)scaleXBy:(double)xby y:(double)y duration:(double)duration;
+ (id)scaleTo:(double)to duration:(double)duration;
+ (id)scaleXTo:(double)xto y:(double)y duration:(double)duration;
+ (id)scaleXTo:(double)xto duration:(double)duration;
+ (id)scaleYTo:(double)yto duration:(double)duration;
+ (id)scaleToSize:(struct CGSize { double x0; double x1; })size duration:(double)duration;
+ (id)resizeByWidth:(double)width height:(double)height duration:(double)duration;
+ (id)resizeToWidth:(double)width height:(double)height duration:(double)duration;
+ (id)resizeToWidth:(double)width duration:(double)duration;
+ (id)resizeToHeight:(double)height duration:(double)duration;
+ (id)sequence:(id)sequence;
+ (id)group:(id)group;
+ (id)repeatAction:(id)action count:(unsigned long long)count;
+ (id)repeatActionForever:(id)forever;
+ (id)fadeInWithDuration:(double)duration;
+ (id)fadeOutWithDuration:(double)duration;
+ (id)fadeAlphaBy:(double)by duration:(double)duration;
+ (id)fadeAlphaTo:(double)to duration:(double)duration;
+ (id)falloffTo:(float)to duration:(double)duration;
+ (id)falloffBy:(float)by duration:(double)duration;
+ (id)hide;
+ (id)unhide;
+ (id)setTexture:(id)texture;
+ (id)setNormalTexture:(id)texture;
+ (id)setTexture:(id)texture resize:(BOOL)resize;
+ (id)setNormalTexture:(id)texture resize:(BOOL)resize;
+ (id)animateWithTextures:(id)textures timePerFrame:(double)frame;
+ (id)animateWithNormalTextures:(id)textures timePerFrame:(double)frame;
+ (id)animateWithTextures:(id)textures timePerFrame:(double)frame resize:(BOOL)resize restore:(BOOL)restore;
+ (id)animateWithNormalTextures:(id)textures timePerFrame:(double)frame resize:(BOOL)resize restore:(BOOL)restore;
+ (id)playSoundFileNamed:(id)named;
+ (id)playSoundFileNamed:(id)named waitForCompletion:(BOOL)completion;
+ (id)playSoundFileNamed:(id)named atPosition:(struct CGPoint { double x0; double x1; })position waitForCompletion:(BOOL)completion;
+ (id)colorizeWithColor:(id)color colorBlendFactor:(double)factor duration:(double)duration;
+ (id)colorizeWithColorBlendFactor:(double)factor duration:(double)duration;
+ (id)followPath:(struct CGPath *)path duration:(double)duration;
+ (id)followPath:(struct CGPath *)path asOffset:(BOOL)offset orientToPath:(BOOL)path duration:(double)duration;
+ (id)followPath:(struct CGPath *)path speed:(double)speed;
+ (id)followPath:(struct CGPath *)path asOffset:(BOOL)offset orientToPath:(BOOL)path speed:(double)speed;
+ (id)speedBy:(double)by duration:(double)duration;
+ (id)speedTo:(double)to duration:(double)duration;
+ (id)strengthTo:(float)to duration:(double)duration;
+ (id)strengthBy:(float)by duration:(double)duration;
+ (id)reachTo:(struct CGPoint { double x0; double x1; })to rootNode:(id)node duration:(double)duration;
+ (id)reachTo:(struct CGPoint { double x0; double x1; })to rootNode:(id)node velocity:(double)velocity;
+ (id)reachToNode:(id)node rootNode:(id)node duration:(double)duration;
+ (id)reachToNode:(id)node rootNode:(id)node velocity:(double)velocity;
+ (id)waitForDuration:(double)duration;
+ (id)waitForDuration:(double)duration withRange:(double)range;
+ (id)removeFromParent;
+ (id)performSelector:(SEL)selector onTarget:(id)target;
+ (id)runBlock:(id /* block */)block;
+ (id)runBlock:(id /* block */)block queue:(id)queue;
+ (id)runAction:(id)action onChildWithName:(id)name;
+ (id)javaScriptActionWithDuration:(double)duration script:(id)script;
+ (id)customActionWithDuration:(double)duration actionBlock:(id /* block */)block;
+ (id)actionNamed:(id)named;
+ (id)actionNamed:(id)named duration:(double)duration;
+ (id)actionNamed:(id)named fromURL:(id)url;
+ (id)actionNamed:(id)named fromURL:(id)url duration:(double)duration;
+ (id)recursivePathsForResourcesOfType:(id)type inDirectory:(id)directory;
+ (id)findNamedActionInBundle:(id)bundle;
+ (void)addActionsToCachedActionTable:(id)table;
+ (void)convertAction:(id)action toDuration:(double)duration;
+ (void)clearActionTableCache;
+ (Class)unarchiver:(id)unarchiver cannotDecodeObjectOfClassName:(id)name originalClasses:(id)classes;
+ (id)warpTo:(id)to duration:(double)duration;
+ (id)animateWithWarps:(id)warps times:(id)times;
+ (id)animateWithWarps:(id)warps times:(id)times restore:(BOOL)restore;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (void)setCppAction:(void *)action;
- (void)wasPausedWithTarget:(id)target atTime:(double)time;
- (void)willResumeWithTarget:(id)target atTime:(double)time;
- (double)ratioForTime:(double)time;
- (void)wasAddedToTarget:(id)target atTime:(double)time;
- (void)wasRemovedFromTarget:(id)target atTime:(double)time;
- (void)willStartWithTarget:(id)target atTime:(double)time;
- (void)updateWithTarget:(id)target forTime:(double)time;
- (struct SKCAction { undefined * * x0; unsigned int x1; float x2; id /* block */ x3; id x4; BOOL x5; double x6; double x7; float x8; float x9; double x10; BOOL x11; BOOL x12; id /* block */ x13; long long x14; float x15; float x16; float x17; float x18; } *)caction;
- (id)subactions;
- (void)commonInit;
- (id)init;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (BOOL)isEqualToAction:(id)action;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)reversedAction;
- (void)dealloc;
@end

#endif /* SKAction_h */
