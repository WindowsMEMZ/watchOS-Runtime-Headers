//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 50.0.6.0.0
//
#ifndef SKTextureAtlas_h
#define SKTextureAtlas_h
@import Foundation;

#include "NSSecureCoding-Protocol.h"

@class NSArray, NSDictionary, NSString;
@protocol {unordered_map<std::string, SKTexture *, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SKTexture *>>>="__table_"{__hash_table<std::__hash_value_type<std::string, SKTexture *>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, SKTexture *>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, SKTexture *>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, SKTexture *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, SKTexture *>, std::hash<std::string>, std::equal_to<std::string>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, SKTexture *>, std::equal_to<std::string>, std::hash<std::string>>>="__value_"f}}};

@interface SKTextureAtlas : NSObject<NSSecureCoding> {
  /* instance variables */
  NSDictionary *_textureDict;
  NSString *_atlasName;
  BOOL _isCUIImageAtlas;
  struct unordered_map<std::string, SKTexture *, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SKTexture *>>> { struct __hash_table<std::__hash_value_type<std::string, SKTexture *>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, SKTexture *>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, SKTexture *>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, SKTexture *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, SKTexture *>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, SKTexture *>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } _textureMap;
}

@property (readonly, nonatomic) NSArray *textureNames;

/* class methods */
+ (void)_exportAtlasWithDictionary:(id)dictionary toFile:(id)file;
+ (void)_exportAtlasWithDictionary:(id)dictionary toFile:(id)file forcePOT:(BOOL)pot;
+ (struct CGImage *)createCGImageFromCUINamedImage:(struct CGImage *)image withSize:(struct CGSize { double x0; double x1; })size atRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
+ (id)getSupportedPostfixes;
+ (id)findTextureNamed:(id)named;
+ (id)lookupCachedTextureNamed:(id)named;
+ (BOOL)supportsSecureCoding;
+ (BOOL)canUseObjectForAtlas:(id)atlas;
+ (id)atlasWithDictionary:(id)dictionary;
+ (id)atlasNamed:(id)named;
+ (id)atlasFromCUIImageAtlas:(id)atlas withName:(id)name;
+ (void)preloadTextureAtlases:(id)atlases withCompletionHandler:(id /* block */)handler;
+ (void)preloadTextureAtlasesNamed:(id)named withCompletionHandler:(id /* block */)handler;

/* instance methods */
- (id)_copyImageData;
- (void)unload;
- (void)_prePopulateCache;
- (void)commonInit;
- (id)init;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (BOOL)isEqualToTextureAtlas:(id)atlas;
- (void)parseAtlasPropertyList:(id)list withPath:(id)path;
- (void)loadTextures;
- (id)createSubTextureFromTexture:(id)texture andCUINamedImage:(id)image andOrigin:(struct CGPoint { double x0; double x1; })origin;
- (void)loadTexturesFromCUIImageAtlas:(id)atlas;
- (void)preloadWithCompletionHandler:(id /* block */)handler;
- (id)description;
- (void)dealloc;
- (id)findTextureNamedFromAtlas:(id)atlas;
- (id)textureNamed:(id)named;
@end

#endif /* SKTextureAtlas_h */
