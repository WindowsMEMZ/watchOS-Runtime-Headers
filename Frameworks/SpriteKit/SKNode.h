//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 50.0.6.0.0
//
#ifndef SKNode_h
#define SKNode_h
@import Foundation;

#include "UIResponder.h"
#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"
#include "SKNode.h"
#include "SKPhysicsBody.h"
#include "SKReachConstraints.h"
#include "SKScene.h"
#include "UICoordinateSpace-Protocol.h"
#include "UIFocusEnvironment-Protocol.h"
#include "UIFocusItem-Protocol.h"
#include "UIFocusItemContainer-Protocol.h"

@class GKEntity, NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSString, UIFocusEffect, UIView;
@protocol struct shared_ptr<PKCAether> { struct PKCAether * x0; struct __shared_weak_count * x1; };

@interface SKNode : UIResponder<UIFocusItemContainer, UICoordinateSpace, NSCopying, NSSecureCoding, UIFocusItem> {
  /* instance variables */
  void * _skcNode;
  NSMutableArray *_actions;
  NSMutableDictionary *_keyedActions;
  NSMutableDictionary *_keyedSubSprites;
  NSMutableDictionary *_info;
  unsigned int _version;
}

@property (weak, nonatomic) GKEntity *entity;
@property (readonly, nonatomic) struct { x0[4] } globalBoundingVerts;
@property (readonly, nonatomic) struct { x0[4] } globalAccumulatedBoundingVerts;
@property (readonly, nonatomic) struct CGPath * outline;
@property (nonatomic) BOOL _showBounds;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _untransformedBounds;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } _untransformedSize;
@property (nonatomic) struct CGPoint { double x0; double x1; } _anchorPoint;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } _size;
@property (retain, nonatomic) NSMutableDictionary *_info;
@property (readonly, nonatomic) NSArray *_allActions;
@property (readonly, nonatomic) struct shared_ptr<PKCAether> { struct PKCAether * x0; struct __shared_weak_count * x1; } _aether;
@property (weak, nonatomic) GKEntity *entity;
@property BOOL performFullCapture;
@property (readonly, nonatomic) void * _backingNode;
@property (nonatomic) double xRotation;
@property (nonatomic) double yRotation;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } frame;
@property (nonatomic) struct CGPoint { double x0; double x1; } position;
@property (nonatomic) double zPosition;
@property (nonatomic) double zRotation;
@property (nonatomic) double xScale;
@property (nonatomic) double yScale;
@property (nonatomic) double speed;
@property (nonatomic) double alpha;
@property (nonatomic) BOOL paused;
@property (nonatomic) BOOL hidden;
@property (nonatomic) BOOL userInteractionEnabled;
@property (nonatomic) long long focusBehavior;
@property (readonly, nonatomic) SKNode *parent;
@property (readonly, nonatomic) NSArray *children;
@property (copy, nonatomic) NSString *name;
@property (readonly, nonatomic) SKScene *scene;
@property (retain, nonatomic) SKPhysicsBody *physicsBody;
@property (retain, nonatomic) NSMutableDictionary *userData;
@property (copy, nonatomic) SKReachConstraints *reachConstraints;
@property (copy, nonatomic) NSArray *constraints;
@property (copy, nonatomic) NSDictionary *attributeValues;
@property (readonly, nonatomic) NSObject<UICoordinateSpace> *coordinateSpace;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } bounds;
@property (readonly, nonatomic) BOOL canBecomeFocused;
@property (readonly, copy, nonatomic) UIFocusEffect *focusEffect;
@property (readonly, nonatomic) long long focusGroupPriority;
@property (readonly, nonatomic) BOOL isTransparentFocusItem;
@property (readonly, copy, nonatomic) NSArray *preferredFocusEnvironments;
@property (readonly, weak, nonatomic) NSObject<UIFocusEnvironment> *parentFocusEnvironment;
@property (readonly, nonatomic) NSObject<UIFocusItemContainer> *focusItemContainer;
@property (readonly, weak, nonatomic) UIView *preferredFocusedView;
@property (readonly, copy, nonatomic) NSString *focusGroupIdentifier;

/* class methods */
+ (id)nodeFromCaptureData:(id)data;
+ (BOOL)supportsSecureCoding;
+ (id)node;
+ (id)nodeWithFileNamed:(id)named;
+ (id)nodeWithFileNamed:(id)named securelyWithClasses:(id)classes andError:(id *)error;
+ (id)debugHierarchyChildGroupingID;
+ (id)debugHierarchyObjectsInGroupWithID:(id)id onObject:(id)object outOptions:(id *)options;
+ (id)debugHierarchyPropertyDescriptions;
+ (id)debugHierarchyValueForPropertyWithName:(id)name onObject:(id)object outOptions:(id *)options outError:(id *)error;

/* instance methods */
- (id)createFullCaptureData;
- (id)archiveToFile:(id)file;
- (void)debugPrint;
- (void)_debugPrint:(int)print;
- (void)_debugPrint:(int)print mask:(unsigned long long)mask;
- (void)_getWorldTransform:(float *)transform positionY:(float *)y rotation:(float *)rotation xScale:(float *)scale yScale:(float *)scale;
- (void)_getBasePhysicsScale:(float *)scale yScale:(float *)scale;
- (void)updatePhysicsPositionAndScaleFromSprite;
- (id)childrenInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)intersectsNode:(id)node useAlphaTest:(BOOL)test;
- (id)allIntersectionsWithNode:(id)node useAlphaTest:(BOOL)test;
- (id)_subnodeFromIndexPath:(id)path;
- (BOOL)_pathFromPhysicsBodyToPoints:(1 * *)points outSize:(unsigned long long *)size;
- (id)_copyImageData;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertFrameToView:(id)view;
- (id)createDebugHierarchyVisualRepresentation;
- (void)_removeAction:(id)action;
- (void)_removeChild:(id)child;
- (BOOL)isEqualToNode:(id)node;
- (void *)_makeBackingNode;
- (void)_didMakeBackingNode;
- (id)init;
- (Class)swiftClassFromString:(id)string moduleName:(id)name;
- (id)initWithCoder:(id)coder;
- (void)_initAccessibility;
- (void)encodeWithCoder:(id)coder;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)removeFromParent;
- (void)moveToParent:(id)parent;
- (void)_update:(double)_update;
- (BOOL)inParentHierarchy:(id)hierarchy;
- (void)addChild:(id)child;
- (void)insertChild:(id)child atIndex:(long long)index;
- (void)removeChildAtIndex:(long long)index;
- (void)removeChild:(id)child;
- (void)removeChildrenInArray:(id)array;
- (void)removeAllChildren;
- (void)_performCleanup;
- (void)_scaleFactorChangedFrom:(float)from to:(float)to;
- (void)_flippedChangedFrom:(BOOL)from to:(BOOL)to;
- (void)addChild:(id)child withKey:(id)key;
- (id)childNodeWithName:(id)name;
- (void)enumerateChildNodesWithName:(id)name usingBlock:(id /* block */)block;
- (id)objectForKeyedSubscript:(id)subscript;
- (void)_enumerateChildNodesWithName:(id)name usingBlock:(id /* block */)block stopPointer:(BOOL *)pointer;
- (void)_processSearchTokens:(struct vector<Token, std::allocator<Token>> { struct Token * x0; struct Token * x1; struct __compressed_pair<Token *, std::allocator<Token>> { struct Token * x0; } x2; })tokens visited:(void *)visited usingBlock:(id /* block */)block stopPointer:(BOOL *)pointer;
- (BOOL)hasChildren;
- (id)_descendants;
- (void)_descendantsToMutableArray:(id)array;
- (id)_descendantsWithPredicate:(id /* block */)predicate;
- (void)_descendantsWithPredicate:(id /* block */)predicate toMutableArray:(id)array;
- (void)runAction:(id)action;
- (void)_runAction:(id)action;
- (void)runAction:(id)action completion:(id /* block */)completion;
- (void)runAction:(id)action withKey:(id)key;
- (id)actionForKey:(id)key;
- (void)removeActionForKey:(id)key;
- (void)removeAllActions;
- (id)containingView;
- (BOOL)hasActions;
- (BOOL)needsUpdate;
- (id)physicsField;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })calculateAccumulatedFrame;
- (void)setScale:(double)scale;
- (BOOL)isHidden;
- (BOOL)isPaused;
- (BOOL)isUserInteractionEnabled;
- (BOOL)containsPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)containsPoint:(struct CGPoint { double x0; double x1; })point withRadius:(double)radius;
- (id)nodeAtPoint:(struct CGPoint { double x0; double x1; })point recursive:(BOOL)recursive;
- (id)nodeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)nodesAtPoint:(struct CGPoint { double x0; double x1; })point;
- (struct CGPoint { double x0; double x1; })convertPointFromParent:(struct CGPoint { double x0; double x1; })parent;
- (struct CGPoint { double x0; double x1; })convertPointToParent:(struct CGPoint { double x0; double x1; })parent;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point fromNode:(id)node;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toNode:(id)node;
- (void)setSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })size;
- (BOOL)intersectsNode:(id)node;
- (BOOL)hasUniformAlphaAndIsVisible;
- (void)dealloc;
- (id)valueForAttributeNamed:(id)named;
- (void)setValue:(id)value forAttributeNamed:(id)named;
- (void)setNeedsFocusUpdate;
- (void)updateFocusIfNeeded;
- (void)didUpdateFocusInContext:(id)context withAnimationCoordinator:(id)coordinator;
- (BOOL)shouldUpdateFocusInContext:(id)context;
- (BOOL)_isEffectivelyHidden;
- (BOOL)_isEligibleForFocus;
- (BOOL)_isEligibleForFocusInteraction;
- (id)focusItemsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toCoordinateSpace:(id)space;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point fromCoordinateSpace:(id)space;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toCoordinateSpace:(id)space;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fromCoordinateSpace:(id)space;
@end

#endif /* SKNode_h */
