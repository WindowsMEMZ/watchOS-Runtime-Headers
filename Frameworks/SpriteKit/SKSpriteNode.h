//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 50.0.6.0.0
//
#ifndef SKSpriteNode_h
#define SKSpriteNode_h
@import Foundation;

#include "SKNode.h"
#include "SKLightNode.h"
#include "SKShader.h"
#include "SKTexture.h"
#include "SKWarpGeometry.h"
#include "SKWarpable-Protocol.h"

@class NSDictionary, NSString, UIColor;

@interface SKSpriteNode : SKNode<SKWarpable> {
  /* instance variables */
  void * _skcSpriteNode;
  SKLightNode *_light;
}

@property (nonatomic) BOOL shouldRepeatTexture;
@property (nonatomic) struct CGSize { double x0; double x1; } repeatTextureSize;
@property (retain, nonatomic) SKTexture *texture;
@property (retain, nonatomic) SKTexture *normalTexture;
@property (nonatomic) unsigned int lightingBitMask;
@property (nonatomic) unsigned int shadowCastBitMask;
@property (nonatomic) unsigned int shadowedBitMask;
@property (nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } centerRect;
@property (nonatomic) double colorBlendFactor;
@property (retain, nonatomic) UIColor *color;
@property (nonatomic) long long blendMode;
@property (nonatomic) struct CGPoint { double x0; double x1; } anchorPoint;
@property (nonatomic) struct CGSize { double x0; double x1; } size;
@property (retain, nonatomic) SKShader *shader;
@property (copy, @dynamic, nonatomic) NSDictionary *attributeValues;
@property (retain, nonatomic) SKWarpGeometry *warpGeometry;
@property (nonatomic) long long subdivisionLevels;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)supportsSecureCoding;
+ (id)spriteNodeWithImageNamed:(id)named;
+ (id)spriteNodeWithImageNamed:(id)named normalMapped:(BOOL)mapped;
+ (id)spriteNodeWithTexture:(id)texture;
+ (id)spriteNodeWithTexture:(id)texture size:(struct CGSize { double x0; double x1; })size;
+ (id)spriteNodeWithTexture:(id)texture normalMap:(id)map;
+ (id)spriteNodeWithColor:(id)color size:(struct CGSize { double x0; double x1; })size;
+ (id)debugHierarchyPropertyDescriptions;
+ (id)debugHierarchyValueForPropertyWithName:(id)name onObject:(id)object outOptions:(id *)options outError:(id *)error;

/* instance methods */
- (id)initWithTexture:(id)texture color:(id)color size:(struct CGSize { double x0; double x1; })size;
- (void *)_makeBackingNode;
- (void)_didMakeBackingNode;
- (id)init;
- (id)initWithCoder:(id)coder;
- (id)initWithImageNamed:(id)named;
- (void)encodeWithCoder:(id)coder;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (id)initWithColor:(id)color size:(struct CGSize { double x0; double x1; })size;
- (id)initWithTexture:(id)texture;
- (void)scaleToSize:(struct CGSize { double x0; double x1; })size;
- (BOOL)repeatTexture;
- (void)setRepeatTexture:(BOOL)texture;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)zone;
- (BOOL)isEqualToNode:(id)node;
- (BOOL)_pathFromTextureToPoints:(1 * *)points outSize:(unsigned long long *)size accuracy:(float)accuracy;
- (id)valueForAttributeNamed:(id)named;
- (void)setValue:(id)value forAttributeNamed:(id)named;
@end

#endif /* SKSpriteNode_h */
