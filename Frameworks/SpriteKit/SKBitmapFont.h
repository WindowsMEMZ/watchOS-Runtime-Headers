//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 50.0.6.0.0
//
#ifndef SKBitmapFont_h
#define SKBitmapFont_h
@import Foundation;

#include "NSSecureCoding-Protocol.h"

@class NSArray, NSString;
@protocol {map<unsigned int, double, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, double>>>="__tree_"{__tree<std::__value_type<unsigned int, double>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, double>, std::less<unsigned int>>, std::allocator<std::__value_type<unsigned int, double>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, double>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, double>, std::less<unsigned int>>>="__value_"Q}}}, {map<unsigned short, SKSpriteNode *, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, SKSpriteNode *>>>="__tree_"{__tree<std::__value_type<unsigned short, SKSpriteNode *>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, SKSpriteNode *>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, SKSpriteNode *>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, SKSpriteNode *>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, SKSpriteNode *>, std::less<unsigned short>>>="__value_"Q}}}, {map<unsigned short, double, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, double>>>="__tree_"{__tree<std::__value_type<unsigned short, double>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, double>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, double>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, double>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, double>, std::less<unsigned short>>>="__value_"Q}}};

@interface SKBitmapFont : NSObject<NSSecureCoding> {
  /* instance variables */
  NSString *_fontName;
  NSString *_filePath;
  double _lineHeight;
  double _baseLine;
  NSArray *_characterSprites;
  struct map<unsigned short, SKSpriteNode *, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, SKSpriteNode *>>> { struct __tree<std::__value_type<unsigned short, SKSpriteNode *>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, SKSpriteNode *>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, SKSpriteNode *>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, SKSpriteNode *>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, SKSpriteNode *>, std::less<unsigned short>>> { unsigned long long __value_; } __pair3_; } __tree_; } _characterSpriteByChar;
  struct map<unsigned short, double, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, double>>> { struct __tree<std::__value_type<unsigned short, double>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, double>, std::less<unsigned short>>, std::allocator<std::__value_type<unsigned short, double>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, double>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, double>, std::less<unsigned short>>> { unsigned long long __value_; } __pair3_; } __tree_; } _characterAdvanceByChar;
  struct map<unsigned int, double, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, double>>> { struct __tree<std::__value_type<unsigned int, double>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, double>, std::less<unsigned int>>, std::allocator<std::__value_type<unsigned int, double>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, double>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, double>, std::less<unsigned int>>> { unsigned long long __value_; } __pair3_; } __tree_; } _characterKerningByCharPair;
  BOOL _internal;
  NSString *_fileName;
}

/* class methods */
+ (id)_fontForFileNamed:(id)named;
+ (BOOL)supportsSecureCoding;
+ (id)fontForFileNamed:(id)named;
+ (id)fontWithTexture:(id)texture fontDataString:(id)string;

/* instance methods */
- (id)fontName;
- (id)init;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (BOOL)loadFontWithTexture:(id)texture fontDataString:(id)string;
- (id)spriteForCharacterNamed:(unsigned short)named;
- (double)lineHeight;
- (double)advanceForCharacterNamed:(unsigned short)named;
- (double)kerningForCharacterNamed:(unsigned short)named followedBy:(unsigned short)by;
@end

#endif /* SKBitmapFont_h */
