//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 50.0.6.0.0
//
#ifndef SKTexture_h
#define SKTexture_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"
#include "SKTexture.h"
#include "SKTextureAtlas.h"
#include "SKTextureCache.h"

@class CIFilter, NSArray, NSString;
@protocol OS_dispatch_queue;

@interface SKTexture : NSObject<NSCopying, NSSecureCoding> {
  /* instance variables */
  BOOL _shouldGenerateMipmaps;
  BOOL _didGenerateMipmaps;
  BOOL _isPath;
  BOOL _isData;
  NSString *_imgName;
  NSArray *_searchPaths;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _textRect;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _textCoords;
  BOOL _disableAlpha;
  int _alignment;
  int _rowLength;
  CIFilter *_filter;
  SKTexture *_originalTexture;
  SKTextureCache *_textureCache;
  NSObject<OS_dispatch_queue> *_textureSyncQueue;
}

@property (readonly, nonatomic) struct CGSize { double x0; double x1; } pixelSize;
@property (nonatomic) unsigned int textureTarget;
@property (nonatomic) BOOL isRotated;
@property (nonatomic) BOOL isFlipped;
@property (readonly, nonatomic) BOOL hasAlpha;
@property (nonatomic) int wrapMode;
@property (readonly, nonatomic) NSString *imageNameOrPath;
@property BOOL performFullCapture;
@property (readonly, nonatomic) BOOL isRepeatable;
@property (nonatomic) struct CGPoint { double x0; double x1; } cropScale;
@property (nonatomic) struct CGPoint { double x0; double x1; } cropOffset;
@property (copy, nonatomic) NSString *originalAtlasName;
@property (retain, nonatomic) SKTextureAtlas *rootAtlas;
@property (copy, nonatomic) NSString *subTextureName;
@property (readonly, nonatomic) unsigned int * alphaMap;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } alphaMapSize;
@property (nonatomic) BOOL needsExtrusionWorkaround;
@property (nonatomic) long long filteringMode;
@property (nonatomic) BOOL usesMipmaps;

/* class methods */
+ (void)_reloadTextureCacheForImageNamed:(id)named;
+ (id)_cachedTextureNames;
+ (id)compressedTextureWithData:(id)data;
+ (id)compressedTextureWithData:(id)data size:(struct CGSize { double x0; double x1; })size bitsPerPixel:(unsigned int)pixel hasAlpha:(BOOL)alpha;
+ (id)textureWithImagePath:(id)path;
+ (id)_textureByTransferingData:(char *)data size:(struct CGSize { double x0; double x1; })size;
+ (id)_textureByTransferingData:(char *)data size:(struct CGSize { double x0; double x1; })size rowLength:(unsigned int)length alignment:(unsigned int)alignment;
+ (id)_textureWithGLTextureId:(unsigned int)id size:(struct CGSize { double x0; double x1; })size;
+ (id)textureWithIOSurfaceID:(unsigned int)id width:(unsigned int)width height:(unsigned int)height format:(unsigned int)format;
+ (id)textureWithMetalTexture:(id)texture;
+ (BOOL)supportsSecureCoding;
+ (void)registerTextureCache:(id)cache forName:(id)name;
+ (id)lookupTextureCacheForName:(id)name;
+ (id)preloadQueue;
+ (void)preloadTextures:(id)textures withCompletionHandler:(id /* block */)handler;
+ (id)textureWithImageNamed:(id)named;
+ (id)textureWithImageNamed:(id)named rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
+ (id)textureWithRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect inTexture:(id)texture;
+ (id)textureVectorNoiseWithSmoothness:(double)smoothness size:(struct CGSize { double x0; double x1; })size;
+ (id)textureNoiseWithSmoothness:(double)smoothness size:(struct CGSize { double x0; double x1; })size grayscale:(BOOL)grayscale;
+ (id)textureWithCGImage:(struct CGImage *)cgimage pointSize:(struct CGSize { double x0; double x1; })size;
+ (id)textureWithCGImage:(struct CGImage *)cgimage;
+ (id)textureWithImage:(id)image;
+ (id)textureWithData:(id)data size:(struct CGSize { double x0; double x1; })size;
+ (id)textureWithData:(id)data size:(struct CGSize { double x0; double x1; })size flipped:(BOOL)flipped;
+ (id)textureWithData:(id)data size:(struct CGSize { double x0; double x1; })size rowLength:(unsigned int)length alignment:(unsigned int)alignment;
+ (id)_textureWithImageNamed:(id)named;

/* instance methods */
- (void)_setImageName:(id)name;
- (id)_copyImageData;
- (id)_generateNormalMap:(double)map contrast:(double)contrast multiPass:(unsigned long long)pass;
- (id)_initWithGLTextureId:(unsigned int)id size:(struct CGSize { double x0; double x1; })size;
- (int)glTextureId;
- (id)metalTexture;
- (struct CGImage *)_createCGImage;
- (int)_convert_jet_texture_format_to_ci_format:(unsigned int)_convert_jet_texture_format_to_ci_format;
- (struct CGImage *)_newTextureFromGLCache;
- (void)_savePngFromGLCache:(id)glcache;
- (id)initWithBackingTetxure:(struct shared_ptr<jet_texture> { struct jet_texture * x0; struct __shared_weak_count * x1; })tetxure;
- (id)initWithBackingTetxure:(struct shared_ptr<jet_texture> { struct jet_texture * x0; struct __shared_weak_count * x1; })tetxure logicalWidth:(float)width height:(float)height;
- (struct shared_ptr<jet_texture> { struct jet_texture * x0; struct __shared_weak_count * x1; })_backingTexture;
- (void)setIsData:(BOOL)data;
- (id)imgName;
- (id)_textureCache;
- (BOOL)_needsExtrusionWorkaround;
- (struct CGImage *)CGImage;
- (id)textureByGeneratingNormalMap;
- (id)textureByGeneratingNormalMapWithSmoothness:(double)smoothness contrast:(double)contrast;
- (void)commonInit;
- (void)setTextureDimension:(const struct CGSize { double x0; double x1; } *)dimension withPixelSize:(const struct CGSize { double x0; double x1; } *)size;
- (BOOL)loadImageDataFromPVRGZData:(id)pvrgzdata;
- (BOOL)loadImageDataFromPVRData:(id)pvrdata;
- (void)loadImageDataFromCGImage:(struct CGImage *)cgimage pointsSize:(struct CGSize { double x0; double x1; })size;
- (void)preloadWithCompletionHandler:(id /* block */)handler;
- (void)initTextureCacheWithImageData;
- (void)loadImageData;
- (id)initWithImageNamed:(id)named;
- (id)init;
- (id)initWithImagePath:(id)path;
- (id)initWithCoder:(id)coder;
- (BOOL)isEqualToTexture:(id)texture;
- (void)encodeWithCoder:(id)coder;
- (id)copyWithZone:(struct _NSZone *)zone;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })textureRect;
- (struct CGSize { double x0; double x1; })size;
- (id)textureByApplyingCIFilter:(id)cifilter;
- (id)description;
- (void)_ensureImageData;
- (void)dealloc;
@end

#endif /* SKTexture_h */
