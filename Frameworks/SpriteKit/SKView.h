//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 50.0.6.0.0
//
#ifndef SKView_h
#define SKView_h
@import Foundation;

#include "UIView.h"
#include "SKDisplayLink.h"
#include "SKScene.h"
#include "SKTransition.h"

@class CAEAGLLayer, CAMetalLayer, NSData, NSMapTable, NSMutableDictionary;
@protocol OS_dispatch_queue, OS_dispatch_semaphore, SKViewDelegate, {shared_ptr<jet_fence>="__ptr_"^{jet_fence}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<jet_framebuffer>="__ptr_"^{jet_framebuffer}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<jet_texture>="__ptr_"^{jet_texture}"__cntrl_"^{__shared_weak_count}};

@interface SKView : UIView {
  /* instance variables */
  struct SKCStats { undefined * *_vptr$SKCStats; double frameBeginTime; double frameDuration; double baseTime; double currentTime; int frameCount; struct { double beginTime; double duration; } clientUpdate; struct { double beginTime; double duration; } update; struct { double beginTime; double duration; int bodyCount; } physics; struct { double beginTime; double duration; int constraintCount; } constraints; struct { double beginTime; double duration; int opCount; int quadCount; int nodeTraversalCount; int sknodeTraversalCount; int nodeRenderCount; int drawCallCount; int passCount; int maxBatchElementCount; } render; } _currentStats;
  struct SKCStats { undefined * *_vptr$SKCStats; double frameBeginTime; double frameDuration; double baseTime; double currentTime; int frameCount; struct { double beginTime; double duration; } clientUpdate; struct { double beginTime; double duration; } update; struct { double beginTime; double duration; int bodyCount; } physics; struct { double beginTime; double duration; int constraintCount; } constraints; struct { double beginTime; double duration; int opCount; int quadCount; int nodeTraversalCount; int sknodeTraversalCount; int nodeRenderCount; int drawCallCount; int passCount; int maxBatchElementCount; } render; } _nextStats;
  struct SKCStats { undefined * *_vptr$SKCStats; double frameBeginTime; double frameDuration; double baseTime; double currentTime; int frameCount; struct { double beginTime; double duration; } clientUpdate; struct { double beginTime; double duration; } update; struct { double beginTime; double duration; int bodyCount; } physics; struct { double beginTime; double duration; int constraintCount; } constraints; struct { double beginTime; double duration; int opCount; int quadCount; int nodeTraversalCount; int sknodeTraversalCount; int nodeRenderCount; int drawCallCount; int passCount; int maxBatchElementCount; } render; } _frameStats;
  void * _renderer;
   _viewScale;
   _viewTranslation;
  struct shared_ptr<jet_framebuffer> { struct jet_framebuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _framebuffer;
  struct shared_ptr<jet_texture> { struct jet_texture *__ptr_; struct __shared_weak_count *__cntrl_; } _frameBufferColorTexture;
  struct shared_ptr<jet_texture> { struct jet_texture *__ptr_; struct __shared_weak_count *__cntrl_; } _frameBufferDepthStencilTexture;
  unsigned int _colorRenderBuffer;
  unsigned int _depthStencilRenderBuffer;
  struct shared_ptr<jet_fence> { struct jet_fence *__ptr_; struct __shared_weak_count *__cntrl_; } _renderFence;
  CAMetalLayer *_metalLayer;
  CAEAGLLayer *_eaglLayer;
  BOOL _needsInitialUpdate;
  BOOL _didRunOnce;
  BOOL _viewFramebufferIsValid;
   _viewFramebufferPixelSize;
  BOOL _isBackgrounded;
  BOOL _priorResignActivePausedState;
  SKDisplayLink *_displayLink;
  NSObject<OS_dispatch_queue> *_updateQueue;
  double _timePreviousUpdate;
  BOOL _prefersLowPowerGPU;
  BOOL _usesAsyncUpdateQueue;
  BOOL _hasRenderedOnce;
  BOOL _hasRenderedForCurrentUpdate;
  BOOL _disableInput;
  BOOL _mouseIsDown;
  BOOL _rightMouseIsDown;
  SKTransition *_transition;
  SKScene *_nextScene;
  NSData *_spriteArrayHint;
  NSMutableDictionary *_viewRenderOptions;
  NSMapTable *_touchMap;
  float _prevBackingScaleFactor;
  id /* block */ _dynamicRenderBlock;
  NSObject<OS_dispatch_queue> *_renderQueue;
  NSObject<OS_dispatch_semaphore> *_renderSemaphore;
  int _queuedFrameCount;
  double _prevVsyncRenderTime;
  double _prevRenderTime;
}

@property (readonly, nonatomic) struct CGSize { double x0; double x1; } pixelSize;
@property void * _layerBackedRenderer;
@property (retain, nonatomic) NSMutableDictionary *_info;
@property (readonly) NSMutableDictionary *options;
@property (nonatomic) double physicsDebugStrokeWidth;
@property (nonatomic) BOOL disableStencilBuffers;
@property (nonatomic) BOOL paused;
@property (nonatomic) BOOL showsFPS;
@property (nonatomic) BOOL showsDrawCount;
@property (nonatomic) BOOL showsNodeCount;
@property (nonatomic) BOOL showsQuadCount;
@property (nonatomic) BOOL showsPhysics;
@property (nonatomic) BOOL showsFields;
@property (nonatomic) BOOL asynchronous;
@property (nonatomic) BOOL allowsTransparency;
@property (nonatomic) BOOL ignoresSiblingOrder;
@property (nonatomic) BOOL shouldCullNonVisibleNodes;
@property (nonatomic) long long preferredFramesPerSecond;
@property (nonatomic) BOOL disableDepthStencilBuffer;
@property (weak, nonatomic) NSObject<SKViewDelegate> *delegate;
@property (nonatomic) long long frameInterval;
@property (nonatomic) float preferredFrameRate;
@property (readonly, nonatomic) SKScene *scene;

/* class methods */
+ (BOOL)supportsSecureCoding;
+ (Class)layerClass;
+ (void)_setCurrentTime:(double)time;
+ (id)debugHierarchyAdditionalGroupingIDs;
+ (id)debugHierarchyObjectsInGroupWithID:(id)id onObject:(id)object outOptions:(id *)options;
+ (id)debugHierarchyPropertyDescriptions;
+ (id)debugHierarchyValueForPropertyWithName:(id)name onObject:(id)object outOptions:(id *)options outError:(id *)error;

/* instance methods */
- (void)setDynamicRenderBlock:(id /* block */)block;
- (void)set_showsGPUStats:(BOOL)gpustats;
- (BOOL)_showsGPUStats;
- (void)set_showsCPUStats:(BOOL)cpustats;
- (BOOL)_showsCPUStats;
- (void)_showAllStats;
- (id)archiveToFile:(id)file;
- (id)captureToFile:(id)file;
- (void)debugPrint;
- (void)remakeFramebuffer;
- (void)_ensureRenderer;
- (void)_commonInit;
- (void)CBApplicationWillResignActive;
- (void)CBApplicationDidBecomeActive;
- (void)renderForTime:(double)time shouldBlock:(BOOL)block;
- (BOOL)_shouldRenderForTime:(double)time;
- (void)_vsyncRenderForTime:(double)time preRender:(id /* block */)render postRender:(id /* block */)render;
- (void)_renderSynchronouslyForTime:(double)time preRender:(id /* block */)render postRender:(id /* block */)render withMTLScheduleHandler:(id /* block */)handler;
- (void)_renderSynchronouslyForTime:(double)time preRender:(id /* block */)render postRender:(id /* block */)render;
- (void)_renderToIOSurfaceID:(unsigned int)id scaleFactor:(float)factor asynchronous:(BOOL)asynchronous preRender:(id /* block */)render postRender:(id /* block */)render;
- (void)_renderToIOSurfaceID:(unsigned int)id scaleFactor:(float)factor asynchronous:(BOOL)asynchronous waitOnFence:(BOOL)fence preRender:(id /* block */)render postRender:(id /* block */)render;
- (void)_dispatchRenderToIOSurfaceID:(unsigned int)id async:(BOOL)async onQueue:(id)queue waitOnFence:(BOOL)fence preRender:(id /* block */)render postRender:(id /* block */)render;
- (void)overrideMetalCommandQueue:(id)queue;
- (BOOL)isAsynchronous;
- (void)set_usesAsyncUpdateQueue:(BOOL)queue;
- (BOOL)_usesAsyncUpdateQueue;
- (void)setUpRenderCallback;
- (void)startRenderCallbacks;
- (void)stopRenderCallbacks;
- (BOOL)_renderUpdateEnabled;
- (void)set_renderUpdateEnabled:(BOOL)enabled;
- (void)_endFrameStats;
- (void)touchesBegan:(id)began withEvent:(id)event;
- (void)touchesMoved:(id)moved withEvent:(id)event;
- (void)touchesEnded:(id)ended withEvent:(id)event;
- (void)touchesCancelled:(id)cancelled withEvent:(id)event;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toScene:(id)scene;
- (struct CGPoint { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point fromScene:(id)scene;
- (void)dealloc;
- (void)remakeFramebuffer:(double)framebuffer;
- (double)alphaValue;
- (BOOL)isOpaque;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)presentScene:(id)scene;
- (void)presentScene:(id)scene transition:(id)transition;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)_reshape;
- (void)_update:(double)_update;
- (id)textureFromNode:(id)node;
- (id)textureFromNode:(id)node withOptions:(id)options;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame updateQueue:(id)queue;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (BOOL)isEqualToView:(id)view;
- (void)onInit;
- (void)runOnce;
- (void)writeContentsToPNG:(id)png;
- (unsigned long long)_getEffectivePreferredFramesPerSecond;
- (void)renderToIOSurfaceID:(unsigned int)id withScaleFactor:(double)factor;
- (void)_setUpdateQueue:(id)queue;
- (id)textureFromNode:(id)node crop:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })crop;
- (void *)chooseViewRenderer;
- (struct shared_ptr<jet_framebuffer> { struct jet_framebuffer * x0; struct __shared_weak_count * x1; })nextFramebuffer;
- (void *)getRootNode;
- (1)getViewport;
- (struct { x0[4] })getViewTransform;
- (void)willRenderContent;
- (void)renderContent;
- (void)_renderContent;
- (id)getRenderOptions;
- (BOOL)hasValidViewFramebuffer;
- (void)notifyWillRenderContent;
- (double)_viewScale;
- (void)set_viewScale:(double)scale;
- (struct CGPoint { double x0; double x1; })_viewTranslation;
- (void)set_viewTranslation:(struct CGPoint { double x0; double x1; })translation;
- (id)snapshot;
- (float)_getViewContentsScale;
- (BOOL)isPaused;
- (double)_fps;
- (int)_spriteRenderCount;
- (int)_spriteSubmitCount;
- (id)_getPerformanceStats;
- (void)_searchForFocusRegionsInContext:(id)context;
- (id)_focusedItemRegionContainer;
- (long long)_preferredFocusMovementStyle;
@end

#endif /* SKView_h */
