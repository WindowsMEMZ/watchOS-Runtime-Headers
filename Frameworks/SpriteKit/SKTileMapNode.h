//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 50.0.6.0.0
//
#ifndef SKTileMapNode_h
#define SKTileMapNode_h
@import Foundation;

#include "SKNode.h"
#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"
#include "SKShader.h"
#include "SKTileSet.h"

@class NSDictionary, NSString, UIColor;

@interface SKTileMapNode : SKNode<NSCopying, NSSecureCoding> {
  /* instance variables */
  void * _skcTileMapNode;
   _isoOrigin;
   _isoColumnVector;
   _isoRowVector;
  float _isoColumnWidth;
  float _isoRowHeight;
  float _isoHeightScalar;
  float _hexRadius;
}

@property (retain, nonatomic) NSString *tileSetName;
@property (nonatomic) unsigned long long numberOfColumns;
@property (nonatomic) unsigned long long numberOfRows;
@property (nonatomic) struct CGSize { double x0; double x1; } tileSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } mapSize;
@property (retain, nonatomic) SKTileSet *tileSet;
@property (nonatomic) double colorBlendFactor;
@property (retain, nonatomic) UIColor *color;
@property (nonatomic) long long blendMode;
@property (nonatomic) struct CGPoint { double x0; double x1; } anchorPoint;
@property (retain, nonatomic) SKShader *shader;
@property (copy, @dynamic, nonatomic) NSDictionary *attributeValues;
@property (nonatomic) unsigned int lightingBitMask;
@property (nonatomic) BOOL enableAutomapping;

/* class methods */
+ (BOOL)supportsSecureCoding;
+ (id)tileMapNodeWithTileSet:(id)set columns:(unsigned long long)columns rows:(unsigned long long)rows tileSize:(struct CGSize { double x0; double x1; })size;
+ (id)tileMapNodeWithTileSet:(id)set columns:(unsigned long long)columns rows:(unsigned long long)rows tileSize:(struct CGSize { double x0; double x1; })size fillWithTileGroup:(id)group;
+ (id)tileMapNodeWithTileSet:(id)set columns:(unsigned long long)columns rows:(unsigned long long)rows tileSize:(struct CGSize { double x0; double x1; })size tileGroupLayout:(id)layout;
+ (id)debugHierarchyPropertyDescriptions;
+ (id)debugHierarchyValueForPropertyWithName:(id)name onObject:(id)object outOptions:(id *)options outError:(id *)error;

/* instance methods */
- (void *)_makeBackingNode;
- (void)_didMakeBackingNode;
- (double)alpha;
- (void)setAlpha:(double)alpha;
- (void)commonInit;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (BOOL)isEqualToNode:(id)node;
- (void)setRawTiles:(unsigned int *)tiles rows:(unsigned long long)rows columns:(unsigned long long)columns;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)setStartData:(unsigned long long)data rows:(unsigned long long)rows tileSize:(struct CGSize { double x0; double x1; })size tileSet:(id)set;
- (id)init;
- (id)initWithTileSet:(id)set columns:(unsigned long long)columns rows:(unsigned long long)rows tileSize:(struct CGSize { double x0; double x1; })size;
- (id)initWithTileSet:(id)set columns:(unsigned long long)columns rows:(unsigned long long)rows tileSize:(struct CGSize { double x0; double x1; })size fillWithTileGroup:(id)group;
- (id)initWithTileSet:(id)set columns:(unsigned long long)columns rows:(unsigned long long)rows tileSize:(struct CGSize { double x0; double x1; })size tileGroupLayout:(id)layout;
- (void)dealloc;
- (unsigned int)getTileIDWithTileGroup:(id)group andTileDefinition:(id)definition;
- (void)fillWithTileDefinition:(id)definition;
- (void)fillWithTileGroup:(id)group;
- (id)tileDefinitionAtColumn:(unsigned long long)column row:(unsigned long long)row;
- (id)tileGroupAtColumn:(unsigned long long)column row:(unsigned long long)row;
- (void)setTileGroup:(id)group forColumn:(unsigned long long)column row:(unsigned long long)row;
- (void)setTileGroup:(id)group andTileDefinition:(id)definition forColumn:(unsigned long long)column row:(unsigned long long)row;
- (void)setTileGroupWithoutUpdate:(id)update forColumn:(unsigned long long)column row:(unsigned long long)row;
- (void)setTileGroupWithoutUpdate:(id)update tileDefinition:(id)definition forColumn:(unsigned long long)column row:(unsigned long long)row;
- (void)setTileGroup:(id)group forTileIndicies:(id)indicies;
- (void)setTileGroup:(id)group andTileDefinition:(id)definition forTileIndicies:(id)indicies;
- (void)validateAllTiles;
- (void)fillArrayWithTiles:(unsigned int *)tiles;
- (void)fillArray:(unsigned int *)array withTilesFromColumn:(unsigned long long)column row:(unsigned long long)row forWidth:(unsigned long long)width height:(unsigned long long)height;
- (void)setTilesFromArray:(unsigned int *)array;
- (void)setTilesFromArray:(unsigned int *)array fromColumn:(unsigned long long)column row:(unsigned long long)row forWidth:(unsigned long long)width height:(unsigned long long)height;
- (void)clearModifiedTileTracking;
- (void)getTileModifiedData:(long long *)data outMinRowModified:(long long *)modified outMaxColumnModified:(long long *)modified outmaxRowModified:(long long *)modified;
- (void)removeAllTiles;
- (void)rebuildTileSprites;
- (void)updateTileDefinitionWithoutAutomappingAtX:(unsigned long long)x y:(unsigned long long)y;
- (void)updateTileGroupsAtX:(unsigned long long)x y:(unsigned long long)y;
- (void)setColumns:(unsigned long long)columns andRows:(long long)rows;
- (void)calculateSize;
- (unsigned long long)tileColumnIndexFromPosition:(struct CGPoint { double x0; double x1; })position;
- (unsigned long long)tileRowIndexFromPosition:(struct CGPoint { double x0; double x1; })position;
- (struct CGPoint { double x0; double x1; })centerOfTileAtColumn:(unsigned long long)column row:(unsigned long long)row;
- (id)createTileStampFromColumn:(unsigned long long)column row:(unsigned long long)row withWidth:(unsigned long long)width height:(unsigned long long)height addToTileSet:(BOOL)set;
- (void)applyTileStamp:(id)stamp inColumn:(long long)column row:(long long)row;
- (id)tileDefinitionForTileID:(unsigned int)id;
- (BOOL)shouldUnarchiveTileSet;
- (void)forceRedraw;
- (id)valueForAttributeNamed:(id)named;
- (void)setValue:(id)value forAttributeNamed:(id)named;
@end

#endif /* SKTileMapNode_h */
