//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef WKContentView_h
#define WKContentView_h
@import Foundation;

#include "WKApplicationStateTrackingView.h"
#include "UIGestureRecognizerDelegate-Protocol.h"
#include "UITextAutoscrolling-Protocol.h"
#include "UITextInputDelegate-Protocol.h"
#include "UITextInputMultiDocument-Protocol.h"
#include "UITextInputPrivate-Protocol.h"
#include "UITextInputSuggestionDelegate-Protocol.h"
#include "UITextInputTokenizer-Protocol.h"
#include "UIWKInteractionViewProtocol-Protocol.h"
#include "UIWebFormAccessoryDelegate-Protocol.h"
#include "WKActionSheetAssistantDelegate-Protocol.h"
#include "WKBrowsingContextController.h"
#include "WKDeferringGestureRecognizerDelegate-Protocol.h"
#include "WKFileUploadPanelDelegate-Protocol.h"
#include "WKFormSelectControl.h"
#include "WKKeyboardScrollViewAnimatorDelegate-Protocol.h"
#include "WKTouchActionGestureRecognizerDelegate-Protocol.h"
#include "WKTouchEventsGestureRecognizer.h"
#include "WKTouchEventsGestureRecognizerDelegate-Protocol.h"
#include "_UITextInputTranslationSupport-Protocol.h"
#include "_WKWebViewPrintProvider-Protocol.h"

@class NSArray, NSDictionary, NSIndexSet, NSString, NSUndoManager, RTIInputSystemSourceSession, UIColor, UIGestureRecognizer, UIImage, UIInputContextHistory, UITapGestureRecognizer, UITextInputAssistantItem, UITextInputPasswordRules, UITextInputTraits, UITextInteractionAssistant, UITextPosition, UITextRange, UIView, UIWKTextInteractionAssistant, UIWebFormAccessory;
@protocol UIView<WKFormControl, {BlockPtr<void ()>="m_block"@?}, {BlockPtr<void (UIWKAutocorrectionContext *)>="m_block"@?}, {BlockPtr<void (WebEvent *, bool)>="m_block"@?}, {CompletionHandler<void ()>="m_function"{Function<void ()>="m_callableWrapper"{unique_ptr<WTF::Detail::CallableWrapperBase<void>, std::default_delete<WTF::Detail::CallableWrapperBase<void>>>="__ptr_"{__compressed_pair<WTF::Detail::CallableWrapperBase<void> *, std::default_delete<WTF::Detail::CallableWrapperBase<void>>>="__value_"^v}}}}, {CompletionHandler<void (WebCore::DOMPasteAccessResponse)>="m_function"{Function<void (WebCore::DOMPasteAccessResponse)>="m_callableWrapper"{unique_ptr<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse>, std::default_delete<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse>>>="__ptr_"{__compressed_pair<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse> *, std::default_delete<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse>>>="__value_"^v}}}}, {FocusedElementInformation="interactionRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"elementContext"{ElementContext="boundingRect"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"webPageIdentifier"{ObjectIdentifierGeneric<WebCore::PageIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}"documentIdentifier"{ProcessQualified<WTF::UUID>="m_object"{UUID="m_data"T}"m_processIdentifier"{ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}}"elementIdentifier"{ObjectIdentifierGeneric<WebCore::ElementIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}}"lastInteractionLocation"{IntPoint="m_x"i"m_y"i}"minimumScaleFactor"d"maximumScaleFactor"d"maximumScaleFactorIgnoringAlwaysScalable"d"nodeFontSize"d"hasNextNode"B"nextNodeRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"hasPreviousNode"B"previousNodeRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"isAutocorrect"B"isRTL"B"isMultiSelect"B"isReadOnly"B"allowsUserScaling"B"allowsUserScalingIgnoringAlwaysScalable"B"insideFixedPosition"B"autocapitalizeType"C"elementType"i"inputMode"C"enterKeyHint"C"formAction"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"selectOptions"{Vector<WebKit::OptionItem, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{OptionItem}"m_capacity"I"m_size"I}"selectedIndex"i"value"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"valueAsNumber"d"title"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"acceptsAutofilledLoginCredentials"B"isAutofillableUsernameField"B"representingPageURL"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_hasOpaquePath"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"autofillFieldName"C"nonAutofillCredentialType"B"placeholder"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"label"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"ariaLabel"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"hasSuggestions"B"isFocusingWithDataListDropdown"B"colorValue"{Color="m_colorAndFlags"Q}"suggestedColors"{Vector<WebCore::Color, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{Color}"m_capacity"I"m_size"I}"hasEverBeenPasswordField"B"shouldSynthesizeKeyEventsForEditing"B"isSpellCheckingEnabled"B"shouldAvoidResizingWhenInputViewBoundsChange"B"shouldAvoidScrollingWhenFocusedContentIsVisible"B"shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation"B"isFocusingWithValidationMessage"B"preventScroll"B"identifier"{MonotonicObjectIdentifier<WebKit::FocusedElementInformationIdentifierType>="m_identifier"Q}"containerScrollingNodeID"Q"frameID"{ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>>="m_object"{ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}"m_processIdentifier"{ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}}}, {FrameInfoData="isMainFrame"B"frameType"B"request"{ResourceRequest="m_requestData"{RequestData="m_url"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_hasOpaquePath"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"m_firstPartyForCookies"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_hasOpaquePath"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"m_timeoutInterval"d"m_httpMethod"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_httpHeaderFields"{HTTPHeaderMap="m_commonHeaders"{Vector<WebCore::HTTPHeaderMap::CommonHeader, 0UL, WTF::CrashOnOverflow, 6UL, WTF::FastMalloc>="m_buffer"^{CommonHeader}"m_capacity"I"m_size"I}"m_uncommonHeaders"{Vector<WebCore::HTTPHeaderMap::UncommonHeader, 0UL, WTF::CrashOnOverflow, 0UL, WTF::FastMalloc>="m_buffer"^{UncommonHeader}"m_capacity"I"m_size"I}}"m_responseContentDispositionEncodingFallbackArray"{Vector<WTF::String, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{String}"m_capacity"I"m_size"I}"m_cachePolicy"C"m_sameSiteDisposition"C"m_priority"C"m_requester"C"m_isTopSite"b1"m_allowCookies"b1"m_isAppInitiated"b1"m_privacyProxyFailClosedForUnreachableNonMainHosts"b1"m_useAdvancedPrivacyProtections"b1}"m_initiatorIdentifier"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_cachePartition"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_httpBody"{RefPtr<WebCore::FormData, WTF::RawPtrTraits<WebCore::FormData>, WTF::DefaultRefDerefTraits<WebCore::FormData>>="m_ptr"^{FormData}}"m_inspectorInitiatorNodeIdentifier"{optional<int>=""(?="__null_state_"c"__val_"i)"__engaged_"B}"m_resourceRequestUpdated"b1"m_platformRequestUpdated"b1"m_resourceRequestBodyUpdated"b1"m_platformRequestBodyUpdated"b1"m_hiddenFromInspector"b1"m_nsRequest"{RetainPtr<NSURLRequest>="m_ptr"^v}}"securityOrigin"{SecurityOriginData="m_data"{variant<WebCore::SecurityOriginData::Tuple, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>>>="__impl_"{__impl<WebCore::SecurityOriginData::Tuple, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>>>="__data"(__union<std::__variant_detail::_Trait::_Available, 0UL, WebCore::SecurityOriginData::Tuple, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>>>="__dummy"c"__head"{__alt<0UL, WebCore::SecurityOriginData::Tuple>="__value"{Tuple="protocol"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"host"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"port"{optional<unsigned short>=""(?="__null_state_"c"__val_"S)"__engaged_"B}}}"__tail"(__union<std::__variant_detail::_Trait::_Available, 1UL, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>>>="__dummy"c"__head"{__alt<1UL, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>>>="__value"{ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>>="m_object"{ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>="m_identifier"Q}"m_processIdentifier"{ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}}}"__tail"(__union<std::__variant_detail::_Trait::_Available, 2UL>=)))"__index"I}}}"frameName"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"frameID"{ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>>="m_object"{ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}"m_processIdentifier"{ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}}"parentFrameID"{optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>>>=""(?="__null_state_"c"__val_"{ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>>="m_object"{ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}"m_processIdentifier"{ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}})"__engaged_"B}"processID"i}, {InteractionInformationAtPosition="request"{InteractionInformationRequest="point"{IntPoint="m_x"i"m_y"i}"includeSnapshot"B"includeLinkIndicator"B"includeCaretContext"B"includeHasDoubleClickHandler"B"includeImageData"B"gatherAnimations"B"linkIndicatorShouldHaveLegacyMargins"B"disallowUserAgentShadowContent"B}"canBeValid"B"nodeAtPositionHasDoubleClickHandler"{optional<bool>=""(?="__null_state_"c"__val_"B)"__engaged_"B}"selectability"C"isSelected"B"prefersDraggingOverTextSelection"B"isNearMarkedText"B"touchCalloutEnabled"B"isLink"B"isImage"B"isAttachment"B"isAnimatedImage"B"isAnimating"B"canShowAnimationControls"B"isPausedVideo"B"isElement"B"isContentEditable"B"containerScrollingNodeID"Q"preventTextInteraction"B"elementContainsImageOverlay"B"shouldNotUseIBeamInEditableContent"B"isImageOverlayText"B"isVerticalWritingMode"B"adjustedPointForNodeRespondingToClickEvents"{FloatPoint="m_x"f"m_y"f}"url"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_hasOpaquePath"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"imageURL"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_hasOpaquePath"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"imageMIMEType"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"title"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"idAttribute"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"bounds"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"image"{RefPtr<WebKit::ShareableBitmap, WTF::RawPtrTraits<WebKit::ShareableBitmap>, WTF::DefaultRefDerefTraits<WebKit::ShareableBitmap>>="m_ptr"^{ShareableBitmap}}"textBefore"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"textAfter"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"caretLength"f"lineCaretExtent"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"cursor"{optional<WebCore::Cursor>=""(?="__null_state_"c"__val_"{Cursor="m_type"i"m_image"{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>="m_ptr"^{Image}}"m_hotSpot"{IntPoint="m_x"i"m_y"i}"m_platformCursor"^v})"__engaged_"B}"linkIndicator"{TextIndicatorData="selectionRectInRootViewCoordinates"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"textBoundingRectInRootViewCoordinates"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"contentImageWithoutSelectionRectInRootViewCoordinates"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"textRectsInBoundingRectCoordinates"{Vector<WebCore::FloatRect, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{FloatRect}"m_capacity"I"m_size"I}"contentImageScaleFactor"f"contentImageWithHighlight"{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>="m_ptr"^{Image}}"contentImageWithoutSelection"{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>="m_ptr"^{Image}}"contentImage"{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>="m_ptr"^{Image}}"estimatedBackgroundColor"{Color="m_colorAndFlags"Q}"presentationTransition"C"options"{OptionSet<WebCore::TextIndicatorOption>="m_storage"S}}"elementContext"{optional<WebCore::ElementContext>=""(?="__null_state_"c"__val_"{ElementContext="boundingRect"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"webPageIdentifier"{ObjectIdentifierGeneric<WebCore::PageIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}"documentIdentifier"{ProcessQualified<WTF::UUID>="m_object"{UUID="m_data"T}"m_processIdentifier"{ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}}"elementIdentifier"{ObjectIdentifierGeneric<WebCore::ElementIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}})"__engaged_"B}"hostImageOrVideoElementContext"{optional<WebCore::ElementContext>=""(?="__null_state_"c"__val_"{ElementContext="boundingRect"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"webPageIdentifier"{ObjectIdentifierGeneric<WebCore::PageIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}"documentIdentifier"{ProcessQualified<WTF::UUID>="m_object"{UUID="m_data"T}"m_processIdentifier"{ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}}"elementIdentifier"{ObjectIdentifierGeneric<WebCore::ElementIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}})"__engaged_"B}}, {Lock="m_byte"{Atomic<unsigned char>="value"{atomic<unsigned char>="__a_"{__cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>>="__a_value"AC}}}}, {MonotonicObjectIdentifier<WebKit::TransactionIDType>="m_identifier"Q}, {ObjectIdentifierGeneric<IPC::AsyncReplyIDType, WTF::ObjectIdentifierThreadSafeAccessTraits>="m_identifier"Q}, {ObjectIdentifierGeneric<WebKit::TapIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>="m_identifier"Q}, {OptionSet<WebKit::InputViewUpdateDeferralSource>="m_storage"C}, {OptionSet<WebKit::SuppressSelectionAssistantReason>="m_storage"C}, {RefPtr<WebCore::TextIndicator, WTF::RawPtrTraits<WebCore::TextIndicator>, WTF::DefaultRefDerefTraits<WebCore::TextIndicator>>="m_ptr"^{TextIndicator}}, {RefPtr<WebKit::RevealFocusedElementDeferrer, WTF::RawPtrTraits<WebKit::RevealFocusedElementDeferrer>, WTF::DefaultRefDerefTraits<WebKit::RevealFocusedElementDeferrer>>="m_ptr"^{RevealFocusedElementDeferrer}}, {RefPtr<WebKit::WebPageProxy, WTF::RawPtrTraits<WebKit::WebPageProxy>, WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>="m_ptr"^{WebPageProxy}}, {RetainPtr<NSArray<UITextSuggestion *>>="m_ptr"^v}, {RetainPtr<NSDictionary>="m_ptr"^v}, {RetainPtr<NSMutableSet>="m_ptr"^v}, {RetainPtr<NSObject<WKFormPeripheral>>="m_ptr"^v}, {RetainPtr<NSString>="m_ptr"^v}, {RetainPtr<NSUndoManager>="m_ptr"^v}, {RetainPtr<PUICQuickboardController>="m_ptr"^v}, {RetainPtr<PUICQuickboardViewController>="m_ptr"^v}, {RetainPtr<UIGestureRecognizer>="m_ptr"^v}, {RetainPtr<UILongPressGestureRecognizer>="m_ptr"^v}, {RetainPtr<UINavigationController>="m_ptr"^v}, {RetainPtr<UISwipeGestureRecognizer>="m_ptr"^v}, {RetainPtr<UITapGestureRecognizer>="m_ptr"^v}, {RetainPtr<UITextInputTraits>="m_ptr"^v}, {RetainPtr<UIView<WKFormControl>>="m_ptr"^v}, {RetainPtr<UIView>="m_ptr"^v}, {RetainPtr<UIWKTextInteractionAssistant>="m_ptr"^v}, {RetainPtr<UIWebFormAccessory>="m_ptr"^v}, {RetainPtr<WKActionSheetAssistant>="m_ptr"^v}, {RetainPtr<WKBrowsingContextController>="m_ptr"^v}, {RetainPtr<WKDeferringGestureRecognizer>="m_ptr"^v}, {RetainPtr<WKFileUploadPanel>="m_ptr"^v}, {RetainPtr<WKFocusedFormControlView>="m_ptr"^v}, {RetainPtr<WKFormInputSession>="m_ptr"^v}, {RetainPtr<WKHighlightLongPressGestureRecognizer>="m_ptr"^v}, {RetainPtr<WKInspectorHighlightView>="m_ptr"^v}, {RetainPtr<WKInspectorIndicationView>="m_ptr"^v}, {RetainPtr<WKInspectorNodeSearchGestureRecognizer>="m_ptr"^v}, {RetainPtr<WKKeyboardScrollViewAnimator>="m_ptr"^v}, {RetainPtr<WKQuirkyNSUndoManager>="m_ptr"^v}, {RetainPtr<WKSyntheticTapGestureRecognizer>="m_ptr"^v}, {RetainPtr<WKTargetedPreviewContainer>="m_ptr"^v}, {RetainPtr<WKTextRange>="m_ptr"^v}, {RetainPtr<WKTouchActionGestureRecognizer>="m_ptr"^v}, {RetainPtr<WKTouchEventsGestureRecognizer>="m_ptr"^v}, {RetainPtr<WebTextIndicatorLayer>="m_ptr"^v}, {RetainPtr<_UIHighlightView>="m_ptr"^v}, {RetainPtr<_UILayerHostView>="m_ptr"^v}, {TapHighlightInformation="nodeHasBuiltInClickHandling"B"color"{Color="m_colorAndFlags"Q}"quads"{Vector<WebCore::FloatQuad, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{FloatQuad}"m_capacity"I"m_size"I}"topLeftRadius"{IntSize="m_width"i"m_height"i}"topRightRadius"{IntSize="m_width"i"m_height"i}"bottomLeftRadius"{IntSize="m_width"i"m_height"i}"bottomRightRadius"{IntSize="m_width"i"m_height"i}}, {Vector<WTF::BlockPtr<void ()>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^v"m_capacity"I"m_size"I}, {Vector<WTF::RetainPtr<NSURL>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^v"m_capacity"I"m_size"I}, {Vector<bool, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^B"m_capacity"I"m_size"I}, {Vector<std::optional<std::pair<WebKit::InteractionInformationRequest, WTF::BlockPtr<void (WebKit::InteractionInformationAtPosition)>>>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^v"m_capacity"I"m_size"I}, {WKAutoCorrectionData="font"{RetainPtr<UIFont>="m_ptr"^v}"textFirstRect"{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}"textLastRect"{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}}, {WKSelectionDrawingInfo="type"i"caretRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"caretColor"{Color="m_colorAndFlags"Q}"selectionGeometries"{Vector<WebCore::SelectionGeometry, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{SelectionGeometry}"m_capacity"I"m_size"I}"selectionClipRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}}, {WeakObjCPtr<UIScrollView>="m_weakReference"@}, {WeakObjCPtr<WKDataListSuggestionsControl>="m_weakReference"@}, {WeakObjCPtr<WKWebView>="m_weakReference"@}, {WeakObjCPtr<id<UITextInputDelegate>>="m_weakReference"@}, {WebAutocorrectionContext="contextBefore"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"markedText"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"selectedText"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"contextAfter"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"markedTextRange"{EditingRange="location"Q"length"Q}}, {optional<WTF::HashSet<WTF::RetainPtr<WKDeferringGestureRecognizer>>>=""(?="__null_state_"c"__val_"{HashSet<WTF::RetainPtr<WKDeferringGestureRecognizer>, WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>, WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>, WTF::HashTableTraits>="m_impl"{HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>, WTF::RetainPtr<WKDeferringGestureRecognizer>, WTF::IdentityExtractor, WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>, WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>, WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>=""(?="m_table"^v"m_tableForLLDB"^I)}})"__engaged_"B}, {optional<WebCore::DOMPasteAccessCategory>=""(?="__null_state_"c"__val_"C)"__engaged_"B}, {optional<WebKit::InteractionInformationRequest>=""(?="__null_state_"c"__val_"{InteractionInformationRequest="point"{IntPoint="m_x"i"m_y"i}"includeSnapshot"B"includeLinkIndicator"B"includeCaretContext"B"includeHasDoubleClickHandler"B"includeImageData"B"gatherAnimations"B"linkIndicatorShouldHaveLegacyMargins"B"disallowUserAgentShadowContent"B})"__engaged_"B}, {optional<bool>=""(?="__null_state_"c"__val_"B)"__engaged_"B}, {optional<int>=""(?="__null_state_"c"__val_"i)"__engaged_"B}, {unique_ptr<WebKit::GestureRecognizerConsistencyEnforcer, std::default_delete<WebKit::GestureRecognizerConsistencyEnforcer>>="__ptr_"{__compressed_pair<WebKit::GestureRecognizerConsistencyEnforcer *, std::default_delete<WebKit::GestureRecognizerConsistencyEnforcer>>="__value_"^{GestureRecognizerConsistencyEnforcer}}}, {unique_ptr<WebKit::PageClientImpl, std::default_delete<WebKit::PageClientImpl>>="__ptr_"{__compressed_pair<WebKit::PageClientImpl *, std::default_delete<WebKit::PageClientImpl>>="__value_"^{PageClientImpl}}}, {unique_ptr<WebKit::SmartMagnificationController, std::default_delete<WebKit::SmartMagnificationController>>="__ptr_"{__compressed_pair<WebKit::SmartMagnificationController *, std::default_delete<WebKit::SmartMagnificationController>>="__value_"^{SmartMagnificationController}}};

@interface WKContentView : WKApplicationStateTrackingView<_WKWebViewPrintProvider, UIGestureRecognizerDelegate, UITextAutoscrolling, UITextInputMultiDocument, UITextInputPrivate, UIWebFormAccessoryDelegate, WKTouchEventsGestureRecognizerDelegate, UIWKInteractionViewProtocol, _UITextInputTranslationSupport, WKActionSheetAssistantDelegate, WKFileUploadPanelDelegate, WKKeyboardScrollViewAnimatorDelegate, WKDeferringGestureRecognizerDelegate, WKTouchActionGestureRecognizerDelegate> {
  /* instance variables */
  struct WeakObjCPtr<WKWebView> { id m_weakReference; } _webView;
  struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchStartDeferringGestureRecognizerForImmediatelyResettableGestures;
  struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchStartDeferringGestureRecognizerForDelayedResettableGestures;
  struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchStartDeferringGestureRecognizerForSyntheticTapGestures;
  struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchEndDeferringGestureRecognizerForImmediatelyResettableGestures;
  struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchEndDeferringGestureRecognizerForDelayedResettableGestures;
  struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchEndDeferringGestureRecognizerForSyntheticTapGestures;
  struct RetainPtr<WKDeferringGestureRecognizer> { void *m_ptr; } _touchMoveDeferringGestureRecognizer;
  struct optional<WTF::HashSet<WTF::RetainPtr<WKDeferringGestureRecognizer>>> { union { char __null_state_; struct HashSet<WTF::RetainPtr<WKDeferringGestureRecognizer>, WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>, WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>, WTF::HashTableTraits> { struct HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>, WTF::RetainPtr<WKDeferringGestureRecognizer>, WTF::IdentityExtractor, WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>, WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>, WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>> { union { void *m_table; unsigned int *m_tableForLLDB; } x0; } m_impl; } __val_; } x0; BOOL __engaged_; } _failedTouchStartDeferringGestures;
  BOOL _touchEventsCanPreventNativeGestures;
  struct RetainPtr<WKHighlightLongPressGestureRecognizer> { void *m_ptr; } _highlightLongPressGestureRecognizer;
  struct RetainPtr<UILongPressGestureRecognizer> { void *m_ptr; } _longPressGestureRecognizer;
  struct RetainPtr<WKSyntheticTapGestureRecognizer> { void *m_ptr; } _doubleTapGestureRecognizer;
  struct RetainPtr<UITapGestureRecognizer> { void *m_ptr; } _nonBlockingDoubleTapGestureRecognizer;
  struct RetainPtr<UITapGestureRecognizer> { void *m_ptr; } _doubleTapGestureRecognizerForDoubleClick;
  struct RetainPtr<UITapGestureRecognizer> { void *m_ptr; } _twoFingerDoubleTapGestureRecognizer;
  struct RetainPtr<UITapGestureRecognizer> { void *m_ptr; } _twoFingerSingleTapGestureRecognizer;
  struct RetainPtr<WKInspectorNodeSearchGestureRecognizer> { void *m_ptr; } _inspectorNodeSearchGestureRecognizer;
  struct RetainPtr<WKTouchActionGestureRecognizer> { void *m_ptr; } _touchActionGestureRecognizer;
  struct RetainPtr<UISwipeGestureRecognizer> { void *m_ptr; } _touchActionLeftSwipeGestureRecognizer;
  struct RetainPtr<UISwipeGestureRecognizer> { void *m_ptr; } _touchActionRightSwipeGestureRecognizer;
  struct RetainPtr<UISwipeGestureRecognizer> { void *m_ptr; } _touchActionUpSwipeGestureRecognizer;
  struct RetainPtr<UISwipeGestureRecognizer> { void *m_ptr; } _touchActionDownSwipeGestureRecognizer;
  struct OptionSet<WebKit::SuppressSelectionAssistantReason> { unsigned char m_storage; } _suppressSelectionAssistantReasons;
  struct RetainPtr<UITextInputTraits> { void *m_ptr; } _traits;
  struct RetainPtr<_UIHighlightView> { void *m_ptr; } _highlightView;
  struct RetainPtr<UIView> { void *m_ptr; } _interactionViewsContainerView;
  struct RetainPtr<WKTargetedPreviewContainer> { void *m_ptr; } _contextMenuHintContainerView;
  struct WeakObjCPtr<UIScrollView> { id m_weakReference; } _scrollViewForTargetedPreview;
  struct CGPoint { double x; double y; } _scrollViewForTargetedPreviewInitialOffset;
  struct RetainPtr<WKTargetedPreviewContainer> { void *m_ptr; } _dragPreviewContainerView;
  struct RetainPtr<WKTargetedPreviewContainer> { void *m_ptr; } _dropPreviewContainerView;
  struct RetainPtr<NSString> { void *m_ptr; } _markedText;
  struct RetainPtr<WKActionSheetAssistant> { void *m_ptr; } _actionSheetAssistant;
  struct RetainPtr<WKFormInputSession> { void *m_ptr; } _formInputSession;
  struct RetainPtr<WKFileUploadPanel> { void *m_ptr; } _fileUploadPanel;
  struct FrameInfoData { BOOL isMainFrame; BOOL frameType; struct ResourceRequest { struct RequestData { struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned int x :1 m_isValid; unsigned int x :1 m_protocolIsInHTTPFamily; unsigned int x :1 m_hasOpaquePath; unsigned int x :3 m_portLength; unsigned int x :26 m_schemeEnd; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } m_url; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_string; unsigned int x :1 m_isValid; unsigned int x :1 m_protocolIsInHTTPFamily; unsigned int x :1 m_hasOpaquePath; unsigned int x :3 m_portLength; unsigned int x :26 m_schemeEnd; unsigned int m_userStart; unsigned int m_userEnd; unsigned int m_passwordEnd; unsigned int m_hostEnd; unsigned int m_pathAfterLastSlash; unsigned int m_pathEnd; unsigned int m_queryEnd; } m_firstPartyForCookies; double m_timeoutInterval; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_httpMethod; struct HTTPHeaderMap { struct Vector<WebCore::HTTPHeaderMap::CommonHeader, 0UL, WTF::CrashOnOverflow, 6UL, WTF::FastMalloc> { struct CommonHeader *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_commonHeaders; struct Vector<WebCore::HTTPHeaderMap::UncommonHeader, 0UL, WTF::CrashOnOverflow, 0UL, WTF::FastMalloc> { struct UncommonHeader *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_uncommonHeaders; } m_httpHeaderFields; struct Vector<WTF::String, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct String *m_buffer; unsigned int m_capacity; unsigned int m_size; } m_responseContentDispositionEncodingFallbackArray; unsigned char m_cachePolicy; unsigned char m_sameSiteDisposition; unsigned char m_priority; unsigned char m_requester; unsigned int x :1 m_isTopSite; unsigned int x :1 m_allowCookies; unsigned int x :1 m_isAppInitiated; unsigned int x :1 m_privacyProxyFailClosedForUnreachableNonMainHosts; unsigned int x :1 m_useAdvancedPrivacyProtections; } m_requestData; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_initiatorIdentifier; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } m_cachePartition; struct RefPtr<WebCore::FormData, WTF::RawPtrTraits<WebCore::FormData>, WTF::DefaultRefDerefTraits<WebCore::FormData>> { struct FormData *m_ptr; } m_httpBody; struct optional<int> { union { char __null_state_; int __val_; } x0; BOOL __engaged_; } m_inspectorInitiatorNodeIdentifier; unsigned int x :1 m_resourceRequestUpdated; unsigned int x :1 m_platformRequestUpdated; unsigned int x :1 m_resourceRequestBodyUpdated; unsigned int x :1 m_platformRequestBodyUpdated; unsigned int x :1 m_hiddenFromInspector; struct RetainPtr<NSURLRequest> { void *m_ptr; } m_nsRequest; } request; struct SecurityOriginData { struct variant<WebCore::SecurityOriginData::Tuple, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>>> { struct __impl<WebCore::SecurityOriginData::Tuple, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>>> { union __union<std::__variant_detail::_Trait::_Available, 0UL, WebCore::SecurityOriginData::Tuple, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>>> { char __dummy; struct __alt<0UL, WebCore::SecurityOriginData::Tuple> { struct Tuple { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } protocol; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } host; struct optional<unsigned short> { union { char __null_state_; unsigned short __val_; } x0; BOOL __engaged_; } port; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 1UL, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>>> { char __dummy; struct __alt<1UL, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>>> { struct ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits>> { struct ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType, WTF::ObjectIdentifierThreadSafeAccessTraits> { unsigned long long m_identifier; } m_object; struct ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long m_identifier; } m_processIdentifier; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 2UL> __tail; } __tail; } __data; unsigned int __index; } __impl_; } m_data; } securityOrigin; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } frameName; struct ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>> { struct ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long m_identifier; } m_object; struct ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long m_identifier; } m_processIdentifier; } frameID; struct optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>>> { union { char __null_state_; struct ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>> { struct ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long m_identifier; } m_object; struct ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long m_identifier; } m_processIdentifier; } __val_; } x0; BOOL __engaged_; } parentFrameID; int processID; } _frameInfoForFileUploadPanel;
  struct RetainPtr<UIGestureRecognizer> { void *m_ptr; } _previewGestureRecognizer;
  struct RetainPtr<UIGestureRecognizer> { void *m_ptr; } _previewSecondaryGestureRecognizer;
  struct Vector<bool, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { BOOL *m_buffer; unsigned int m_capacity; unsigned int m_size; } _focusStateStack;
  struct RefPtr<WebCore::TextIndicator, WTF::RawPtrTraits<WebCore::TextIndicator>, WTF::DefaultRefDerefTraits<WebCore::TextIndicator>> { struct TextIndicator *m_ptr; } _textIndicator;
  struct RetainPtr<WebTextIndicatorLayer> { void *m_ptr; } _textIndicatorLayer;
  struct unique_ptr<WebKit::SmartMagnificationController, std::default_delete<WebKit::SmartMagnificationController>> { struct __compressed_pair<WebKit::SmartMagnificationController *, std::default_delete<WebKit::SmartMagnificationController>> { struct SmartMagnificationController *__value_; } __ptr_; } _smartMagnificationController;
  struct ObjectIdentifierGeneric<WebKit::TapIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long m_identifier; } _latestTapID;
  struct TapHighlightInformation { BOOL nodeHasBuiltInClickHandling; struct Color { unsigned long long m_colorAndFlags; } color; struct Vector<WebCore::FloatQuad, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct FloatQuad *m_buffer; unsigned int m_capacity; unsigned int m_size; } quads; struct IntSize { int m_width; int m_height; } topLeftRadius; struct IntSize { int m_width; int m_height; } topRightRadius; struct IntSize { int m_width; int m_height; } bottomLeftRadius; struct IntSize { int m_width; int m_height; } bottomRightRadius; } _tapHighlightInformation;
  struct WebAutocorrectionContext { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } contextBefore; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } markedText; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } selectedText; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl *m_ptr; } m_impl; } contextAfter; struct EditingRange { unsigned long long location; unsigned long long length; } markedTextRange; } _lastAutocorrectionContext;
  struct RetainPtr<NSObject<WKFormPeripheral>> { void *m_ptr; } _inputPeripheral;
  struct BlockPtr<void (WebEvent *, bool)> { id /* block */ m_block; } _keyWebEventHandler;
  struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { unsigned long long m_identifier; } _layerTreeTransactionIdAtLastInteractionStart;
  struct WKSelectionDrawingInfo { int type; struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } caretRect; struct Color { unsigned long long m_colorAndFlags; } caretColor; struct Vector<WebCore::SelectionGeometry, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct SelectionGeometry *m_buffer; unsigned int m_capacity; unsigned int m_size; } selectionGeometries; struct IntRect { struct IntPoint { int m_x; int m_y; } m_location; struct IntSize { int m_width; int m_height; } m_size; } selectionClipRect; } _lastSelectionDrawingInfo;
  struct RetainPtr<WKTextRange> { void *m_ptr; } _cachedSelectedTextRange;
  struct optional<WebKit::InteractionInformationRequest> { union { char __null_state_; struct InteractionInformationRequest { struct IntPoint { int m_x; int m_y; } point; BOOL includeSnapshot; BOOL includeLinkIndicator; BOOL includeCaretContext; BOOL includeHasDoubleClickHandler; BOOL includeImageData; BOOL gatherAnimations; BOOL linkIndicatorShouldHaveLegacyMargins; BOOL disallowUserAgentShadowContent; } __val_; } x0; BOOL __engaged_; } _lastOutstandingPositionInformationRequest;
  unsigned long long _positionInformationCallbackDepth;
  struct Vector<std::optional<std::pair<WebKit::InteractionInformationRequest, WTF::BlockPtr<void (WebKit::InteractionInformationAtPosition)>>>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { void *m_buffer; unsigned int m_capacity; unsigned int m_size; } _pendingPositionInformationHandlers;
  struct OptionSet<WebKit::InputViewUpdateDeferralSource> { unsigned char m_storage; } _inputViewUpdateDeferralSources;
  struct RetainPtr<WKKeyboardScrollViewAnimator> { void *m_ptr; } _keyboardScrollingAnimator;
  struct Vector<WTF::BlockPtr<void ()>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { void *m_buffer; unsigned int m_capacity; unsigned int m_size; } _actionsToPerformAfterEditorStateUpdate;
  struct WeakObjCPtr<WKDataListSuggestionsControl> { id m_weakReference; } _dataListSuggestionsControl;
  struct RefPtr<WebKit::RevealFocusedElementDeferrer, WTF::RawPtrTraits<WebKit::RevealFocusedElementDeferrer>, WTF::DefaultRefDerefTraits<WebKit::RevealFocusedElementDeferrer>> { struct RevealFocusedElementDeferrer *m_ptr; } _revealFocusedElementDeferrer;
  BOOL _showingTextStyleOptions;
  BOOL _hasValidPositionInformation;
  BOOL _isTapHighlightIDValid;
  BOOL _isTapHighlightFading;
  BOOL _potentialTapInProgress;
  BOOL _isDoubleTapPending;
  BOOL _longPressCanClick;
  BOOL _hasTapHighlightForPotentialTap;
  BOOL _selectionNeedsUpdate;
  BOOL _shouldRestoreSelection;
  BOOL _usingGestureForSelection;
  BOOL _inspectorNodeSearchEnabled;
  BOOL _isChangingFocusUsingAccessoryTab;
  BOOL _didAccessoryTabInitiateFocus;
  BOOL _isExpectingFastSingleTapCommit;
  BOOL _showDebugTapHighlightsForFastClicking;
  BOOL _textInteractionDidChangeFocusedElement;
  BOOL _treatAsContentEditableUntilNextEditorStateUpdate;
  BOOL _isWaitingOnPositionInformation;
  BOOL _autocorrectionContextNeedsUpdate;
  unsigned int _commitPotentialTapPointerId;
  BOOL _keyboardDidRequestDismissal;
  BOOL _candidateViewNeedsUpdate;
  BOOL _seenHardwareKeyDownInNonEditableElement;
  BOOL _becomingFirstResponder;
  BOOL _needsDeferredEndScrollingSelectionUpdate;
  BOOL _isChangingFocus;
  BOOL _isFocusingElementWithKeyboard;
  BOOL _isBlurringFocusedElement;
  BOOL _isRelinquishingFirstResponderToFocusedElement;
  BOOL _unsuppressSoftwareKeyboardAfterNextAutocorrectionContextUpdate;
  BOOL _isUnsuppressingSoftwareKeyboardUsingLastAutocorrectionContext;
  BOOL _waitingForKeyboardAppearanceAnimationToStart;
  BOOL _isHidingKeyboard;
  BOOL _isPreparingEditMenu;
  BOOL _focusRequiresStrongPasswordAssistance;
  BOOL _waitingForEditDragSnapshot;
  long long _dropAnimationCount;
  BOOL _hasSetUpInteractions;
  struct optional<bool> { union { char __null_state_; BOOL __val_; } x0; BOOL __engaged_; } _cachedHasCustomTintColor;
  unsigned long long _ignoreSelectionCommandFadeCount;
  unsigned long long _activeTextInteractionCount;
  long long _suppressNonEditableSingleTapTextInteractionCount;
  struct CompletionHandler<void (WebCore::DOMPasteAccessResponse)> { struct Function<void (WebCore::DOMPasteAccessResponse)> { struct unique_ptr<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse>, std::default_delete<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse>>> { struct __compressed_pair<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse> *, std::default_delete<WTF::Detail::CallableWrapperBase<void, WebCore::DOMPasteAccessResponse>>> { void *__value_; } __ptr_; } m_callableWrapper; } m_function; } _domPasteRequestHandler;
  struct optional<WebCore::DOMPasteAccessCategory> { union { char __null_state_; unsigned char __val_; } x0; BOOL __engaged_; } _domPasteRequestCategory;
  struct BlockPtr<void (UIWKAutocorrectionContext *)> { id /* block */ m_block; } _pendingAutocorrectionContextHandler;
  struct CompletionHandler<void ()> { struct Function<void ()> { struct unique_ptr<WTF::Detail::CallableWrapperBase<void>, std::default_delete<WTF::Detail::CallableWrapperBase<void>>> { struct __compressed_pair<WTF::Detail::CallableWrapperBase<void> *, std::default_delete<WTF::Detail::CallableWrapperBase<void>>> { void *__value_; } __ptr_; } m_callableWrapper; } m_function; } _pendingRunModalJavaScriptDialogCallback;
  struct RetainPtr<NSDictionary> { void *m_ptr; } _additionalContextForStrongPasswordAssistance;
  struct optional<int> { union { char __null_state_; int __val_; } x0; BOOL __engaged_; } _lastInsertedCharacterToOverrideCharacterBeforeSelection;
  unsigned int _selectionChangeNestingLevel;
  struct RetainPtr<WKFocusedFormControlView> { void *m_ptr; } _focusedFormControlView;
  struct RetainPtr<PUICQuickboardController> { void *m_ptr; } _presentedQuickboardController;
  struct RetainPtr<PUICQuickboardViewController> { void *m_ptr; } _presentedFullScreenInputViewController;
  struct RetainPtr<UINavigationController> { void *m_ptr; } _inputNavigationViewControllerForFullScreenInputs;
  BOOL _shouldRestoreFirstResponderStatusAfterLosingFocus;
  struct BlockPtr<void ()> { id /* block */ m_block; } _activeFocusedStateRetainBlock;
  unsigned int _fullscreenVideoImageAnalysisRequestIdentifier;
  struct unique_ptr<WebKit::PageClientImpl, std::default_delete<WebKit::PageClientImpl>> { struct __compressed_pair<WebKit::PageClientImpl *, std::default_delete<WebKit::PageClientImpl>> { struct PageClientImpl *__value_; } __ptr_; } _pageClient;
  struct RetainPtr<UIView> { void *m_ptr; } _rootContentView;
  struct RetainPtr<UIView> { void *m_ptr; } _fixedClippingView;
  struct RetainPtr<WKInspectorIndicationView> { void *m_ptr; } _inspectorIndicationView;
  struct RetainPtr<WKInspectorHighlightView> { void *m_ptr; } _inspectorHighlightView;
  struct RetainPtr<_UILayerHostView> { void *m_ptr; } _visibilityPropagationViewForWebProcess;
  struct RetainPtr<_UILayerHostView> { void *m_ptr; } _visibilityPropagationViewForGPUProcess;
  struct HistoricalVelocityData { unsigned int m_historySize; unsigned int m_latestDataIndex; struct MonotonicTime { double m_value; } m_lastAppendTimestamp; struct Data { struct MonotonicTime { double m_value; } timestamp; struct FloatPoint { float m_x; float m_y; } position; double scale; } x[3] m_positionHistory; } _historicalKinematicData;
  struct RetainPtr<NSUndoManager> { void *m_ptr; } _undoManager;
  struct RetainPtr<WKQuirkyNSUndoManager> { void *m_ptr; } _quirkyUndoManager;
  struct Lock { struct Atomic<unsigned char> { struct atomic<unsigned char> { struct __cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>> { atomic  __a_value; unsigned char x0; } __a_; } value; } m_byte; } _pendingBackgroundPrintFormattersLock;
  struct RetainPtr<NSMutableSet> { void *m_ptr; } _pendingBackgroundPrintFormatters;
  struct ObjectIdentifierGeneric<IPC::AsyncReplyIDType, WTF::ObjectIdentifierThreadSafeAccessTraits> { unsigned long long m_identifier; } _printRenderingCallbackID;
  long long _printRenderingCallbackType;
  struct Vector<WTF::RetainPtr<NSURL>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { void *m_buffer; unsigned int m_capacity; unsigned int m_size; } _temporaryURLsToDeleteWhenDeallocated;
}

@property (readonly, nonatomic) BOOL _wk_printFormatterRequiresMainThread;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } lastInteractionLocation;
@property (readonly, nonatomic) BOOL isEditable;
@property (readonly, nonatomic) BOOL shouldHideSelectionWhenScrolling;
@property (readonly, nonatomic) BOOL shouldIgnoreKeyboardWillHideNotification;
@property (readonly, nonatomic) const void * positionInformation;
@property (readonly, nonatomic) const void * autocorrectionData;
@property (readonly, nonatomic) const void * focusedElementInformation;
@property (readonly, nonatomic) UIWebFormAccessory *formAccessoryView;
@property (readonly, nonatomic) UITextInputAssistantItem *inputAssistantItemForWebView;
@property (readonly, nonatomic) UIView *inputViewForWebView;
@property (readonly, nonatomic) UIView *inputAccessoryViewForWebView;
@property (readonly, nonatomic) UITextInputTraits *textInputTraitsForWebView;
@property (readonly, nonatomic) BOOL preventsPanningInXAxis;
@property (readonly, nonatomic) BOOL preventsPanningInYAxis;
@property (readonly, nonatomic) WKTouchEventsGestureRecognizer *touchEventGestureRecognizer;
@property (readonly, nonatomic) NSArray *deferringGestures;
@property (readonly, nonatomic) void * gestureRecognizerConsistencyEnforcer;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } tapHighlightViewRect;
@property (readonly, nonatomic) UIGestureRecognizer *imageAnalysisGestureRecognizer;
@property (retain, nonatomic) UIView<WKFormControl> *dataListTextSuggestionsInputView;
@property (retain, nonatomic) NSArray *dataListTextSuggestions;
@property (readonly, nonatomic) BOOL _shouldUseContextMenus;
@property (readonly, nonatomic) BOOL _shouldUseContextMenusForFormControls;
@property (readonly, nonatomic) BOOL _shouldAvoidResizingWhenInputViewBoundsChange;
@property (readonly, nonatomic) BOOL _shouldAvoidScrollingWhenFocusedContentIsVisible;
@property (readonly, nonatomic) BOOL _shouldUseLegacySelectPopoverDismissalBehavior;
@property (readonly, nonatomic) BOOL _shouldAvoidSecurityHeuristicScoreUpdates;
@property (readonly, nonatomic) BOOL isTextRecognitionInFullscreenVideoEnabled;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic) long long selectionGranularity;
@property (readonly, nonatomic) NSObject<UITextInputSuggestionDelegate> *textInputSuggestionDelegate;
@property (nonatomic) long long _textInputSource;
@property (readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property (readonly, nonatomic) BOOL supportsImagePaste;
@property (nonatomic) BOOL _systemCursorAccessoriesDisabled;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (copy, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) NSObject<UITextInputDelegate> *inputDelegate;
@property (readonly, nonatomic) NSObject<UITextInputTokenizer> *tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (readonly, nonatomic) BOOL hasText;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic) long long spellCheckingType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long inlinePredictionType;
@property (nonatomic) long long keyboardType;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long returnKeyType;
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
@property (nonatomic) BOOL secureTextEntry;
@property (copy, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property (copy, nonatomic) NSString *recentInputIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } validTextRange;
@property (copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic) struct __CFCharacterSet * textTrimmingSet;
@property (retain, nonatomic) UIColor *insertionPointColor;
@property (retain, nonatomic) UIColor *selectionBarColor;
@property (retain, nonatomic) UIColor *selectionHighlightColor;
@property (retain, nonatomic) UIImage *selectionDragDotImage;
@property (retain, nonatomic) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } selectionEdgeInsets;
@property (retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property (retain, nonatomic) UIColor *underlineColorForSpelling;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) BOOL isSingleLineDocument;
@property (nonatomic) BOOL contentsIsSingleValue;
@property (nonatomic) BOOL hasDefaultContents;
@property (nonatomic) BOOL acceptsPayloads;
@property (nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsInitialEmojiKeyboard;
@property (nonatomic) BOOL acceptsDictationSearchResults;
@property (nonatomic) BOOL useAutomaticEndpointing;
@property (nonatomic) BOOL showDictationButton;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic) BOOL forceDisableDictation;
@property (nonatomic) BOOL forceSpellingDictation;
@property (nonatomic) BOOL forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) BOOL preferOnlineDictation;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL forceFloatingKeyboard;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } floatingKeyboardEdgeInsets;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (nonatomic) BOOL displaySecureTextUsingPlainText;
@property (nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL learnsCorrections;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (nonatomic) BOOL deferBecomingResponder;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (copy, nonatomic) NSString *autocorrectionContext;
@property (copy, nonatomic) NSString *responseContext;
@property (retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property (nonatomic) BOOL disableInputBars;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic) long long textScriptType;
@property (nonatomic) BOOL loadKeyboardsForSiriLanguage;
@property (retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property (retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) long long inlineCompletionType;
@property (nonatomic) BOOL hidePrediction;
@property (nonatomic) BOOL disableHandwritingKeyboard;
@property (nonatomic) BOOL devicePasscodeEntry;
@property (nonatomic) long long preferredKeyboardStyle;
@property (readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property (readonly, nonatomic) BOOL imageBacked;
@property (readonly, nonatomic) BOOL isShowingDataListSuggestions;
@property (readonly, nonatomic) NSString *textContentTypeForTesting;
@property (readonly, nonatomic) NSString *selectFormPopoverTitle;
@property (readonly, nonatomic) NSString *formInputLabel;
@property (readonly, nonatomic) WKFormSelectControl *selectControl;
@property (readonly, nonatomic) UITapGestureRecognizer *singleTapGestureRecognizer;
@property (readonly, nonatomic) UIWKTextInteractionAssistant *textInteractionAssistant;
@property (readonly, nonatomic) WKBrowsingContextController *browsingContextController;
@property (readonly, nonatomic) void * page;
@property (readonly, nonatomic) BOOL isFocusingElement;
@property (nonatomic) BOOL showingInspectorIndication;
@property (readonly, nonatomic) BOOL resigningFirstResponder;
@property (nonatomic) BOOL sizeChangedSinceLastVisibleContentRectUpdate;
@property (readonly, nonatomic) long long interfaceOrientation;
@property (readonly, nonatomic) NSUndoManager *undoManagerForWebView;

/* instance methods */
- (void)selectWordBackwardForTesting;
- (void)_doAfterReceivingEditDragSnapshotForTesting:(id /* block */)testing;
- (void)_simulateTextEntered:(id)entered;
- (void)_simulateElementAction:(long long)action atLocation:(struct CGPoint { double x0; double x1; })location;
- (void)_simulateLongPressActionAtLocation:(struct CGPoint { double x0; double x1; })location;
- (void)selectFormAccessoryPickerRow:(long long)row;
- (BOOL)selectFormAccessoryHasCheckedItemAtRow:(long long)row;
- (void)setSelectedColorForColorPicker:(id)picker;
- (void)setTimePickerValueToHour:(long long)hour minute:(long long)minute;
- (double)timePickerValueHour;
- (double)timePickerValueMinute;
- (id)_contentsOfUserInterfaceItem:(id)item;
- (void)_dismissContactPickerWithContacts:(id)contacts;
- (void)_simulateSelectionStart;
- (void)_selectDataListOption:(long long)option;
- (void)_setDataListSuggestionsControl:(id)control;
- (id)_formInputSession;
- (void)_createAndConfigureDoubleTapGestureRecognizer;
- (void)_createAndConfigureHighlightLongPressGestureRecognizer;
- (void)_createAndConfigureLongPressGestureRecognizer;
- (void)setUpInteraction;
- (void)cleanUpInteraction;
- (void)cleanUpInteractionPreviewContainers;
- (void)_cancelPendingKeyEventHandler;
- (void)_removeDefaultGestureRecognizers;
- (void)_addDefaultGestureRecognizers;
- (void)_didChangeLinkPreviewAvailability;
- (void)_updateLongPressAndHighlightLongPressGestures;
- (id)unscaledView;
- (double)inverseScale;
- (id)_scroller;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })unobscuredContentRect;
- (void)startAutoscroll:(struct CGPoint { double x0; double x1; })autoscroll;
- (void)cancelAutoscroll;
- (void)scrollSelectionToVisible:(BOOL)visible;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)_enableInspectorNodeSearch;
- (void)_disableInspectorNodeSearch;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test withEvent:(id)event;
- (void)_endEditing;
- (void)_cancelPreviousResetInputViewDeferralRequest;
- (void)_scheduleResetInputViewDeferralAfterBecomingFirstResponder;
- (BOOL)canBecomeFirstResponder;
- (BOOL)canBecomeFirstResponderForWebView;
- (BOOL)becomeFirstResponder;
- (BOOL)becomeFirstResponderForWebView;
- (BOOL)resignFirstResponder;
- (void)endEditingAndUpdateFocusAppearanceWithReason:(long long)reason;
- (BOOL)resignFirstResponderForWebView;
- (void)cancelPointersForGestureRecognizer:(id)recognizer;
- (struct optional<unsigned int> { union { char x0; unsigned int x1; } x0; BOOL x1; })activeTouchIdentifierForGestureRecognizer:(id)recognizer;
- (BOOL)_touchEventsMustRequireGestureRecognizerToFail:(id)fail;
- (BOOL)_gestureRecognizerCanBePreventedByTouchEvents:(id)events;
- (void)_touchEventsRecognized:(id)recognized;
- (void)_handleTouchActionsForTouchEvent:(const void *)event;
- (BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
- (BOOL)gestureRecognizer:(id)recognizer shouldReceivePress:(id)press;
- (BOOL)gestureRecognizerMayPanWebView:(id)view;
- (BOOL)gestureRecognizerMayPinchToZoomWebView:(id)view;
- (BOOL)gestureRecognizerMayDoubleTapToZoomWebView:(id)view;
- (id)touchActionActiveTouches;
- (void)_resetPanningPreventionFlags;
- (void)_inspectorNodeSearchRecognized:(id)recognized;
- (void)_touchEvent:(const void *)event preventsNativeGestures:(BOOL)gestures;
- (id)_touchStartDeferringGestures;
- (id)_touchEndDeferringGestures;
- (void)_doneDeferringTouchStart:(BOOL)start;
- (void)_doneDeferringTouchMove:(BOOL)move;
- (void)_doneDeferringTouchEnd:(BOOL)end;
- (BOOL)_isTouchStartDeferringGesture:(id)gesture;
- (BOOL)_isTouchEndDeferringGesture:(id)gesture;
- (void)_updateTapHighlight;
- (void)_showTapHighlight;
- (void)_didGetTapHighlightForRequest:(struct ObjectIdentifierGeneric<WebKit::TapIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long x0; })request color:(const struct Color { unsigned long long x0; } *)color quads:(const void *)quads topLeftRadius:(const struct IntSize { int x0; int x1; } *)radius topRightRadius:(const struct IntSize { int x0; int x1; } *)radius bottomLeftRadius:(const struct IntSize { int x0; int x1; } *)radius bottomRightRadius:(const struct IntSize { int x0; int x1; } *)radius nodeHasBuiltInClickHandling:(BOOL)handling;
- (BOOL)_mayDisableDoubleTapGesturesDuringSingleTap;
- (void)_disableDoubleTapGesturesDuringTapIfNecessary:(struct ObjectIdentifierGeneric<WebKit::TapIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long x0; })necessary;
- (void)_handleSmartMagnificationInformationForPotentialTap:(struct ObjectIdentifierGeneric<WebKit::TapIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long x0; })tap renderRect:(const struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } *)rect fitEntireRect:(BOOL)rect viewportMinimumScale:(double)scale viewportMaximumScale:(double)scale nodeIsRootLevel:(BOOL)level;
- (void)_cancelLongPressGestureRecognizer;
- (void)_cancelTouchEventGestureRecognizer;
- (void)_didScroll;
- (void)_scrollingNodeScrollingWillBegin:(unsigned long long)begin;
- (void)_scrollingNodeScrollingDidEnd:(unsigned long long)end;
- (BOOL)shouldShowAutomaticKeyboardUI;
- (BOOL)_shouldShowAutomaticKeyboardUIIgnoringInputMode;
- (BOOL)_disableAutomaticKeyboardUI;
- (BOOL)_requiresKeyboardWhenFirstResponder;
- (BOOL)_requiresKeyboardResetOnReload;
- (struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })rectToRevealWhenZoomingToFocusedElement;
- (void)_keyboardWillShow;
- (void)_keyboardDidShow;
- (void)_zoomToRevealFocusedElement;
- (id)inputView;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_selectionClipRect;
- (BOOL)_isContextMenuGestureRecognizerForFailureRelationships:(id)relationships;
- (BOOL)gestureRecognizer:(id)recognizer canPreventGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizer:(id)recognizer canBePreventedByGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)recognizer;
- (void)_showImageSheet;
- (void)_showAttachmentSheet;
- (void)_showLinkSheet;
- (void)_showDataDetectorsUI;
- (void)_showDataDetectorsUIForPositionInformation:(const void *)information;
- (SEL)_actionForLongPressFromPositionInformation:(const void *)information;
- (SEL)_actionForLongPress;
- (void)doAfterPositionInformationUpdate:(id /* block */)update forRequest:(struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; })request;
- (BOOL)ensurePositionInformationIsUpToDate:(struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; })date;
- (void)requestAsynchronousPositionInformationUpdate:(struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; })update;
- (BOOL)_currentPositionInformationIsValidForRequest:(const struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; } *)request;
- (BOOL)_hasValidOutstandingPositionInformationRequest:(const struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; } *)request;
- (BOOL)_currentPositionInformationIsApproximatelyValidForRequest:(const struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; } *)request radiusForApproximation:(int)approximation;
- (void)_invokeAndRemovePendingHandlersValidForCurrentPositionInformation;
- (BOOL)_pointIsInsideSelectionRect:(struct CGPoint { double x0; double x1; })rect outBoundingRect:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } *)rect;
- (BOOL)_shouldToggleSelectionCommandsAfterTapAt:(struct CGPoint { double x0; double x1; })at;
- (BOOL)_hasEnclosingScrollView:(id)view matchingCriteria:(void *)criteria;
- (BOOL)_isPanningScrollViewOrAncestor:(id)ancestor;
- (BOOL)_isInterruptingDecelerationForScrollViewOrAncestor:(id)ancestor;
- (BOOL)gestureRecognizerShouldBegin:(id)begin;
- (void)_cancelInteraction;
- (void)_finishInteraction;
- (void)_fadeTapHighlightViewIfNeeded;
- (BOOL)canShowNonEmptySelectionView;
- (BOOL)hasSelectablePositionAtPoint:(struct CGPoint { double x0; double x1; })point;
- (BOOL)pointIsNearMarkedText:(struct CGPoint { double x0; double x1; })text;
- (BOOL)textInteractionGesture:(long long)gesture shouldBeginAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)webSelectionRectsForSelectionGeometries:(const void *)geometries;
- (id)webSelectionRects;
- (struct ObjectIdentifierGeneric<WebKit::TapIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long x0; })nextTapIdentifier;
- (void)_highlightLongPressRecognized:(id)recognized;
- (void)_doubleTapRecognizedForDoubleClick:(id)click;
- (void)_twoFingerSingleTapGestureRecognized:(id)recognized;
- (void)_longPressRecognized:(id)recognized;
- (void)_endPotentialTapAndEnableDoubleTapGesturesIfNecessary;
- (void)_singleTapIdentified:(id)identified;
- (void)_singleTapDidReset:(id)reset;
- (void)_doubleTapDidFail:(id)fail;
- (void)_commitPotentialTapFailed;
- (void)_didNotHandleTapAsClick:(const struct IntPoint { int x0; int x1; } *)click;
- (void)_didHandleTapAsHover;
- (void)_didCompleteSyntheticClick;
- (void)_singleTapRecognized:(id)recognized;
- (void)_doubleTapRecognized:(id)recognized;
- (void)_resetIsDoubleTapPending;
- (void)_nonBlockingDoubleTapRecognized:(id)recognized;
- (void)_twoFingerDoubleTapRecognized:(id)recognized;
- (void)_attemptSyntheticClickAtLocation:(struct CGPoint { double x0; double x1; })location modifierFlags:(long long)flags;
- (void)setUpTextSelectionAssistant;
- (void)pasteWithCompletionHandler:(id /* block */)handler;
- (void)clearSelection;
- (void)_invalidateCurrentPositionInformation;
- (void)_positionInformationDidChange:(const void *)change;
- (void)_willStartScrollingOrZooming;
- (void)scrollViewWillStartPanOrPinchGesture;
- (void)_didEndScrollingOrZooming;
- (BOOL)_elementTypeRequiresAccessoryView:(int)view;
- (BOOL)requiresAccessoryView;
- (id)inputAssistantItem;
- (id)inputAccessoryView;
- (id)supportedPasteboardTypesForCurrentSelection;
- (void)_addShortcut:(id)shortcut;
- (void)_define:(id)_define;
- (void)_lookup:(id)_lookup;
- (void)_translate:(id)_translate;
- (void)_promptForReplace:(id)replace;
- (void)_share:(id)_share;
- (void)_showTextStyleOptions:(id)options;
- (void)_transliterateChinese:(id)chinese;
- (void)_nextAccessoryTab:(id)tab;
- (void)_previousAccessoryTab:(id)tab;
- (void)copy:(id)copy;
- (void)cut:(id)cut;
- (void)paste:(id)paste;
- (void)replace:(id)replace;
- (void)select:(id)select;
- (void)selectAll:(id)all;
- (void)toggleBoldface:(id)boldface;
- (void)toggleItalics:(id)italics;
- (void)toggleUnderline:(id)underline;
- (void)increaseSize:(id)size;
- (void)decreaseSize:(id)size;
- (void)pasteAndMatchStyle:(id)style;
- (void)makeTextWritingDirectionNatural:(id)natural;
- (void)makeTextWritingDirectionLeftToRight:(id)right;
- (void)makeTextWritingDirectionRightToLeft:(id)left;
- (void)_alignCenter:(id)center;
- (void)_alignJustified:(id)justified;
- (void)_alignLeft:(id)left;
- (void)_alignRight:(id)right;
- (void)_indent:(id)_indent;
- (void)_outdent:(id)_outdent;
- (void)_toggleStrikeThrough:(id)through;
- (void)_insertOrderedList:(id)list;
- (void)_insertUnorderedList:(id)list;
- (void)_insertNestedOrderedList:(id)list;
- (void)_insertNestedUnorderedList:(id)list;
- (void)_increaseListLevel:(id)level;
- (void)_decreaseListLevel:(id)level;
- (void)_changeListType:(id)type;
- (void)_pasteAsQuotation:(id)quotation;
- (void)_pasteAndMatchStyle:(id)style;
- (void)_lookupForWebView:(id)view;
- (void)_shareForWebView:(id)view;
- (void)_translateForWebView:(id)view;
- (void)_addShortcutForWebView:(id)view;
- (id)selectedText;
- (id)alternativesForSelectedText;
- (void)makeTextWritingDirectionNaturalForWebView:(id)view;
- (void)makeTextWritingDirectionLeftToRightForWebView:(id)view;
- (void)makeTextWritingDirectionRightToLeftForWebView:(id)view;
- (BOOL)isReplaceAllowed;
- (void)replaceText:(id)text withText:(id)text;
- (void)_promptForReplaceForWebView:(id)view;
- (void)_transliterateChineseForWebView:(id)view;
- (void)replaceForWebView:(id)view;
- (void)_insertOrderedListForWebView:(id)view;
- (void)insertOrderedListForWebView:(id)view;
- (void)_insertUnorderedListForWebView:(id)view;
- (void)insertUnorderedListForWebView:(id)view;
- (void)_insertNestedOrderedListForWebView:(id)view;
- (void)insertNestedOrderedListForWebView:(id)view;
- (void)_insertNestedUnorderedListForWebView:(id)view;
- (void)insertNestedUnorderedListForWebView:(id)view;
- (void)_indentForWebView:(id)view;
- (void)indentForWebView:(id)view;
- (void)_outdentForWebView:(id)view;
- (void)outdentForWebView:(id)view;
- (void)_alignLeftForWebView:(id)view;
- (void)alignLeftForWebView:(id)view;
- (void)_alignRightForWebView:(id)view;
- (void)alignRightForWebView:(id)view;
- (void)_alignCenterForWebView:(id)view;
- (void)alignCenterForWebView:(id)view;
- (void)_alignJustifiedForWebView:(id)view;
- (void)alignJustifiedForWebView:(id)view;
- (void)_pasteAndMatchStyleForWebView:(id)view;
- (void)pasteAndMatchStyleForWebView:(id)view;
- (void)_increaseListLevelForWebView:(id)view;
- (void)_decreaseListLevelForWebView:(id)view;
- (void)_changeListTypeForWebView:(id)view;
- (void)_toggleStrikeThroughForWebView:(id)view;
- (void)increaseSizeForWebView:(id)view;
- (void)decreaseSizeForWebView:(id)view;
- (void)_setFontForWebView:(id)view sender:(id)sender;
- (void)_setFontSizeForWebView:(double)view sender:(id)sender;
- (void)_setTextColorForWebView:(id)view sender:(id)sender;
- (void)toggleStrikeThroughForWebView:(id)view;
- (id)textStylingAtPosition:(id)position inDirection:(long long)direction;
- (BOOL)_hasCustomTintColor;
- (id)_cascadeInteractionTintColor;
- (void)_updateInteractionTintColor:(id)color;
- (void)tintColorDidChange;
- (BOOL)canPerformAction:(SEL)action withSender:(id)sender;
- (BOOL)canPerformActionForWebView:(SEL)view withSender:(id)sender;
- (id)targetForAction:(SEL)action withSender:(id)sender;
- (id)targetForActionForWebView:(SEL)view withSender:(id)sender;
- (void)_willHideMenu:(id)menu;
- (void)_didHideMenu:(id)menu;
- (void)_keyboardDidRequestDismissal:(id)dismissal;
- (void)copyForWebView:(id)view;
- (void)cutForWebView:(id)view;
- (void)pasteForWebView:(id)view;
- (void)_pasteAsQuotationForWebView:(id)view;
- (void)selectForWebView:(id)view;
- (void)selectAllForWebView:(id)view;
- (BOOL)shouldSynthesizeKeyEvents;
- (void)toggleBoldfaceForWebView:(id)view;
- (void)toggleItalicsForWebView:(id)view;
- (void)toggleUnderlineForWebView:(id)view;
- (void)_showTextStyleOptionsForWebView:(id)view;
- (void)_showDictionary:(id)dictionary;
- (void)_defineForWebView:(id)view;
- (void)accessibilityRetrieveSpeakSelectionContent;
- (void)_accessibilityRetrieveRectsEnclosingSelectionOffset:(long long)offset withGranularity:(long long)granularity;
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)offset withText:(id)text;
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)offset withText:(id)text completionHandler:(id /* block */)handler;
- (void)_accessibilityStoreSelection;
- (void)_accessibilityClearSelection;
- (BOOL)_handleDOMPasteRequestWithResult:(unsigned char)result;
- (void)_willPerformAction:(SEL)action sender:(id)sender;
- (void)_didPerformAction:(SEL)action sender:(id)sender;
- (BOOL)_hasFocusedElement;
- (void)changeSelectionWithGestureAt:(struct CGPoint { double x0; double x1; })at withGesture:(long long)gesture withState:(long long)state;
- (void)changeSelectionWithGestureAt:(struct CGPoint { double x0; double x1; })at withGesture:(long long)gesture withState:(long long)state withFlags:(long long)flags;
- (void)changeSelectionWithTouchAt:(struct CGPoint { double x0; double x1; })at withSelectionTouch:(long long)touch baseIsStart:(BOOL)start withFlags:(long long)flags;
- (void)changeSelectionWithTouchesFrom:(struct CGPoint { double x0; double x1; })from to:(struct CGPoint { double x0; double x1; })to withGesture:(long long)gesture withState:(long long)state;
- (void)moveByOffset:(long long)offset;
- (void)requestAutocorrectionRectsForString:(id)string withCompletionHandler:(id /* block */)handler;
- (BOOL)_handleTapOverInteractiveControl:(struct CGPoint { double x0; double x1; })control;
- (void)selectPositionAtPoint:(struct CGPoint { double x0; double x1; })point completionHandler:(id /* block */)handler;
- (void)_selectPositionAtPoint:(struct CGPoint { double x0; double x1; })point stayingWithinFocusedElement:(BOOL)element completionHandler:(id /* block */)handler;
- (void)selectPositionAtBoundary:(long long)boundary inDirection:(long long)direction fromPoint:(struct CGPoint { double x0; double x1; })point completionHandler:(id /* block */)handler;
- (void)moveSelectionAtBoundary:(long long)boundary inDirection:(long long)direction completionHandler:(id /* block */)handler;
- (void)selectTextWithGranularity:(long long)granularity atPoint:(struct CGPoint { double x0; double x1; })point completionHandler:(id /* block */)handler;
- (void)beginSelectionInDirection:(long long)direction completionHandler:(id /* block */)handler;
- (void)updateSelectionWithExtentPoint:(struct CGPoint { double x0; double x1; })point completionHandler:(id /* block */)handler;
- (void)updateSelectionWithExtentPoint:(struct CGPoint { double x0; double x1; })point withBoundary:(long long)boundary completionHandler:(id /* block */)handler;
- (unsigned int)_characterInRelationToCaretSelection:(int)selection;
- (BOOL)_selectionAtDocumentStart;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })textFirstRect;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })textLastRect;
- (void)willInsertFinalDictationResult;
- (void)didInsertFinalDictationResult;
- (void)replaceDictatedText:(id)text withText:(id)text;
- (void)requestDictationContext:(id /* block */)context;
- (void)applyAutocorrection:(id)autocorrection toString:(id)string isCandidate:(BOOL)candidate withCompletionHandler:(id /* block */)handler;
- (void)applyAutocorrection:(id)autocorrection toString:(id)string withCompletionHandler:(id /* block */)handler;
- (void)applyAutocorrection:(id)autocorrection toString:(id)string shouldUnderline:(BOOL)underline withCompletionHandler:(id /* block */)handler;
- (void)_invokePendingAutocorrectionContextHandler:(id)handler;
- (void)_cancelPendingAutocorrectionContextHandler;
- (void)requestAutocorrectionContextWithCompletionHandler:(id /* block */)handler;
- (void)_handleAutocorrectionContext:(const void *)context;
- (void)updateSoftwareKeyboardSuppressionStateFromWebView;
- (void)unsuppressSoftwareKeyboardUsingLastAutocorrectionContextIfNeeded;
- (void)runModalJavaScriptDialog:(void *)dialog;
- (void)_didStartProvisionalLoadForMainFrame;
- (void)_didCommitLoadForMainFrame;
- (void)_nextAccessoryTabForWebView:(id)view;
- (void)_previousAccessoryTabForWebView:(id)view;
- (void)_becomeFirstResponderWithSelectionMovingForward:(BOOL)forward completionHandler:(id /* block */)handler;
- (struct Color { unsigned long long x0; })_tapHighlightColorForFastClick:(BOOL)click;
- (void)_setDoubleTapGesturesEnabled:(BOOL)enabled;
- (void)accessoryClear;
- (void)accessoryDone;
- (void)updateFocusedElementValue:(id)value;
- (void)updateFocusedElementValueAsColor:(id)color;
- (void)updateFocusedElementSelectedIndex:(unsigned int)index allowsMultipleSelection:(BOOL)selection;
- (void)updateFocusedElementFocusedWithDataListDropdown:(BOOL)dropdown;
- (void)accessoryTab:(BOOL)tab;
- (void)accessoryAutoFill;
- (void)accessoryOpen;
- (void)_updateAccessory;
- (BOOL)_allowAnimatedUpdateSelectionRectViews;
- (void)beginSelectionChange;
- (void)endSelectionChange;
- (void)willFinishIgnoringCalloutBarFadeAfterPerformingAction;
- (void)_didChangeWebViewEditability;
- (void)insertTextSuggestion:(id)suggestion;
- (id)textInRange:(id)range;
- (void)replaceRange:(id)range withText:(id)text;
- (struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })_scaledCaretRectForSelectionStart:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })start;
- (struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })_scaledCaretRectForSelectionEnd:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })end;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)position;
- (id)selectionRectsForRange:(id)range;
- (BOOL)hasMarkedText;
- (id)markedText;
- (void)setAttributedMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)setMarkedText:(id)text selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)_setMarkedText:(id)text underlines:(const void *)underlines highlights:(const void *)highlights selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (void)unmarkText;
- (id)textRangeFromPosition:(id)position toPosition:(id)position;
- (id)positionFromPosition:(id)position offset:(long long)offset;
- (id)positionFromPosition:(id)position inDirection:(long long)direction offset:(long long)offset;
- (long long)comparePosition:(id)position toPosition:(id)position;
- (long long)offsetFromPosition:(id)position toPosition:(id)position;
- (id)positionWithinRange:(id)range farthestInDirection:(long long)direction;
- (id)characterRangeByExtendingPosition:(id)position inDirection:(long long)direction;
- (long long)baseWritingDirectionForPosition:(id)position inDirection:(long long)direction;
- (void)setBaseWritingDirection:(long long)direction forRange:(id)range;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)range;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })point withinRange:(id)range;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)deleteBackward;
- (BOOL)_shouldSimulateKeyboardInputOnTextInsertion;
- (void)insertText:(id)text;
- (void)insertText:(id)text alternatives:(id)alternatives style:(long long)style;
- (void)addTextAlternatives:(id)alternatives;
- (void)removeEmojiAlternatives;
- (id)textInputTraits;
- (void)_updateTextInputTraits:(id)traits;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectionRange;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForNSRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })nsrange;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_markedTextNSRange;
- (id)selectedDOMRange;
- (void)setSelectedDOMRange:(id)domrange affinityDownstream:(BOOL)downstream;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)typing replacementText:(id)text;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectContainingCaretSelection;
- (BOOL)_isTextInputContextFocused:(id)focused;
- (void)_focusTextInputContext:(id)context placeCaretAt:(struct CGPoint { double x0; double x1; })at completionHandler:(id /* block */)handler;
- (void)_requestTextInputContextsInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect completionHandler:(id /* block */)handler;
- (void)_willBeginTextInteractionInTextInputContext:(id)context;
- (void)_didFinishTextInteractionInTextInputContext:(id)context;
- (void)modifierFlagsDidChangeFrom:(long long)from to:(long long)to;
- (BOOL)shouldSuppressUpdateCandidateView;
- (BOOL)requiresKeyEvents;
- (BOOL)_tryToHandlePressesEvent:(id)event;
- (void)pressesBegan:(id)began withEvent:(id)event;
- (void)pressesEnded:(id)ended withEvent:(id)event;
- (void)pressesChanged:(id)changed withEvent:(id)event;
- (void)pressesCancelled:(id)cancelled withEvent:(id)event;
- (void)generateSyntheticEditingCommand:(unsigned char)command;
- (void)handleKeyWebEvent:(id)event;
- (void)handleKeyWebEvent:(id)event withCompletionHandler:(id /* block */)handler;
- (void)_didHandleKeyEvent:(id)event eventWasHandled:(BOOL)handled;
- (BOOL)_interpretKeyEvent:(id)event isCharEvent:(BOOL)event;
- (id)filePickerAcceptedTypeIdentifiers;
- (void)dismissFilePicker;
- (BOOL)isScrollableForKeyboardScrollViewAnimator:(id)animator;
- (double)keyboardScrollViewAnimator:(id)animator distanceForIncrement:(unsigned char)increment inDirection:(unsigned char)direction;
- (void)keyboardScrollViewAnimatorWillScroll:(id)scroll;
- (void)keyboardScrollViewAnimatorDidFinishScrolling:(id)scrolling;
- (void)executeEditCommandWithCallback:(id)callback;
- (void)_deleteByWord;
- (void)_deleteForwardByWord;
- (void)_deleteToStartOfLine;
- (void)_deleteToEndOfLine;
- (void)_deleteForwardAndNotify:(BOOL)notify;
- (void)_deleteToEndOfParagraph;
- (void)_transpose;
- (id)_moveUp:(BOOL)up withHistory:(id)history;
- (id)_moveDown:(BOOL)down withHistory:(id)history;
- (id)_moveLeft:(BOOL)left withHistory:(id)history;
- (id)_moveRight:(BOOL)right withHistory:(id)history;
- (id)_moveToStartOfWord:(BOOL)word withHistory:(id)history;
- (id)_moveToStartOfParagraph:(BOOL)paragraph withHistory:(id)history;
- (id)_moveToStartOfLine:(BOOL)line withHistory:(id)history;
- (id)_moveToStartOfDocument:(BOOL)document withHistory:(id)history;
- (id)_moveToEndOfWord:(BOOL)word withHistory:(id)history;
- (id)_moveToEndOfParagraph:(BOOL)paragraph withHistory:(id)history;
- (id)_moveToEndOfLine:(BOOL)line withHistory:(id)history;
- (id)_moveToEndOfDocument:(BOOL)document withHistory:(id)history;
- (void)setBottomBufferHeight:(double)height;
- (id)automaticallySelectedOverlay;
- (id)metadataDictionariesForDictationResults;
- (void)moveBackward:(unsigned int)backward;
- (void)moveForward:(unsigned int)forward;
- (unsigned short)characterBeforeCaretSelection;
- (id)wordContainingCaretSelection;
- (id)wordRangeContainingCaretSelection;
- (void)setMarkedText:(id)text;
- (BOOL)hasContent;
- (void)selectAll;
- (id)textColorForCaretSelection;
- (id)fontForCaretSelection;
- (BOOL)hasSelection;
- (BOOL)isPosition:(id)position atBoundary:(long long)boundary inDirection:(long long)direction;
- (id)positionFromPosition:(id)position toBoundary:(long long)boundary inDirection:(long long)direction;
- (BOOL)isPosition:(id)position withinTextUnit:(long long)unit inDirection:(long long)direction;
- (id)rangeEnclosingPosition:(id)position withGranularity:(long long)granularity inDirection:(long long)direction;
- (void)takeTraitsFrom:(id)from;
- (void)_showKeyboard;
- (void)_hideKeyboard;
- (BOOL)_formControlRefreshEnabled;
- (void *)focusedSelectElementOptions;
- (BOOL)_shouldShowKeyboardForElement:(const void *)element;
- (BOOL)_shouldShowKeyboardForElementIgnoringInputMode:(const void *)mode;
- (void)startDeferringInputViewUpdates:(struct OptionSet<WebKit::InputViewUpdateDeferralSource> { unsigned char x0; })updates;
- (void)stopDeferringInputViewUpdates:(struct OptionSet<WebKit::InputViewUpdateDeferralSource> { unsigned char x0; })updates;
- (void)stopDeferringInputViewUpdatesForAllSources;
- (void)_elementDidFocus:(const void *)focus userIsInteracting:(BOOL)interacting blurPreviousNode:(BOOL)node activityStateChanges:(struct OptionSet<WebCore::ActivityState> { unsigned short x0; })changes userObject:(id)object;
- (void)_elementDidBlur;
- (void)_updateInputContextAfterBlurringAndRefocusingElement;
- (void)_hardwareKeyboardAvailabilityChanged;
- (void)_didUpdateInputMode:(unsigned char)mode;
- (void)_requestDOMPasteAccessForCategory:(unsigned char)category elementRect:(const struct IntRect { struct IntPoint { int x0; int x1; } x0; struct IntSize { int x0; int x1; } x1; } *)rect originIdentifier:(const void *)identifier completionHandler:(void *)handler;
- (void)doAfterEditorStateUpdateAfterFocusingElement:(id /* block */)element;
- (void)_didUpdateEditorState;
- (void)_updateInitialWritingDirectionIfNecessary;
- (void)updateCurrentFocusedElementInformation:(void *)information;
- (void)reloadContextViewForPresentedListViewController;
- (void)addFocusedFormControlOverlay;
- (void)removeFocusedFormControlOverlay;
- (struct RetainPtr<PUICTextInputContext> { void * x0; })createQuickboardTextInputContext;
- (struct RetainPtr<PUICQuickboardController> { void * x0; })_createQuickboardController:(id)controller;
- (void)presentViewControllerForCurrentFocusedElement;
- (BOOL)_isPresentingFullScreenInputView;
- (void)dismissAllInputViewControllers:(BOOL)controllers;
- (void)focusedFormControlViewDidSubmit:(id)submit;
- (void)focusedFormControlViewDidCancel:(id)cancel;
- (void)focusedFormControlViewDidBeginEditing:(id)editing;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForFocusedFormControlView:(id)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })nextRectForFocusedFormControlView:(id)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })previousRectForFocusedFormControlView:(id)view;
- (id)scrollViewForFocusedFormControlView:(id)view;
- (id)actionNameForFocusedFormControlView:(id)view;
- (void)focusedFormControlViewDidRequestNextNode:(id)node;
- (void)focusedFormControlViewDidRequestPreviousNode:(id)node;
- (BOOL)hasNextNodeForFocusedFormControlView:(id)view;
- (BOOL)hasPreviousNodeForFocusedFormControlView:(id)view;
- (void)focusedFormControllerDidUpdateSuggestions:(id)suggestions;
- (void)selectMenu:(id)menu didSelectItemAtIndex:(unsigned long long)index;
- (unsigned long long)numberOfItemsInSelectMenu:(id)menu;
- (id)selectMenu:(id)menu displayTextForItemAtIndex:(unsigned long long)index;
- (void)selectMenu:(id)menu didCheckItemAtIndex:(unsigned long long)index checked:(BOOL)checked;
- (BOOL)selectMenuUsesMultipleSelection:(id)selection;
- (BOOL)selectMenu:(id)menu hasSelectedOptionAtIndex:(unsigned long long)index;
- (void)quickboardController:(id)controller textInputValueDidChange:(id)change;
- (void)quickboardControllerTextInputValueCancelled:(id)cancelled;
- (void)_wheelChangedWithEvent:(id)event;
- (void)_updateSelectionAssistantSuppressionState;
- (void)_selectionChanged;
- (void)selectWordForReplacement;
- (void)_updateChangedSelection;
- (void)_updateChangedSelection:(BOOL)selection;
- (BOOL)shouldAllowHidingSelectionCommands;
- (BOOL)supportsTextSelectionWithCharacterGranularity;
- (BOOL)hasHiddenContentEditable;
- (BOOL)_shouldSuppressSelectionCommands;
- (void)_startSuppressingSelectionAssistantForReason:(unsigned char)reason;
- (void)_stopSuppressingSelectionAssistantForReason:(unsigned char)reason;
- (void)updateTextSuggestionsForInputDelegate;
- (void)_showPlaybackTargetPicker:(BOOL)picker fromRect:(const struct IntRect { struct IntPoint { int x0; int x1; } x0; struct IntSize { int x0; int x1; } x1; } *)rect routeSharingPolicy:(unsigned char)policy routingContextUID:(id)uid;
- (void)_showRunOpenPanel:(struct OpenPanelParameters *)panel frameInfo:(const void *)info resultListener:(struct WebOpenPanelResultListenerProxy *)listener;
- (void)fileUploadPanelDidDismiss:(id)dismiss;
- (BOOL)fileUploadPanelDestinationIsManaged:(id)managed;
- (void)_showShareSheet:(const void *)sheet inRect:(struct optional<WebCore::FloatRect> { union { char x0; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x1; } x0; BOOL x1; })rect completionHandler:(void *)handler;
- (void)_showContactPicker:(const void *)picker completionHandler:(void *)handler;
- (id)inputLabelText;
- (BOOL)_restoreFocusWithToken:(id)token;
- (void)startRelinquishingFirstResponderToFocusedElement;
- (void)stopRelinquishingFirstResponderToFocusedElement;
- (void)_preserveFocusWithToken:(id)token destructively:(BOOL)destructively;
- (BOOL)gestureRecognizer:(id)recognizer shouldIgnoreTouchEvent:(id)event;
- (BOOL)gestureRecognizer:(id)recognizer isInterruptingMomentumScrollingWithEvent:(id)event;
- (BOOL)isAnyTouchOverActiveArea:(id)area;
- (struct optional<WebKit::InteractionInformationAtPosition> { union { char x0; struct InteractionInformationAtPosition { struct InteractionInformationRequest { struct IntPoint { int x0; int x1; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; } x0; BOOL x1; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; unsigned long long x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; BOOL x22; struct FloatPoint { float x0; float x1; } x23; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl * x0; } x0; } x0; unsigned int x1 :1; unsigned int x2 :1; unsigned int x3 :1; unsigned int x4 :3; unsigned int x5 :26; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; } x24; struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl * x0; } x0; } x0; unsigned int x1 :1; unsigned int x2 :1; unsigned int x3 :1; unsigned int x4 :3; unsigned int x5 :26; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; } x25; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl * x0; } x0; } x26; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl * x0; } x0; } x27; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl * x0; } x0; } x28; struct IntRect { struct IntPoint { int x0; int x1; } x0; struct IntSize { int x0; int x1; } x1; } x29; struct RefPtr<WebKit::ShareableBitmap, WTF::RawPtrTraits<WebKit::ShareableBitmap>, WTF::DefaultRefDerefTraits<WebKit::ShareableBitmap>> { struct ShareableBitmap * x0; } x30; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl * x0; } x0; } x31; struct String { struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> { struct StringImpl * x0; } x0; } x32; float x33; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x34; struct optional<WebCore::Cursor> { union { char x0; struct Cursor { int x0; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image * x0; } x1; struct IntPoint { int x0; int x1; } x2; void * x3; } x1; } x0; BOOL x1; } x35; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x0; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x1; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x2; struct Vector<WebCore::FloatRect, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> { struct FloatRect * x0; unsigned int x1; unsigned int x2; } x3; float x4; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image * x0; } x5; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image * x0; } x6; struct RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>> { struct Image * x0; } x7; struct Color { unsigned long long x0; } x8; unsigned char x9; struct OptionSet<WebCore::TextIndicatorOption> { unsigned short x0; } x10; } x36; struct optional<WebCore::ElementContext> { union { char x0; struct ElementContext { struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x0; struct ObjectIdentifierGeneric<WebCore::PageIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long x0; } x1; struct ProcessQualified<WTF::UUID> { struct UUID { unsigned int128 x0; } x0; struct ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long x0; } x1; } x2; struct ObjectIdentifierGeneric<WebCore::ElementIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long x0; } x3; } x1; } x0; BOOL x1; } x37; struct optional<WebCore::ElementContext> { union { char x0; struct ElementContext { struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x0; struct ObjectIdentifierGeneric<WebCore::PageIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long x0; } x1; struct ProcessQualified<WTF::UUID> { struct UUID { unsigned int128 x0; } x0; struct ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long x0; } x1; } x2; struct ObjectIdentifierGeneric<WebCore::ElementIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long x0; } x3; } x1; } x0; BOOL x1; } x38; } x1; } x0; BOOL x1; })positionInformationForActionSheetAssistant:(id)assistant;
- (void)updatePositionInformationForActionSheetAssistant:(id)assistant;
- (void)actionSheetAssistant:(id)assistant performAction:(unsigned char)action;
- (void)_actionSheetAssistant:(id)assistant performAction:(unsigned char)action onElements:(void *)elements;
- (void)actionSheetAssistant:(id)assistant openElementAtLocation:(struct CGPoint { double x0; double x1; })location;
- (void)actionSheetAssistant:(id)assistant shareElementWithURL:(id)url rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)actionSheetAssistant:(id)assistant shareElementWithImage:(id)image rect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)actionSheetAssistant:(id)assistant showCustomSheetForElement:(id)element;
- (struct RetainPtr<NSArray> { void * x0; })actionSheetAssistant:(id)assistant decideActionsForElement:(id)element defaultActions:(struct RetainPtr<NSArray> { void * x0; })actions;
- (void)actionSheetAssistant:(id)assistant willStartInteractionWithElement:(id)element;
- (void)actionSheetAssistantDidStopInteraction:(id)interaction;
- (id)dataDetectionContextForPositionInformation:(const void *)information;
- (id)dataDetectionContextForActionSheetAssistant:(id)assistant positionInformation:(const void *)information;
- (id)selectedTextForActionSheetAssistant:(id)assistant;
- (void)actionSheetAssistant:(id)assistant getAlternateURLForImage:(id)image completion:(id /* block */)completion;
- (id)additionalMediaControlsContextMenuItemsForActionSheetAssistant:(id)assistant;
- (unsigned char)_dataOwnerForPasteboard:(BOOL)pasteboard;
- (struct RetainPtr<WKTargetedPreviewContainer> { void * x0; })_createPreviewContainerWithLayerName:(id)name;
- (id)containerForDropPreviews;
- (void)_removeContainerForDropPreviews;
- (id)containerForDragPreviews;
- (void)_removeContainerForDragPreviews;
- (id)containerForContextMenuHintPreviews;
- (void)_removeContainerForContextMenuHintPreviews;
- (void)_updateFrameOfContainerForContextMenuHintPreviewsIfNeeded;
- (void)_updateTargetedPreviewScrollViewUsingContainerScrollingNodeID:(unsigned long long)id;
- (BOOL)deferringGestureRecognizer:(id)recognizer willBeginTouchesWithEvent:(id)event;
- (void)deferringGestureRecognizer:(id)recognizer didTransitionToState:(long long)state;
- (void)deferringGestureRecognizer:(id)recognizer didEndTouchesWithEvent:(id)event;
- (BOOL)deferringGestureRecognizer:(id)recognizer shouldDeferOtherGestureRecognizer:(id)recognizer;
- (void)dismissQuickboardViewControllerAndRevealFocusedFormOverlayIfNecessary:(id)necessary;
- (id)textContentTypeForQuickboard;
- (void)quickboard:(id)quickboard textEntered:(id)entered;
- (void)quickboardInputCancelled:(id)cancelled;
- (BOOL)allowsLanguageSelectionForListViewController:(id)controller;
- (id)inputContextViewForViewController:(id)controller;
- (id)inputLabelTextForViewController:(id)controller;
- (id)initialValueForViewController:(id)controller;
- (BOOL)shouldDisplayInputContextViewForListViewController:(id)controller;
- (long long)numericInputModeForListViewController:(id)controller;
- (id)textInputContextForListViewController:(id)controller;
- (BOOL)allowsDictationInputForListViewController:(id)controller;
- (void)buildMenuForWebViewWithBuilder:(id)builder;
- (id)menuWithInlineAction:(id)action image:(id)image identifier:(id)identifier handler:(void *)handler;
- (void)setContinuousSpellCheckingEnabled:(BOOL)enabled;
- (void)_didEnterFullscreen;
- (void)_didExitFullscreen;
- (void)_writePromisedAttachmentToPasteboard:(void *)pasteboard;
- (void)setUpTextIndicator:(struct Ref<WebCore::TextIndicator, WTF::RawPtrTraits<WebCore::TextIndicator>> { struct TextIndicator * x0; })indicator;
- (void)clearTextIndicator:(unsigned char)indicator;
- (void)setTextIndicatorAnimationProgress:(float)progress;
- (void)teardownTextIndicatorLayer;
- (void)startFadeOut;
- (void)beginTextRecognitionForFullscreenVideo:(void *)video playerViewController:(id)controller;
- (void)cancelTextRecognitionForFullscreenVideo:(id)video;
- (void)beginTextRecognitionForVideoInElementFullscreen:(void *)fullscreen bounds:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })bounds;
- (void)cancelTextRecognitionForVideoInElementFullscreen;
- (BOOL)isImageBacked;
- (struct optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>>> { union { char x0; struct ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits>> { struct ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long x0; } x0; struct ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits> { unsigned long long x0; } x1; } x1; } x0; BOOL x1; })_frameIdentifierForPrintFormatter:(id)formatter;
- (struct RetainPtr<_WKPrintFormattingAttributes> { void * x0; })_attributesForPrintFormatter:(id)formatter;
- (unsigned long long)_wk_pageCountForPrintFormatter:(id)formatter;
- (void)_createImage:(id)image printFormatter:(id)formatter;
- (void)_createPDF:(id)pdf printFormatter:(id)formatter;
- (void)_waitForDrawToPDFCallbackForPrintFormatterIfNeeded:(id)needed;
- (void)_wk_requestDocumentForPrintFormatter:(id)formatter;
- (void)_waitForDrawToImageCallbackForPrintFormatterIfNeeded:(id)needed;
- (void)_wk_requestImageForPrintFormatter:(id)formatter;
- (id)_commonInitializationWithProcessPool:(void *)pool configuration:(void *)configuration;
- (void)_setupVisibilityPropagationViewForWebProcess;
- (void)_setupVisibilityPropagationViewForGPUProcess;
- (void)_removeVisibilityPropagationViewForWebProcess;
- (void)_removeVisibilityPropagationViewForGPUProcess;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame processPool:(struct NakedRef<WebKit::WebProcessPool> { struct WebProcessPool * x0; })pool configuration:(void *)configuration webView:(id)view;
- (void)dealloc;
- (void)_removeTemporaryFilesIfNecessary;
- (void)_removeTemporaryDirectoriesWhenDeallocated:(void *)deallocated;
- (id)webView;
- (id)rootContentView;
- (void)willMoveToWindow:(id)window;
- (void)didMoveToWindow;
- (struct OpaqueWKPage *)_pageRef;
- (void)_showInspectorHighlight:(const void *)highlight;
- (void)_hideInspectorHighlight;
- (BOOL)isShowingInspectorIndication;
- (void)updateFixedClippingView:(struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; })view;
- (void)_didExitStableState;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_computeUnobscuredContentRectRespectingInputViewBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds inputViewBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct optional<WebKit::VisibleContentRectUpdateInfo> { union { char x0; struct VisibleContentRectUpdateInfo { struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x0; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x1; struct RectEdges<float> { struct array<float, 4UL> { float x0[4] } x0; } x2; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x3; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x4; struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } x5; struct RectEdges<float> { struct array<float, 4UL> { float x0[4] } x0; } x6; struct RectEdges<float> { struct array<float, 4UL> { float x0[4] } x0; } x7; struct VelocityData { float x0; float x1; float x2; struct MonotonicTime { double x0; } x3; } x8; struct MonotonicObjectIdentifier<WebKit::TransactionIDType> { unsigned long long x0; } x9; double x10; struct OptionSet<WebKit::ViewStabilityFlag> { unsigned char x0; } x11; BOOL x12; BOOL x13; BOOL x14; } x1; } x0; BOOL x1; })createVisibleContentRectUpdateInfoFromVisibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect unobscuredRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect contentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets unobscuredRectInScrollViewCoordinates:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })coordinates obscuredInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets unobscuredSafeAreaInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets inputViewBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds scale:(double)scale minimumScale:(double)scale viewStability:(struct OptionSet<WebKit::ViewStabilityFlag> { unsigned char x0; })stability enclosedInScrollableAncestorView:(BOOL)view sendEvenIfUnchanged:(BOOL)unchanged;
- (void)didUpdateVisibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect unobscuredRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect contentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets unobscuredRectInScrollViewCoordinates:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })coordinates obscuredInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets unobscuredSafeAreaInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets inputViewBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds scale:(double)scale minimumScale:(double)scale viewStability:(struct OptionSet<WebKit::ViewStabilityFlag> { unsigned char x0; })stability enclosedInScrollableAncestorView:(BOOL)view sendEvenIfUnchanged:(BOOL)unchanged;
- (void)didFinishScrolling;
- (void)didInterruptScrolling;
- (void)willStartZoomOrScroll;
- (void)didZoomToScale:(double)scale;
- (BOOL)canBecomeFocused;
- (void)didUpdateFocusInContext:(id)context withAnimationCoordinator:(id)coordinator;
- (void)_windowDidMoveToScreenNotification:(id)notification;
- (void)_updateForScreen:(id)screen;
- (void)_setAccessibilityWebProcessToken:(id)token;
- (void)_updateRemoteAccessibilityRegistration:(BOOL)registration;
- (void)_accessibilityRegisterUIProcessTokens;
- (void)_webViewDestroyed;
- (void)_resetPrintingState;
- (struct unique_ptr<WebKit::DrawingAreaProxy, std::default_delete<WebKit::DrawingAreaProxy>> { struct __compressed_pair<WebKit::DrawingAreaProxy *, std::default_delete<WebKit::DrawingAreaProxy>> { struct DrawingAreaProxy * x0; } x0; })_createDrawingAreaProxy;
- (void)_processDidExit;
- (void)_gpuProcessDidExit;
- (void)_processWillSwap;
- (void)_didRelaunchProcess;
- (void)_webProcessDidCreateContextForVisibilityPropagation;
- (void)_gpuProcessDidCreateContextForVisibilityPropagation;
- (void)_didCommitLayerTree:(const void *)tree;
- (void)_layerTreeCommitComplete;
- (void)_setAcceleratedCompositingRootView:(id)view;
- (BOOL)_scrollToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect withOrigin:(struct CGPoint { double x0; double x1; })origin minimumScrollDistance:(double)distance;
- (void)_zoomToFocusRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect selectionRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fontSize:(float)size minimumScale:(double)scale maximumScale:(double)scale allowScaling:(BOOL)scaling forceScroll:(BOOL)scroll;
- (BOOL)_zoomToRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect withOrigin:(struct CGPoint { double x0; double x1; })origin fitEntireRect:(BOOL)rect minimumScale:(double)scale maximumScale:(double)scale minimumScrollDistance:(double)distance;
- (void)_zoomOutWithOrigin:(struct CGPoint { double x0; double x1; })origin;
- (void)_zoomToInitialScaleWithOrigin:(struct CGPoint { double x0; double x1; })origin;
- (double)_initialScaleFactor;
- (double)_contentZoomScale;
- (double)_targetContentZoomScaleForRect:(const struct FloatRect { struct FloatPoint { float x0; float x1; } x0; struct FloatSize { float x0; float x1; } x1; } *)rect currentScale:(double)scale fitEntireRect:(BOOL)rect minimumScale:(double)scale maximumScale:(double)scale;
- (void)_applicationWillResignActive:(id)active;
- (void)_applicationDidBecomeActive:(id)active;
- (void)_applicationDidEnterBackground:(id)background;
- (void)_applicationWillEnterForeground:(id)foreground;
- (void)_screenCapturedDidChange:(id)change;
- (BOOL)isResigningFirstResponder;
@end

#endif /* WKContentView_h */
