//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef _WKWebAuthenticationPanel_h
#define _WKWebAuthenticationPanel_h
@import Foundation;

@class NSSet, NSString;
@protocol _WKWebAuthenticationPanelDelegate;

@interface _WKWebAuthenticationPanel : NSObject

@property (weak, nonatomic) NSObject<_WKWebAuthenticationPanelDelegate> *delegate;
@property (readonly, copy, nonatomic) NSString *relyingPartyID;
@property (readonly, copy, nonatomic) NSSet *transports;
@property (readonly, nonatomic) long long type;
@property (readonly, copy, nonatomic) NSString *userName;

/* class methods */
+ (id)getAllLocalAuthenticatorCredentials;
+ (id)getAllLocalAuthenticatorCredentialsWithAccessGroup:(id)group;
+ (id)getAllLocalAuthenticatorCredentialsWithRPID:(id)rpid;
+ (id)getAllLocalAuthenticatorCredentialsWithCredentialID:(id)id;
+ (id)getAllLocalAuthenticatorCredentialsWithRPIDAndAccessGroup:(id)group rpID:(id)id;
+ (id)getAllLocalAuthenticatorCredentialsWithCredentialIDAndAccessGroup:(id)group credentialID:(id)id;
+ (void)deleteLocalAuthenticatorCredentialWithID:(id)id;
+ (void)deleteLocalAuthenticatorCredentialWithGroupAndID:(id)id credential:(id)credential;
+ (void)clearAllLocalAuthenticatorCredentials;
+ (void)setDisplayNameForLocalCredentialWithGroupAndID:(id)id credential:(id)credential displayName:(id)name;
+ (void)setNameForLocalCredentialWithGroupAndID:(id)id credential:(id)credential name:(id)name;
+ (id)importLocalAuthenticatorCredential:(id)credential error:(id *)error;
+ (id)importLocalAuthenticatorWithAccessGroup:(id)group credential:(id)credential error:(id *)error;
+ (id)exportLocalAuthenticatorCredentialWithID:(id)id error:(id *)error;
+ (id)exportLocalAuthenticatorCredentialWithGroupAndID:(id)id credential:(id)credential error:(id *)error;
+ (struct PublicKeyCredentialCreationOptions)convertToCoreCreationOptionsWithOptions:(id)options;
+ (struct PublicKeyCredentialRequestOptions)convertToCoreRequestOptionsWithOptions:(id)options;
+ (BOOL)isUserVerifyingPlatformAuthenticatorAvailable;
+ (id)getClientDataJSONForAuthenticationType:(long long)type challenge:(id)challenge origin:(id)origin;
+ (id)getClientDataJSONWithTopOrigin:(long long)origin challenge:(id)challenge origin:(id)origin topOrigin:(id)origin crossOrigin:(BOOL)origin;
+ (id)encodeMakeCredentialCommandWithClientDataJSON:(id)json options:(id)options userVerificationAvailability:(long long)availability;
+ (id)encodeMakeCredentialCommandWithClientDataJSON:(id)json options:(id)options userVerificationAvailability:(long long)availability authenticatorSupportedExtensions:(id)extensions;
+ (id)encodeGetAssertionCommandWithClientDataJSON:(id)json options:(id)options userVerificationAvailability:(long long)availability;
+ (id)encodeGetAssertionCommandWithClientDataJSON:(id)json options:(id)options userVerificationAvailability:(long long)availability authenticatorSupportedExtensions:(id)extensions;
+ (id)encodeMakeCredentialCommandWithClientDataHash:(id)hash options:(id)options userVerificationAvailability:(long long)availability;
+ (id)encodeMakeCredentialCommandWithClientDataHash:(id)hash options:(id)options userVerificationAvailability:(long long)availability authenticatorSupportedExtensions:(id)extensions;
+ (id)encodeGetAssertionCommandWithClientDataHash:(id)hash options:(id)options userVerificationAvailability:(long long)availability;
+ (id)encodeGetAssertionCommandWithClientDataHash:(id)hash options:(id)options userVerificationAvailability:(long long)availability authenticatorSupportedExtensions:(id)extensions;

/* instance methods */
- (id)init;
- (void)cancel;
- (void)makeCredentialWithChallenge:(id)challenge origin:(id)origin options:(id)options completionHandler:(id /* block */)handler;
- (void)makeCredentialWithMediationRequirement:(long long)requirement clientDataHash:(id)hash options:(id)options completionHandler:(id /* block */)handler;
- (void)makeCredentialWithClientDataHash:(id)hash options:(id)options completionHandler:(id /* block */)handler;
- (void)getAssertionWithChallenge:(id)challenge origin:(id)origin options:(id)options completionHandler:(id /* block */)handler;
- (void)getAssertionWithMediationRequirement:(long long)requirement clientDataHash:(id)hash options:(id)options completionHandler:(id /* block */)handler;
- (void)getAssertionWithClientDataHash:(id)hash options:(id)options completionHandler:(id /* block */)handler;
- (void)setMockConfiguration:(id)configuration;
@end

#endif /* _WKWebAuthenticationPanel_h */
