//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1420.3.0.0.0
//
#ifndef CIContext_h
#define CIContext_h
@import Foundation;

@interface CIContext : NSObject {
  /* instance variables */
  void * _priv;
}

@property (readonly) unsigned long long identifier;
@property (readonly, nonatomic) struct CGColorSpace * workingColorSpace;
@property (readonly, nonatomic) int workingFormat;

/* class methods */
+ (void *)internalGLContextWithOptions:(id)options;
+ (void *)internalContextWithEAGLContext:(id)eaglcontext options:(id)options;
+ (void *)internalContextWithMTLDevice:(id)mtldevice options:(id)options;
+ (void *)internalContextWithMTLCommandQueue:(id)queue options:(id)options;
+ (void *)internalCLContextWithOptions:(id)options glContext:(void *)context;
+ (void *)internalCLContextWithOptions:(id)options;
+ (BOOL)loadArchiveWithName:(id)name fromURL:(id)url;
+ (BOOL)loadArchive:(id)archive;
+ (void)clearArchives;
+ (void)purgeArchive:(id)archive;
+ (id)_singletonContext;
+ (id)context;
+ (id)contextWithOptions:(id)options;
+ (id)contextWithCGContext:(struct CGContext *)cgcontext options:(id)options;
+ (id)contextWithEAGLContext:(id)eaglcontext;
+ (id)contextWithEAGLContext:(id)eaglcontext options:(id)options;
+ (id)contextWithMTLDevice:(id)mtldevice;
+ (id)contextWithMTLDevice:(id)mtldevice options:(id)options;
+ (id)contextWithMTLCommandQueue:(id)queue;
+ (id)contextWithMTLCommandQueue:(id)queue options:(id)options;
+ (int)_crashed_because_nonaddressable_memory_was_passed_to_render:(id)_crashed_because_nonaddressable_memory_was_passed_to_render toBitmap:(void *)bitmap rowBytes:(long long)bytes bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds format:(int)format colorSpace:(struct CGColorSpace *)space;
+ (struct CGColorSpace *)defaultWorkingColorSpace;
+ (struct CGColorSpace *)defaultRGBColorSpace;
+ (struct CGColorSpace *)defaultGrayColorSpace;

/* instance methods */
- (id)startTaskToRender:(id)render fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toDestination:(id)destination atPoint:(struct CGPoint { double x0; double x1; })point error:(id *)error;
- (id)_startTaskToRender:(id)render toDestination:(id)destination forPrepareRender:(BOOL)render forClear:(BOOL)clear error:(id *)error;
- (id)startTaskToRender:(id)render toDestination:(id)destination error:(id *)error;
- (BOOL)prepareRender:(id)render fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toDestination:(id)destination atPoint:(struct CGPoint { double x0; double x1; })point error:(id *)error;
- (id)startTaskToClear:(id)clear error:(id *)error;
- (id)depthBlurEffectFilterForImageData:(id)data options:(id)options;
- (id)depthBlurEffectFilterForImageURL:(id)url options:(id)options;
- (void)_performFaceDetection:(id)detection image:(id)image orientation:(int)orientation filter:(id)filter;
- (id)depthBlurEffectFilterForImage:(id)image disparityImage:(id)image portraitEffectsMatte:(id)matte orientation:(unsigned int)orientation options:(id)options;
- (id)depthBlurEffectFilterForImage:(id)image disparityImage:(id)image portraitEffectsMatte:(id)matte hairSemanticSegmentation:(id)segmentation orientation:(unsigned int)orientation options:(id)options;
- (id)depthBlurEffectFilterForImage:(id)image disparityImage:(id)image portraitEffectsMatte:(id)matte hairSemanticSegmentation:(id)segmentation glassesMatte:(id)matte gainMap:(id)map orientation:(unsigned int)orientation options:(id)options;
- (id)_dataRepresentationOfImage:(id)image UTIType:(id)utitype format:(int)format premultiplied:(BOOL)premultiplied colorSpace:(struct CGColorSpace *)space options:(id)options addAuxData:(BOOL)data keysToMerge:(id)merge error:(id *)error;
- (id)TIFFRepresentationOfImage:(id)image format:(int)format colorSpace:(struct CGColorSpace *)space options:(id)options;
- (id)_TIFFRepresentationOfImage:(id)image format:(int)format colorSpace:(struct CGColorSpace *)space options:(id)options error:(id *)error;
- (id)PNGRepresentationOfImage:(id)image format:(int)format colorSpace:(struct CGColorSpace *)space options:(id)options;
- (id)_PNGRepresentationOfImage:(id)image format:(int)format colorSpace:(struct CGColorSpace *)space options:(id)options error:(id *)error;
- (id)JPEGRepresentationOfImage:(id)image colorSpace:(struct CGColorSpace *)space options:(id)options;
- (id)_JPEGRepresentationOfImage:(id)image colorSpace:(struct CGColorSpace *)space options:(id)options error:(id *)error;
- (id)OpenEXRRepresentationOfImage:(id)image options:(id)options error:(id *)error;
- (id)HEIFRepresentationOfImage:(id)image format:(int)format colorSpace:(struct CGColorSpace *)space options:(id)options;
- (id)_HEIFRepresentationOfImage:(id)image format:(int)format colorSpace:(struct CGColorSpace *)space options:(id)options error:(id *)error;
- (id)HEIF10RepresentationOfImage:(id)image colorSpace:(struct CGColorSpace *)space options:(id)options error:(id *)error;
- (BOOL)writeTIFFRepresentationOfImage:(id)image toURL:(id)url format:(int)format colorSpace:(struct CGColorSpace *)space options:(id)options error:(id *)error;
- (BOOL)writePNGRepresentationOfImage:(id)image toURL:(id)url format:(int)format colorSpace:(struct CGColorSpace *)space options:(id)options error:(id *)error;
- (BOOL)writeJPEGRepresentationOfImage:(id)image toURL:(id)url colorSpace:(struct CGColorSpace *)space options:(id)options error:(id *)error;
- (BOOL)writeHEIFRepresentationOfImage:(id)image toURL:(id)url format:(int)format colorSpace:(struct CGColorSpace *)space options:(id)options error:(id *)error;
- (BOOL)writeHEIF10RepresentationOfImage:(id)image toURL:(id)url colorSpace:(struct CGColorSpace *)space options:(id)options error:(id *)error;
- (BOOL)writeOpenEXRRepresentationOfImage:(id)image toURL:(id)url options:(id)options error:(id *)error;
- (struct CGImage *)createCGImage:(id)cgimage fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGImage *)createCGImage:(id)cgimage fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect format:(int)format;
- (struct CGImage *)createCGImage:(id)cgimage fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect format:(int)format colorSpace:(struct CGColorSpace *)space;
- (struct CGImage *)createCGImage:(id)cgimage fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect format:(int)format colorSpace:(struct CGColorSpace *)space deferred:(BOOL)deferred;
- (struct CGImage *)createCGImage:(id)cgimage fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect format:(int)format premultiplied:(BOOL)premultiplied colorSpace:(struct CGColorSpace *)space deferred:(BOOL)deferred renderCallback:(id /* block */)callback;
- (struct CGImage *)_createCGImage:(id)cgimage fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect format:(int)format premultiplied:(BOOL)premultiplied colorSpace:(struct CGColorSpace *)space deferred:(struct Trilean { char x0; })deferred renderCallback:(id /* block */)callback;
- (id)_pdfDataRepresentation;
- (id)_createClone;
- (void *)_internalContext;
- (id)_initWithInternalRepresentation:(void *)representation;
- (void)_gpuContextCheck;
- (void)dealloc;
- (id)device;
- (id)internalCommandQueue;
- (id)clientCommandQueue;
- (void)lock;
- (void)unlock;
- (BOOL)loadArchiveWithName:(id)name fromURL:(id)url;
- (BOOL)loadArchive:(id)archive;
- (BOOL)testArchive:(id)archive;
- (void)setObject:(id)object forKey:(id)key;
- (id)objectForKey:(id)key;
- (void)abort;
- (void)invalidate;
- (id)init;
- (id)initWithOptions:(id)options;
- (id)initWithCGContext:(struct CGContext *)cgcontext options:(id)options;
- (id)initWithEAGLContext:(id)eaglcontext;
- (id)initWithEAGLContext:(id)eaglcontext options:(id)options;
- (id)initWithMTLDevice:(id)mtldevice options:(id)options;
- (id)initWithMTLCommandQueue:(id)queue options:(id)options;
- (void)render:(id)render toBitmap:(void *)bitmap rowBytes:(long long)bytes bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds format:(int)format colorSpace:(struct CGColorSpace *)space;
- (void)render:(id)render toCVPixelBuffer:(struct __CVBuffer *)buffer;
- (void)render:(id)render toCVPixelBuffer:(struct __CVBuffer *)buffer bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds colorSpace:(struct CGColorSpace *)space;
- (BOOL)isMetalBased;
- (BOOL)isOpenGLBased;
- (BOOL)isOpenCLBased;
- (BOOL)_isGLBackedContext;
- (BOOL)_isCGBackedContext;
- (void)_insertEventMarker:(const char *)marker;
- (void)render:(id)render;
- (void)drawImage:(id)image atPoint:(struct CGPoint { double x0; double x1; })point fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)drawImage:(id)image inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)render:(id)render toTexture:(unsigned int)texture bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds colorSpace:(struct CGColorSpace *)space;
- (void)render:(id)render toTexture:(unsigned int)texture target:(unsigned int)target bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds colorSpace:(struct CGColorSpace *)space;
- (void)render:(id)render toMTLTexture:(id)mtltexture commandBuffer:(id)buffer bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds colorSpace:(struct CGColorSpace *)space;
- (void)render:(id)render toIOSurface:(struct __IOSurface *)iosurface bounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds colorSpace:(struct CGColorSpace *)space;
- (struct CGLayer *)createCGLayerWithSize:(struct CGSize { double x0; double x1; })size info:(struct __CFDictionary *)info;
- (unsigned long long)maximumInputImageSize;
- (unsigned long long)maximumOutputImageSize;
- (struct CGSize { double x0; double x1; })inputImageMaximumSize;
- (struct CGSize { double x0; double x1; })outputImageMaximumSize;
- (struct CGColorSpace *)_outputColorSpace;
- (void)reclaimResources;
- (void)clearCaches;
- (id)flatten:(id)flatten fromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect format:(int)format colorSpace:(struct CGColorSpace *)space;
- (BOOL)measureRequirementsOf:(id)of query:(int)query;
- (void)setCTM:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })ctm;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })CTM;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (id)description;
- (id)createColorCubeDataForFilters:(id)filters dimension:(int)dimension colorSpace:(struct CGColorSpace *)space;
- (id)createColorCubeDataForFilters:(id)filters dimension:(int)dimension;
@end

#endif /* CIContext_h */
