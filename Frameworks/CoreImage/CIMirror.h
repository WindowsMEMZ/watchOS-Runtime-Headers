//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1420.3.0.0.0
//
#ifndef CIMirror_h
#define CIMirror_h
@import Foundation;

#include "CIFilter.h"
#include "CIImage.h"
#include "CIVector.h"

@class NSNumber;

@interface CIMirror : CIFilter

@property (retain, nonatomic) CIImage *inputImage;
@property (retain, nonatomic) CIVector *inputPoint;
@property (retain, nonatomic) NSNumber *inputAngle;

/* class methods */
+ (id)customAttributes;

/* instance methods */
- (id)_kernel;
- (struct Rectangle { double x0; double x1; double x2; double x3; })computeDOD:(struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; })dod tst:(struct vec3 { union { struct { float x0; float x1; float x2; } x0; struct { float x0; float x1; float x2; } x1; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; } x2; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; } x3; } x0; })tst off:(struct vec4 { union { struct { float x0; float x1; float x2; float x3; } x0; struct { float x0; float x1; float x2; float x3; } x1; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x1; } x2; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x1; } x3; struct { struct vec3 { union { struct { float x0; float x1; float x2; } x0; struct { float x0; float x1; float x2; } x1; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; } x2; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; } x3; } x0; } x0; } x4; struct { struct vec3 { union { struct { float x0; float x1; float x2; } x0; struct { float x0; float x1; float x2; } x1; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; } x2; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; } x3; } x0; } x0; } x5; } x0; })off mtx:(struct vec4 { union { struct { float x0; float x1; float x2; float x3; } x0; struct { float x0; float x1; float x2; float x3; } x1; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x1; } x2; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x1; } x3; struct { struct vec3 { union { struct { float x0; float x1; float x2; } x0; struct { float x0; float x1; float x2; } x1; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; } x2; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; } x3; } x0; } x0; } x4; struct { struct vec3 { union { struct { float x0; float x1; float x2; } x0; struct { float x0; float x1; float x2; } x1; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; } x2; struct { struct vec2 { union { float x0; float x1; } x0; union { float x0; float x1; } x1; } x0; } x3; } x0; } x0; } x5; } x0; })mtx;
- (id)outputImage;
@end

#endif /* CIMirror_h */
