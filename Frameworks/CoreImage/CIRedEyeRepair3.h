//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1420.3.0.0.0
//
#ifndef CIRedEyeRepair3_h
#define CIRedEyeRepair3_h
@import Foundation;

@class NSArray, NSMutableArray;
@protocol RedEyeInspector3;

@interface CIRedEyeRepair3 : NSObject {
  /* instance variables */
  NSObject<RedEyeInspector3> *inspector;
  struct { char *baseAddress; int width; int height; int rowSamples; int rowBytes; int size; int samplesPerPixel; int bytesPerSample; float resolution; } fullBitmap;
  struct { int minrow; int maxrow; int mincol; int maxcol; } subRectangle;
  struct { struct { int minrow; int maxrow; int mincol; int maxcol; } FR; struct CGPoint { double x; double y; } leftEye; struct CGPoint { double x; double y; } rightEye; struct { int minrow; int maxrow; int mincol; int maxcol; } LR; struct { int minrow; int maxrow; int mincol; int maxcol; } RR; float x[4] leftDistMatrix; float x[4] rightDistMatrix; struct CGPoint { double x; double y; } x[8] LPoly; struct CGPoint { double x; double y; } x[8] RPoly; float IOD; } FC;
  NSArray *faceArray;
  struct { char *baseAddress; int width; int height; int rowSamples; int rowBytes; int size; int samplesPerPixel; int bytesPerSample; float resolution; } faceBitmap;
  struct { float xf; float yf; float xfi; float yfi; float ify; int ioffx; int ioffy; int downsampleType; float downsampleOversizeX; float downsampleOversizeY; int gradientChannel; int edgeFindingChannel; float minMagnitude; float regressionRadius; float capture; float alignmentTolerance; float connectThreshold; BOOL forceFail; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } inputImageExtent; int orientation; int cameraType; int faceIndex; int side; float scale; float IOD; struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } transform; int height; } S;
  struct { int width; int height; struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } T; struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } Tp; struct { char *baseAddress; int width; int height; int rowSamples; int rowBytes; int size; int samplesPerPixel; int bytesPerSample; float resolution; } O; struct { char *baseAddress; int width; int height; int rowSamples; int rowBytes; int size; int samplesPerPixel; int bytesPerSample; float resolution; } OO; BOOL computeEyePolygon; struct { char *baseAddress; int width; int height; int rowSamples; int rowBytes; int size; int samplesPerPixel; int bytesPerSample; float resolution; } EP; BOOL maskRender; struct { char *baseAddress; int width; int height; int rowSamples; int rowBytes; int size; int samplesPerPixel; int bytesPerSample; float resolution; } D; BOOL computeGradient; struct { char *baseAddress; int width; int height; int rowSamples; int rowBytes; int size; int samplesPerPixel; int bytesPerSample; float resolution; } G; struct { char *baseAddress; int width; int height; int rowSamples; int rowBytes; int size; int samplesPerPixel; int bytesPerSample; float resolution; } M; BOOL computeShine; struct { char *baseAddress; int width; int height; int rowSamples; int rowBytes; int size; int samplesPerPixel; int bytesPerSample; float resolution; } S; struct { char *baseAddress; int width; int height; int rowSamples; int rowBytes; int size; int samplesPerPixel; int bytesPerSample; float resolution; } P; } PB;
  struct { int width; int height; float scaleFactor; struct  *grid; int nPoints; int maxPoints; struct  *points; int nextNetNumber; int nThreads; int maxThreads; struct  *threads; int nShapes; int maxShapes; struct  *shapes; } G;
  struct { float skinval; float avgLuminance; float minLuminance; float maxLuminance; float darkPercent; float clipPercent; } M;
  struct { double variance; int nNonZero; } FS;
  int printFaceArrayLevel;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } ROIRect;
  float avgLuminance;
  float minLuminance;
  float maxLuminance;
  float skinval;
  int ioffx;
  int ioffy;
  int erError;
  NSMutableArray *repairs;
  struct { int minrow; int maxrow; int mincol; int maxcol; } repairRect;
  struct { char *baseAddress; int width; int height; int rowSamples; int rowBytes; int size; int samplesPerPixel; int bytesPerSample; float resolution; } repairMap;
  NSMutableArray *failureCauses;
}

/* class methods */
+ (void)insertIntoConnectionHopper:(struct { int x0; struct { int x10; int x1; int x2; int x3; float x4; } x[20] } *)hopper index1:(int)index1 drop1:(int)drop1 index2:(int)index2 drop2:(int)drop2 score:(float)score;
+ (void)insertIntoThreadHopper:(struct { int x0; struct { int x10; float x1; float x2; float x3; float x4; float x5; float x6; } x[20] } *)hopper index:(int)index recChannel:(float)channel hue:(float)hue saturation:(float)saturation luminance:(float)luminance shapeMetricTotal:(float)total xPosition:(float)position;
+ (struct { int x0; int x1; int x2; int x3; })bitmapRectWithImageSubRectangle:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectangle settings:(struct { float x0; float x1; float x2; float x3; float x4; int x5; int x6; int x7; float x8; float x9; int x10; int x11; float x12; float x13; float x14; float x15; float x16; BOOL x17; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x18; int x19; int x20; int x21; int x22; float x23; float x24; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x25; int x26; } *)settings;
+ (float)yawAngleWithFaceDictionary:(id)dictionary;
+ (int)bitmapRect:(struct { int x0; int x1; int x2; int x3; } *)rect point:(struct CGPoint { double x0; double x1; } *)point polygon:(struct CGPoint { double x0; double x1; } x[8])polygon andDistMatrix:(float x[4])matrix forEye:(int)eye inFaceDictionary:(id)dictionary settings:(struct { float x0; float x1; float x2; float x3; float x4; int x5; int x6; int x7; float x8; float x9; int x10; int x11; float x12; float x13; float x14; float x15; float x16; BOOL x17; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x18; int x19; int x20; int x21; int x22; float x23; float x24; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x25; int x26; } *)settings;
+ (int)faceContext:(struct { struct { int x0; int x1; int x2; int x3; } x0; struct CGPoint { double x0; double x1; } x1; struct CGPoint { double x0; double x1; } x2; struct { int x0; int x1; int x2; int x3; } x3; struct { int x0; int x1; int x2; int x3; } x4; float x5[4] float x6[4] struct CGPoint { double x70; double x1; } x[8] struct CGPoint { double x80; double x1; } x[8] float x9; } *)context withFaceArray:(id)array index:(int)index settings:(struct { float x0; float x1; float x2; float x3; float x4; int x5; int x6; int x7; float x8; float x9; int x10; int x11; float x12; float x13; float x14; float x15; float x16; BOOL x17; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x18; int x19; int x20; int x21; int x22; float x23; float x24; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x25; int x26; } *)settings;
+ (struct { float x0; float x1; float x2; float x3; float x4; int x5; int x6; int x7; float x8; float x9; int x10; int x11; float x12; float x13; float x14; float x15; float x16; BOOL x17; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x18; int x19; int x20; int x21; int x22; float x23; float x24; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x25; int x26; })settingsWithOptions:(id)options;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })supportRectangleWithRepair:(id)repair imageSize:(struct CGSize { double x0; double x1; })size;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })supportRectangleWithFaceArray:(id)array options:(id)options;

/* instance methods */
- (void)magnitudeMap:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)map fromGabor:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)gabor;
- (void)condenseFourChannelRecognitionMap:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)map intoOneChanneMap:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)map;
- (int)initShapePoints:(struct { int x0; int x1; struct  * x2; int x3; int x4; int x5; } *)points withMaxPoints:(int)points;
- (int)addPoint:(struct CGPoint { double x0; double x1; })point toShapePoints:(struct { int x0; int x1; struct  * x2; int x3; int x4; int x5; } *)points;
- (void)termShapePoints:(struct { int x0; int x1; struct  * x2; int x3; int x4; int x5; } *)points;
- (int)copyShape:(struct { int x0; int x1; struct  * x2; int x3; int x4; int x5; } *)shape into:(struct { int x0; int x1; struct  * x2; int x3; int x4; int x5; } *)into transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform height:(int)height;
- (BOOL)initGridWithBitmap:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)bitmap scale:(int)scale;
- (void)termGrid;
- (void)point:(struct CGPoint { double x0; double x1; })point toGridRow:(int *)row column:(int *)column;
- (int)insertPoint:(struct CGPoint { double x0; double x1; })point andDirection:(struct CGPoint { double x0; double x1; })direction intoGrid:(BOOL)grid;
- (int)newThread:(struct  * *)thread;
- (int)newShape:(struct  * *)shape;
- (int)connectThreads:(int)threads drop1:(int)drop1 and:(int)and drop2:(int)drop2;
- (void)putThreadAtIndex:(int)index;
- (void)removeThreadAtIndex:(int)index;
- (int)lookForPoint:(struct CGPoint { double x0; double x1; } *)point onLine:(struct { float x0; float x1; float x2; })line nearestPoint:(struct CGPoint { double x0; double x1; })point;
- (void)forAllGridPointsNear:(int)near withinRadius:(float)radius do:(undefined *)do context:(void *)context;
- (void)forAllGridThreadsNear:(struct CGPoint { double x0; double x1; })near withinRadius:(float)radius do:(undefined *)do context:(void *)context;
- (int)replacePointAndDirection:(int)direction;
- (int)linkUpPointIndex:(int)index toPointIndex:(int)index;
- (int)copyGridInto:(struct { int x0; int x1; float x2; struct  * x3; int x4; int x5; struct  * x6; int x7; int x8; int x9; struct  * x10; int x11; int x12; struct  * x13; } *)into transform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform height:(int)height;
- (int)nextPointIndexWithPointIndex:(int)index;
- (void)regressionWithPointIndex:(int)index;
- (int)initHull:(struct  * *)hull withOrientation:(BOOL)orientation;
- (void)termHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull;
- (int)addPoint:(struct CGPoint { double x0; double x1; })point toHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull;
- (BOOL)trimConcaveFromHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull;
- (BOOL)trimEndPointFromHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull;
- (BOOL)trimStartPointFromHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull;
- (BOOL)isConvex:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)convex;
- (int)convexHull:(struct  * *)hull ofOriented:(BOOL)oriented threadIndex:(int)index;
- (int)convexHull:(struct  * *)hull ofOriented:(BOOL)oriented shape:(struct { int x0; int x1; struct  * x2; int x3; int x4; int x5; } *)shape;
- (void)measureHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull majorAxis:(struct CGPoint { double x0; double x1; } *)axis majorTo:(struct CGPoint { double x0; double x1; } *)to majorDiameter:(float *)diameter minorAxis:(struct CGPoint { double x0; double x1; } *)axis minorTo:(struct CGPoint { double x0; double x1; } *)to minorDiameter:(float *)diameter;
- (int)renderHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull toBitmap:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)bitmap;
- (int)widenedHull:(struct  * *)hull withHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull by:(float)by;
- (int)renderConvexHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull distance:(float)distance fieldToBitmap:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)bitmap;
- (struct CGPoint { double x0; double x1; })centroidWithConvexHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull;
- (int)analyzeMask:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)mask usingConvexHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull producingOptimizedMask:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)mask;
- (BOOL)edgePoint:(struct CGPoint { double x0; double x1; } *)point withBitmap:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)bitmap center:(struct CGPoint { double x0; double x1; })center perp:(struct CGPoint { double x0; double x1; })perp;
- (void)printConnectionHopper:(struct { int x0; struct { int x10; int x1; int x2; int x3; float x4; } x[20] } *)hopper message:(char *)message;
- (void)printThreadWithIndex:(int)index;
- (void)printThreadsOnlyClosed:(BOOL)closed message:(char *)message;
- (int)gatherThreadInfo:(struct { int x0; int x1; int x2; float x3; float x4; int x5; BOOL x6; BOOL x7; BOOL x8; int x9; int x10; float x11; float x12; float x13; float x14; struct { float x0; float x1; float x2; float x3; } x15; struct { float x0; float x1; float x2; float x3; } x16; float x17; int x18; int x19; } *)info;
- (int)findThreadsInGrid;
- (int)connectThreadsInGrid;
- (void)initBitmaps;
- (void)termBitmaps;
- (void)removeRedundantPointsFromShape:(struct { int x0; int x1; struct  * x2; int x3; int x4; int x5; } *)shape closerThan:(float)than;
- (void)computeLengthsAnglesAndDeltaAnglesForShape:(struct { int x0; int x1; struct  * x2; int x3; int x4; int x5; } *)shape;
- (void)removeSmallBumpsFromShape:(struct { int x0; int x1; struct  * x2; int x3; int x4; int x5; } *)shape center:(struct CGPoint { double x0; double x1; })center threshold:(float)threshold;
- (void)removeSpikesFromShape:(struct { int x0; int x1; struct  * x2; int x3; int x4; int x5; } *)shape;
- (void)slidingWindowAnalysisOfShape:(struct { int x0; int x1; struct  * x2; int x3; int x4; int x5; } *)shape into:(struct { float x0[4] float x1[4] float x2[4] int x3[4] } *)into;
- (int)updatedCheckpoint:(struct CGPoint { double x0; double x1; } *)checkpoint withCheckpoint:(struct CGPoint { double x0; double x1; })checkpoint checkpointIndex:(int)index angle:(float)angle width:(int)width height:(int)height inChannel:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)channel threadIndex:(int)index returningEdgeWidth:(float *)width;
- (int)newShape:(struct  * *)shape byInterpolatingBetweenCheckpoints:(struct { struct CGPoint { double x0; double x1; } x0; int x1; float x2; } x[100])checkpoints nc:(int)nc usingVectorField:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)field;
- (int)improvedShape:(struct  * *)shape withShape:(struct { int x0; int x1; struct  * x2; int x3; int x4; int x5; } *)shape;
- (int)shape:(struct  * *)shape withThreadAtIndex:(int)index centroid:(struct CGPoint { double x0; double x1; })centroid;
- (int)closeThreadIndex:(int)index usingVectorField:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)field;
- (int)attemptClosureOfThreadIndex:(int)index;
- (struct CGPoint { double x0; double x1; })threadCentroid:(struct { int x0; int x1; int x2; float x3; float x4; int x5; BOOL x6; BOOL x7; BOOL x8; int x9; int x10; float x11; float x12; float x13; float x14; struct { float x0; float x1; float x2; float x3; } x15; struct { float x0; float x1; float x2; float x3; } x16; float x17; int x18; int x19; } *)centroid;
- (float)threadSignedArea:(struct { int x0; int x1; int x2; float x3; float x4; int x5; BOOL x6; BOOL x7; BOOL x8; int x9; int x10; float x11; float x12; float x13; float x14; struct { float x0; float x1; float x2; float x3; } x15; struct { float x0; float x1; float x2; float x3; } x16; float x17; int x18; int x19; } *)area centroid:(struct CGPoint { double x0; double x1; })centroid;
- (int)color:(struct { float x0; float x1; float x2; float x3; } *)color underConvexHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull saturated:(struct { float x0; float x1; float x2; float x3; } *)saturated;
- (BOOL)hopperElement:(struct { int x0; float x1; float x2; float x3; float x4; float x5; float x6; } *)element isMoreScleraThanElement:(struct { int x0; float x1; float x2; float x3; float x4; float x5; float x6; } *)element;
- (void)swapHopperElement:(struct { int x0; float x1; float x2; float x3; float x4; float x5; float x6; } *)element withElement:(struct { int x0; float x1; float x2; float x3; float x4; float x5; float x6; } *)element;
- (int)recognizeThreadsWinningThreadIndex:(int *)index info:(struct { float x0; float x1; float x2; float x3; } *)info;
- (struct { float x0; float x1; float x2; float x3; })RGBtoHSV:(struct { float x0; float x1; float x2; float x3; })hsv;
- (int)prominenceConvexHull:(struct  * *)hull facts:(struct { struct { float x0; float x1; float x2; float x3; } x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; } *)facts;
- (int)prepareTransformWithEyeIndex:(int)index;
- (int)renderEyePolygonToBitmap:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)bitmap;
- (int)prepareBitmapsWithString:(char *)string;
- (void)start12BitRandom:(int)random;
- (double)next12BitRandom;
- (int)prepareMasksWithConvexHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull;
- (int)repairDictionary:(id *)dictionary withEyeIndex:(int)index;
- (int)executeRepairWithRepairDictionary:(id)dictionary;
- (BOOL)gatherFaceStatistics:(struct { float x0; float x1; float x2; float x3; float x4; float x5; } *)statistics;
- (struct { double x0; int x1; })focusStatsWithBitmap:(struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)bitmap IOD:(float)iod;
- (BOOL)isBlurryWithFocusStats:(struct { double x0; int x1; })stats;
- (void)setInspector:(id)inspector;
- (int)updateWithFaceIndex:(int)index;
- (void)repairExternalBuffer;
- (struct { char * x0; int x1; int x2; int x3; int x4; int x5; int x6; int x7; float x8; } *)repairMap;
- (struct { int x0; int x1; int x2; int x3; })repairRect;
- (struct CGPoint { double x0; double x1; })bitmapPointWithDictionaryPoint:(struct CGPoint { double x0; double x1; })point;
- (struct CGPoint { double x0; double x1; })globalBitmapPointWithDictionaryPoint:(struct CGPoint { double x0; double x1; })point;
- (struct CGPoint { double x0; double x1; })bitmapPointWithDictionaryPointArray:(id)array;
- (struct CGPoint { double x0; double x1; })globalBitmapPointWithDictionaryPointArray:(id)array;
- (struct CGPoint { double x0; double x1; })dictionaryPointWithBitmapPoint:(struct CGPoint { double x0; double x1; })point;
- (struct CGPoint { double x0; double x1; })dictionaryPointWithGlobalBitmapPoint:(struct CGPoint { double x0; double x1; })point;
- (id)dictionaryPointArrayWithEyeBitmapPoint:(struct CGPoint { double x0; double x1; })point;
- (id)dictionaryPointArrayWithBitmapPoint:(struct CGPoint { double x0; double x1; })point;
- (id)dictionaryPointArrayWithGlobalBitmapPoint:(struct CGPoint { double x0; double x1; })point;
- (struct { int x0; int x1; int x2; int x3; })bitmapRectWithDictionaryRectArray:(id)array;
- (struct { int x0; int x1; int x2; int x3; })globalBitmapRectWithDictionaryRectArray:(id)array;
- (id)dictionaryRectArrayWithBitmapRect:(struct { int x0; int x1; int x2; int x3; })rect;
- (id)dictionaryRectArrayWithGlobalBitmapRect:(struct { int x0; int x1; int x2; int x3; })rect;
- (int)saveRepairDictionary:(id *)dictionary withConvexHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull facts:(struct { struct { float x0; float x1; float x2; float x3; } x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; } *)facts;
- (int)packGlobalRepairDictionary:(id *)dictionary withConvexHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull facts:(struct { struct { float x0; float x1; float x2; float x3; } x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; } *)facts;
- (BOOL)unpackToGlobalRepairDictionary:(id)dictionary convexHull:(struct  * *)hull facts:(struct { struct { float x0; float x1; float x2; float x3; } x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; } *)facts;
- (BOOL)openRepairDictionary:(id)dictionary convexHull:(struct  * *)hull facts:(struct { struct { float x0; float x1; float x2; float x3; } x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; } *)facts;
- (id)initWithExternalBuffer:(char *)buffer subRectangle:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectangle rowBytes:(unsigned long long)bytes options:(id)options;
- (void)dealloc;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })inverseImageTransformForOrientation:(int)orientation;
- (void)printFaceArray;
- (void)autoRepairWithFaceArray:(id)array;
- (id)repairWithSide:(int)side;
- (id)mutableCopyOfArray:(id)array;
- (struct CGPoint { double x0; double x1; })leftHandedTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform ofPoint:(struct CGPoint { double x0; double x1; })point;
- (void)transformGlobalsWithTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (void)transformConvexHull:(struct { BOOL x0; int x1; int x2; struct CGPoint * x3; } *)hull withTransform:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })transform;
- (int)transformRepairArray:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })array;
- (id)repairArray;
- (id)stringWithRER3Error:(int)error;
- (void)executeRepair:(id)repair;
@end

#endif /* CIRedEyeRepair3_h */
