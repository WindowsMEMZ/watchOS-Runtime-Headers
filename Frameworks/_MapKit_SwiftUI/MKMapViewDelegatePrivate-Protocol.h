//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2417.42.9.28.9
//
#ifndef MKMapViewDelegatePrivate_Protocol_h
#define MKMapViewDelegatePrivate_Protocol_h
@import Foundation;

@protocol MKMapViewDelegatePrivate <MKMapViewDelegate>
@optional
/* instance methods */
- (void)_mapView:(id)view willDeselectAnnotationView:(id)view;
- (void)_mapView:(id)view willDeselectLabelMarker:(id)marker;
- (void)mapViewWillEnterAR:(id)ar;
- (void)mapViewDidEnterAR:(id)ar;
- (void)mapViewDidExitAR:(id)ar;
- (void)mapView:(id)view didEncounterARError:(id)arerror;
- (void)mapView:(id)view arSessionWasInterrupted:(unsigned long long)interrupted;
- (void)mapViewARSessionInterruptionEnded:(id)ended;
- (void)mapView:(id)view arTrackingStateDidChange:(unsigned long long)change reason:(unsigned long long)reason;
- (void)mapView:(id)view puckLocationTracingEvent:(id)event;
- (BOOL)_mapViewCanChangeUserTrackingModeWhenRegionDidChange:(id)change;
- (void)mapViewDidFinishInitialUserTrackingModeAnimation:(id)animation;
- (double)mapView:(id)view shouldDelayTapResponse:(id)response onAnnotationView:(id)view forDuration:(double)duration;
- (void)mapView:(id)view didChangeUserTrackingMode:(long long)mode animated:(BOOL)animated fromTrackingButton:(BOOL)button;
- (void)mapView:(id)view didPerformPitchAction:(BOOL)action;
- (void)mapView:(id)view didChangeMapType:(unsigned long long)type;
- (BOOL)mapView:(id)view shouldReceiveTouch:(id)touch;
- (BOOL)mapViewShouldHandleTapToDeselect:(id)deselect;
- (void)mapView:(id)view labelMarker:(id)marker calloutAccessoryControlTapped:(id)tapped;
- (BOOL)mapView:(id)view shouldSelectLabelMarker:(id)marker;
- (void)mapView:(id)view willSelectLabelMarker:(id)marker;
- (void)mapView:(id)view didSelectLabelMarker:(id)marker;
- (void)mapView:(id)view didDeselectLabelMarker:(id)marker;
- (void)mapViewWillAnimateInAnnotationViews:(id)views;
- (void)mapViewDidAnimateInAnnotationViews:(id)views;
- (void)_mapView:(id)view calloutDidAppearForAnnotationView:(id)view;
- (void)mapView:(id)view canZoomInDidChange:(BOOL)change;
- (void)mapView:(id)view canZoomOutDidChange:(BOOL)change;
- (void)mapView:(id)view didBecomePitched:(BOOL)pitched;
- (void)mapView:(id)view canEnter3DModeDidChange:(BOOL)change;
- (void)mapView:(id)view canShowFlyoverDidChange:(BOOL)change;
- (void)mapView:(id)view showingFlyoverDidChange:(BOOL)change;
- (void)mapViewWillStartFlyoverTour:(id)tour;
- (void)mapView:(id)view didStopFlyoverTourCompleted:(BOOL)completed;
- (void)mapView:(id)view flyoverTourLabelDidChange:(id)change;
- (void)mapView:(id)view flyoverModeDidChange:(int)change;
- (void)mapView:(id)view flyoverModeWillChange:(int)change;
- (void)mapViewDidStartUserInteraction:(id)interaction;
- (void)mapViewDidStopUserInteraction:(id)interaction;
- (void)mapView:(id)view willStartRespondingToGesture:(long long)gesture animated:(BOOL)animated;
- (void)mapView:(id)view didStopRespondingToGesture:(long long)gesture zoomDirection:(long long)direction zoomGestureType:(long long)type didDecelerate:(BOOL)decelerate tiltDirection:(long long)direction;
- (struct CGPoint { double x0; double x1; })mapView:(id)view focusPointForPoint:(struct CGPoint { double x0; double x1; })point gesture:(long long)gesture;
- (BOOL)mapViewCompass3DButtonEnabled:(id)enabled;
- (void)mapViewCompass3DButtonTapped:(id)tapped;
- (void)mapViewDidFinishCalloutExpansion:(id)expansion;
- (id)mapViewCurrentRouteMatch:(id)match;
- (void)mapViewNavigationCameraHasStartedPanning:(id)panning;
- (void)mapViewNavigationCameraHasStoppedPanning:(id)panning;
- (void)mapViewNavigationCameraDidLeaveDefaultZoom:(id)zoom;
- (void)mapViewNavigationCameraDidReturnToDefaultZoom:(id)zoom;
- (void)mapView:(id)view calloutPrimaryActionTriggeredForLabelMarker:(id)marker;
- (void)mapView:(id)view calloutPrimaryActionTriggeredForAnnotationView:(id)view;
- (void)mapView:(id)view didChangeFocusedVenue:(id)venue focusedBuilding:(id)building;
- (void)mapView:(id)view didChangeDisplayedFloorOrdinal:(short)ordinal forVenue:(id)venue;
- (void)mapView:(id)view didUpdateYaw:(double)yaw;
- (void)mapView:(id)view didGetHikingToolTipRegionId:(unsigned long long)id;
- (void)mapViewDidChangeEdgeInsets:(id)insets;
- (void)mapView:(id)view didStopRespondingToGesture:(long long)gesture zoomDirection:(long long)direction didDecelerate:(BOOL)decelerate tiltDirection:(long long)direction;
@end

#endif /* MKMapViewDelegatePrivate_Protocol_h */
