//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNGeometrySource_h
#define SCNGeometrySource_h
@import Foundation;

#include "MTLBuffer-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@class NSData, NSString;

@interface SCNGeometrySource : NSObject<NSSecureCoding> {
  /* instance variables */
  struct __C3DMeshSource { struct __C3DGenericSource { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; struct __C3DSourceAccessor * x1; union { struct __CFData * x0; void * x1; void * x2; } x2; long long x3; unsigned int x4 :1; unsigned int x5 :1; unsigned int x6 :1; } x0; unsigned short x1; unsigned char x2; unsigned char x3; } * _meshSource;
  short _componentType;
  unsigned short _componentCount;
  struct CGColorSpace * _colorSpace;
  unsigned char _mkSemantic;
  NSObject<MTLBuffer> *_mtlBuffer;
  long long _mtlVertexFormat;
  BOOL _encodeDataAsHalf;
}

@property (readonly, nonatomic) NSData *data;
@property (readonly, nonatomic) NSString *semantic;
@property (readonly, nonatomic) long long vectorCount;
@property (readonly, nonatomic) BOOL floatComponents;
@property (readonly, nonatomic) long long componentsPerVector;
@property (readonly, nonatomic) long long bytesPerComponent;
@property (readonly, nonatomic) long long dataOffset;
@property (readonly, nonatomic) long long dataStride;

/* class methods */
+ (id)geometrySourceWithMDLVertexAttribute:(id)attribute mesh:(id)mesh;
+ (id)geometrySourceWithMeshSourceRef:(struct __C3DMeshSource { struct __C3DGenericSource { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; struct __C3DSourceAccessor * x1; union { struct __CFData * x0; void * x1; void * x2; } x2; long long x3; unsigned int x4 :1; unsigned int x5 :1; unsigned int x6 :1; } x0; unsigned short x1; unsigned char x2; unsigned char x3; } *)ref;
+ (id)dataByConvertingDoublesToFloats:(const double *)floats count:(long long)count;
+ (id)dataWithVector3Array:(const struct SCNVector3 { float x0; float x1; float x2; } *)array count:(long long)count bytesPerComponent:(long long *)component;
+ (id)dataWithPointArray:(const struct CGPoint { double x0; double x1; } *)array count:(long long)count bytesPerComponent:(long long *)component;
+ (id)geometrySourceWithData:(id)data semantic:(id)semantic vectorCount:(long long)count floatComponents:(BOOL)components componentsPerVector:(long long)vector bytesPerComponent:(long long)component dataOffset:(long long)offset dataStride:(long long)stride;
+ (id)_geometrySourceWithData:(id)data semantic:(id)semantic vectorCount:(long long)count componentType:(short)type componentCount:(unsigned long long)count dataOffset:(long long)offset dataStride:(long long)stride;
+ (id)geometrySourceWithVertices:(const struct SCNVector3 { float x0; float x1; float x2; } *)vertices count:(long long)count;
+ (id)geometrySourceWithNormals:(const struct SCNVector3 { float x0; float x1; float x2; } *)normals count:(long long)count;
+ (id)geometrySourceWithTextureCoordinates:(const struct CGPoint { double x0; double x1; } *)coordinates count:(long long)count;
+ (id)geometrySourceWithColorComponents:(const float *)components count:(long long)count hasAlpha:(BOOL)alpha colorSpace:(struct CGColorSpace *)space;
+ (id)geometrySourceWithColorData:(id)data colorSpace:(struct CGColorSpace *)space vectorCount:(long long)count floatComponents:(BOOL)components componentsPerVector:(long long)vector bytesPerComponent:(long long)component dataOffset:(long long)offset dataStride:(long long)stride;
+ (id)geometrySourceWithBuffer:(id)buffer vertexFormat:(unsigned long long)format semantic:(id)semantic vertexCount:(long long)count dataOffset:(long long)offset dataStride:(long long)stride;
+ (id)_geometrySourceWithSource:(id)source vertexFormat:(unsigned long long)format;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)initWithMeshSource:(struct __C3DMeshSource { struct __C3DGenericSource { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; struct __C3DSourceAccessor * x1; union { struct __CFData * x0; void * x1; void * x2; } x2; long long x3; unsigned int x4 :1; unsigned int x5 :1; unsigned int x6 :1; } x0; unsigned short x1; unsigned char x2; unsigned char x3; } *)source;
- (id)init;
- (void)dealloc;
- (id)description;
- (id)initWithData:(id)data semantic:(id)semantic colorSpace:(struct CGColorSpace *)space vectorCount:(long long)count floatComponents:(BOOL)components componentsPerVector:(long long)vector bytesPerComponent:(long long)component dataOffset:(long long)offset dataStride:(long long)stride;
- (id)initWithData:(id)data semantic:(id)semantic vectorCount:(long long)count componentType:(short)type componentCount:(unsigned long long)count dataOffset:(long long)offset dataStride:(long long)stride;
- (id)initWithBuffer:(id)buffer vertexFormat:(unsigned long long)format semantic:(id)semantic vertexCount:(long long)count dataOffset:(long long)offset dataStride:(long long)stride;
- (id)dataByConvertingColorData:(id)data colorSpace:(struct CGColorSpace *)space newColorSpace:(struct CGColorSpace * *)space vectorCount:(long long)count componentsPerVector:(long long)vector bytesPerComponent:(long long)component dataOffset:(long long)offset dataStride:(long long)stride newDataOffset:(long long *)offset newDataStride:(long long *)stride;
- (BOOL)_encodeDataAsHalf;
- (void)set_encodeDataAsHalf:(BOOL)half;
- (id)mkSemantic;
- (void)setMkSemantic:(id)semantic;
- (void)_printData;
- (short)_componentType;
- (void)_clearC3DCache;
- (struct __C3DScene *)sceneRef;
- (id)scene;
- (void *)__CFObject;
- (struct __C3DMeshSource { struct __C3DGenericSource { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; struct __C3DSourceAccessor * x1; union { struct __CFData * x0; void * x1; void * x2; } x2; long long x3; unsigned int x4 :1; unsigned int x5 :1; unsigned int x6 :1; } x0; unsigned short x1; unsigned char x2; unsigned char x3; } *)meshSource;
- (id)_uninterleaveData:(id)data count:(unsigned long long)count srcOffset:(unsigned long long)offset srcStride:(unsigned long long)stride dstStride:(unsigned long long)stride;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
@end

#endif /* SCNGeometrySource_h */
