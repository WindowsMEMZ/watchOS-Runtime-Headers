//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNNodeJSExport_Protocol_h
#define SCNNodeJSExport_Protocol_h
@import Foundation;

@protocol SCNNodeJSExport <JSExport>

@property (readonly, nonatomic) NSArray *audioPlayers;
@property (copy, nonatomic) NSString *name;
@property (retain, nonatomic) SCNLight *light;
@property (retain, nonatomic) SCNCamera *camera;
@property (retain, nonatomic) SCNGeometry *geometry;
@property (retain, nonatomic) SCNSkinner *skinner;
@property (retain, nonatomic) SCNMorpher *morpher;
@property (nonatomic) struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; } transform;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } position;
@property (nonatomic) struct SCNVector4 { float x0; float x1; float x2; float x3; } rotation;
@property (nonatomic) struct SCNVector4 { float x0; float x1; float x2; float x3; } orientation;
@property (nonatomic) struct SCNVector4 { float x0; float x1; float x2; float x3; } worldOrientation;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } eulerAngles;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } scale;
@property (nonatomic) struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; } pivot;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } worldPosition;
@property (readonly, nonatomic) struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; } worldTransform;
@property (nonatomic) BOOL hidden;
@property (nonatomic) double opacity;
@property (nonatomic) long long renderingOrder;
@property (nonatomic) BOOL castsShadow;
@property (nonatomic) long long movabilityHint;
@property (readonly, nonatomic) SCNNode *parentNode;
@property (readonly, nonatomic) NSArray *childNodes;
@property (retain, nonatomic) SCNPhysicsBody *physicsBody;
@property (retain, nonatomic) SCNPhysicsField *physicsField;
@property (copy) NSArray *constraints;
@property (copy, nonatomic) NSArray *filters;
@property (readonly, nonatomic) SCNNode *presentationNode;
@property (nonatomic) BOOL paused;
@property (nonatomic) NSObject<SCNNodeRendererDelegate> *rendererDelegate;
@property (nonatomic) unsigned long long categoryBitMask;
@property (readonly, nonatomic) struct SCNVector3 { float x0; float x1; float x2; } worldUp;
@property (readonly, nonatomic) struct SCNVector3 { float x0; float x1; float x2; } worldRight;
@property (readonly, nonatomic) struct SCNVector3 { float x0; float x1; float x2; } worldFront;
@property (readonly) NSArray *particleSystems;

/* class methods */
+ (id)node;
+ (id)nodeWithGeometry:(id)geometry;
+ (id)nodeWithMDLObject:(id)mdlobject;
+ (struct SCNVector3 { float x0; float x1; float x2; })localUp;
+ (struct SCNVector3 { float x0; float x1; float x2; })localRight;
+ (struct SCNVector3 { float x0; float x1; float x2; })localFront;
/* instance methods */
- (void)addAudioPlayer:(id)player;
- (void)removeAllAudioPlayers;
- (void)removeAudioPlayer:(id)player;
- (id)clone;
- (id)flattenedClone;
- (void)addChildNode:(id)node;
- (void)insertChildNode:(id)node atIndex:(unsigned long long)index;
- (void)removeFromParentNode;
- (void)replaceChildNode:(id)node with:(id)with;
- (id)childNodeWithName:(id)name recursively:(BOOL)recursively;
- (id)childNodesPassingTest:(id /* block */)test;
- (void)enumerateChildNodesUsingBlock:(id /* block */)block;
- (void)enumerateHierarchyUsingBlock:(id /* block */)block;
- (struct SCNVector3 { float x0; float x1; float x2; })convertPosition:(struct SCNVector3 { float x0; float x1; float x2; })position toNode:(id)node;
- (struct SCNVector3 { float x0; float x1; float x2; })convertPosition:(struct SCNVector3 { float x0; float x1; float x2; })position fromNode:(id)node;
- (struct SCNVector3 { float x0; float x1; float x2; })convertVector:(struct SCNVector3 { float x0; float x1; float x2; })vector toNode:(id)node;
- (struct SCNVector3 { float x0; float x1; float x2; })convertVector:(struct SCNVector3 { float x0; float x1; float x2; })vector fromNode:(id)node;
- (struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })convertTransform:(struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })transform toNode:(id)node;
- (struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })convertTransform:(struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })transform fromNode:(id)node;
- (id)hitTestWithSegmentFromPoint:(struct SCNVector3 { float x0; float x1; float x2; })point toPoint:(struct SCNVector3 { float x0; float x1; float x2; })point options:(id)options;
- (void)lookAt:(struct SCNVector3 { float x0; float x1; float x2; })at;
- (void)lookAt:(struct SCNVector3 { float x0; float x1; float x2; })at up:(struct SCNVector3 { float x0; float x1; float x2; })up localFront:(struct SCNVector3 { float x0; float x1; float x2; })front;
- (void)localTranslateBy:(struct SCNVector3 { float x0; float x1; float x2; })by;
- (void)localRotateBy:(struct SCNVector4 { float x0; float x1; float x2; float x3; })by;
- (void)rotateBy:(struct SCNVector4 { float x0; float x1; float x2; float x3; })by aroundTarget:(struct SCNVector3 { float x0; float x1; float x2; })target;
- (void)addParticleSystem:(id)system;
- (void)removeAllParticleSystems;
- (void)removeParticleSystem:(id)system;
- (void)addAnimation:(id)animation forKey:(id)key;
- (void)removeAllAnimations;
- (void)removeAnimationForKey:(id)key;
- (id)animationKeys;
- (id)animationForKey:(id)key;
- (void)pauseAnimationForKey:(id)key;
- (void)resumeAnimationForKey:(id)key;
- (id)copy;
- (id)getBoundingBox;
- (id)getBoundingSphere;
- (void)setValue:(id)value forKeyPath:(id)path;
- (void)setValue:(id)value forKey:(id)key;
- (id)valueForKey:(id)key;
- (id)valueForKeyPath:(id)path;
- (id)childNodeWithName:(id)name;
- (void)runAction:(id)action;
- (void)runAction:(id)action completionHandler:(id /* block */)handler;
- (void)runAction:(id)action forKey:(id)key;
- (void)runAction:(id)action forKey:(id)key completionHandler:(id /* block */)handler;
- (BOOL)hasActions;
- (id)actionForKey:(id)key;
- (void)removeActionForKey:(id)key;
- (void)removeAllActions;
- (BOOL)isHidden;
- (BOOL)isPaused;
@end

#endif /* SCNNodeJSExport_Protocol_h */
