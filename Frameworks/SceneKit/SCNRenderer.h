//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNRenderer_h
#define SCNRenderer_h
@import Foundation;

#include "MTLTexture-Protocol.h"
#include "SCNAuthoringEnvironment.h"
#include "SCNMTLRenderContext.h"
#include "SCNMTLRenderContextCommandBufferStatusMonitor-Protocol.h"
#include "SCNMTLRenderContextResourceManagerMonitor-Protocol.h"
#include "SCNNode.h"
#include "SCNRecursiveLock.h"
#include "SCNRenderer.h"
#include "SCNRendererTransitionContext.h"
#include "SCNScene.h"
#include "SCNSceneRenderer-Protocol.h"
#include "SCNTechnique.h"
#include "SCNTechniqueSupport-Protocol.h"

@class AVAudioEngine, AVAudioEnvironmentNode, NSArray, NSString, SKScene, UIColor, __SKSCNRenderer;
@protocol OS_dispatch_queue, SCNSceneRendererDelegate, _SCNSceneCommandBufferStatusMonitor, _SCNSceneRendererResourceManagerMonitor;

@interface SCNRenderer : NSObject<SCNMTLRenderContextCommandBufferStatusMonitor, SCNMTLRenderContextResourceManagerMonitor, SCNSceneRenderer, SCNTechniqueSupport> {
  /* instance variables */
  SCNNode *_pointOfCulling;
  SCNRecursiveLock *_lock;
  NSObject<OS_dispatch_queue> *__renderingQueue;
  NSObject<OS_dispatch_queue> *__prepareQueue;
  unsigned long long __antialiasingMode;
  unsigned long long __preparePixelFormat;
  struct { struct __C3DFramebuffer *frameBuffer; struct __C3DFramebuffer *multisamplingFrameBuffer; struct CGSize { double width; double height; } drawableSize; } _framebufferInfo;
  NSObject<MTLTexture> *_mtlTexture;
  NSArray *_viewpoints;
  unsigned long long _viewpointCoordinateSpace;
  BOOL _pointOfViewWasSet;
  unsigned int x :1 _shouldDeleteFramebuffer;
  unsigned int x :1 _rendersContinuously;
  unsigned int x :1 _isPrivateRenderer;
  unsigned int x :1 _isViewPrivateRenderer;
  unsigned int x :1 _renderingSnapshot;
  unsigned int x :1 _renderingPrepare;
  unsigned int x :1 _autoUpdate;
  unsigned int x :1 _disableLinearRendering;
  double _currentSceneTime;
  double _currentSystemTime;
  double _deltaTime;
  double _forceSystemTime;
  double _lastSystemTime;
  double __nextFrameTime;
  SCNRendererTransitionContext *_transitionContext;
  BOOL _isAnimating;
  unsigned int _adaptativeState0;
  unsigned int _adaptativeEndFrame;
  unsigned int _adaptativeTechniqueTimeStamp;
  struct __C3DEngineContext * _engineContext;
  struct SCNVector4 { float x; float y; float z; float w; } __viewport;
  double __aspectRatio;
   __drawableSafeAreaInsets;
  SCNMTLRenderContext *_renderContext;
  unsigned int x :1 _frozen;
  unsigned int x :1 _shouldForwardSceneRendererDelegationMessagesToSelf;
  unsigned int x :1 _shouldForwardSceneRendererDelegationMessagesToPrivateRendererOwner;
  struct { unsigned int x :1 supportsUpdate; unsigned int x :1 supportsDidApplyAnimations; unsigned int x :1 supportsDidSimulatePhysics; unsigned int x :1 supportsDidApplyConstraints; unsigned int x :1 supportsWillRender; unsigned int x :1 supportsDidRender; unsigned int x :1 supportsInputTime; unsigned int x :1 supportsReadSubdivCache; unsigned int x :1 supportsWriteSubdivCache; } _selfDelegationConformance;
  struct { unsigned int x :1 supportsUpdate; unsigned int x :1 supportsDidApplyAnimations; unsigned int x :1 supportsDidSimulatePhysics; unsigned int x :1 supportsDidApplyConstraints; unsigned int x :1 supportsWillRender; unsigned int x :1 supportsDidRender; unsigned int x :1 supportsInputTime; unsigned int x :1 supportsReadSubdivCache; unsigned int x :1 supportsWriteSubdivCache; } _privateRendererOwnerDelegationConformance;
  struct { unsigned int x :1 supportsUpdate; unsigned int x :1 supportsDidApplyAnimations; unsigned int x :1 supportsDidSimulatePhysics; unsigned int x :1 supportsDidApplyConstraints; unsigned int x :1 supportsWillRender; unsigned int x :1 supportsDidRender; unsigned int x :1 supportsInputTime; unsigned int x :1 supportsReadSubdivCache; unsigned int x :1 supportsWriteSubdivCache; } _delegationConformance;
  UIColor *_backgroundColor;
  struct C3DColor4 { union { float x[4] rgba; struct { float r; float g; float b; float a; } x0; } x0; } _c3dBackgroundColor;
  SCNRenderer *_preloadRenderer;
  NSObject<SCNSceneRenderer> *_privateRendererOwner;
  SCNRenderer *_snapshotRenderer;
  __SKSCNRenderer *_overlayRenderer;
  id _overlayScene;
  BOOL _disableOverlays;
  float _contentScaleFactor;
  BOOL _isRunningInExtension;
  SCNAuthoringEnvironment *_authoringEnvironment;
  BOOL _showStatistics;
  BOOL _showAuthoringEnvironment;
  double _statisticsTimeStamp;
  NSObject<_SCNSceneRendererResourceManagerMonitor> *_resourceManagerMonitor;
  NSObject<_SCNSceneCommandBufferStatusMonitor> *_commandBufferStatusMonitor;
}

@property (retain, nonatomic) SCNScene *scene;
@property (readonly, nonatomic) double nextFrameTime;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) double sceneTime;
@property (weak, nonatomic) NSObject<SCNSceneRendererDelegate> *delegate;
@property BOOL playing;
@property (nonatomic) BOOL loops;
@property (retain, nonatomic) SCNNode *pointOfView;
@property (nonatomic) BOOL autoenablesDefaultLighting;
@property (nonatomic) BOOL jitteringEnabled;
@property (nonatomic) BOOL temporalAntialiasingEnabled;
@property (nonatomic) BOOL showsStatistics;
@property (nonatomic) unsigned long long debugOptions;
@property (retain, nonatomic) SKScene *overlaySKScene;
@property (readonly, nonatomic) unsigned long long renderingAPI;
@property (readonly, nonatomic) struct CGColorSpace * workingColorSpace;
@property (readonly, nonatomic) AVAudioEngine *audioEngine;
@property (readonly, nonatomic) AVAudioEnvironmentNode *audioEnvironmentNode;
@property (retain, nonatomic) SCNNode *audioListener;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } currentViewport;
@property (nonatomic) BOOL usesReverseZ;
@property (copy, nonatomic) SCNTechnique *technique;

/* class methods */
+ (id)rendererWithDevice:(id)device options:(id)options;

/* instance methods */
- (BOOL)renderMovieToURL:(id)url size:(struct CGSize { double x0; double x1; })size antialiasingMode:(unsigned long long)mode attributes:(id)attributes error:(id *)error;
- (id)init;
- (void)_setupOffscreenRendererWithSize:(struct CGSize { double x0; double x1; })size;
- (id)_initWithOptions:(id)options isPrivateRenderer:(BOOL)renderer privateRendererOwner:(id)owner clearsOnDraw:(BOOL)draw context:(void *)context renderingAPI:(unsigned long long)api;
- (void)dealloc;
- (id)currentCommandBuffer;
- (id)currentRenderPassDescriptor;
- (id)currentRenderCommandEncoder;
- (id)device;
- (id)commandQueue;
- (unsigned long long)colorPixelFormat;
- (unsigned long long)depthPixelFormat;
- (unsigned long long)stencilPixelFormat;
- (void)lock;
- (void)unlock;
- (id)_renderingQueue;
- (void)_installViewport;
- (void)_clearBackBuffer;
- (void)_setContentsScaleFactor:(double)factor;
- (double)_contentsScaleFactor;
- (struct CGSize { double x0; double x1; })_backingSize;
- (void)_setBackingSize:(struct CGSize { double x0; double x1; })size;
- (void)_invalidateFramebuffer;
- (void)_beginFrame;
- (void)_endFrame;
- (void)_prepareRenderTarget;
- (void)_createOffscreenFramebufferIfNeeded;
- (void)_createPrepareFramebufferIfNeeded;
- (unsigned long long)_antialiasingMode;
- (void)set_antialiasingMode:(unsigned long long)mode;
- (unsigned long long)_preparePixelFormat;
- (void)set_preparePixelFormat:(unsigned long long)format;
- (void)set_superSamplingFactor:(double)factor;
- (double)_superSamplingFactor;
- (void)set_aspectRatio:(double)ratio;
- (double)_aspectRatio;
- (void)set_screenTransform:(struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })transform;
- (struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })_screenTransform;
- (struct __C3DEngineContext *)_engineContext;
- (id)_renderContextMetal;
- (long long)_getFrameIndex;
- (void *)__CFObject;
- (void)setPointOfCulling:(id)culling;
- (id)pointOfCulling;
- (3)adjustViewportForRendering:;
- (void)_projectPoints:(struct SCNVector3 { float x0; float x1; float x2; } *)points count:(unsigned long long)count viewport:(struct SCNVector4 { float x0; float x1; float x2; float x3; })viewport;
- (struct SCNVector3 { float x0; float x1; float x2; })_projectPoint:(struct SCNVector3 { float x0; float x1; float x2; })point viewport:(struct SCNVector4 { float x0; float x1; float x2; float x3; })viewport;
- (struct SCNVector3 { float x0; float x1; float x2; })_unprojectPoint:(struct SCNVector3 { float x0; float x1; float x2; })point viewport:(struct SCNVector4 { float x0; float x1; float x2; float x3; })viewport;
- (struct SCNVector3 { float x0; float x1; float x2; })projectPoint:(struct SCNVector3 { float x0; float x1; float x2; })point;
- (struct SCNVector3 { float x0; float x1; float x2; })unprojectPoint:(struct SCNVector3 { float x0; float x1; float x2; })point;
- (void)_didRenderScene:(id)scene;
- (void)_willRenderScene:(id)scene;
- (id)_readSubdivCacheForHash:(id)hash;
- (void)_writeSubdivCacheForHash:(id)hash dataProvider:(id /* block */)provider;
- (void)setAutoAdjustCamera:(BOOL)camera;
- (BOOL)autoAdjustCamera;
- (id)_defaultPOVForScene:(id)scene;
- (void)_updatePointOfView;
- (void)__setTransitionContext:(id)context;
- (void)_prepareForTransition:(id)transition outgoingScene:(id)scene outgoingPointOfView:(id)view completionHandler:(id /* block */)handler;
- (void)presentScene:(id)scene withTransition:(id)transition incomingPointOfView:(id)view completionHandler:(id /* block */)handler;
- (void)setScene:(id)scene completionHandler:(id /* block */)handler;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)color;
- (void)_c3dBackgroundColorDidChange;
- (BOOL)disableOverlays;
- (void)setDisableOverlays:(BOOL)overlays;
- (id)metalLayer;
- (id)metalDevice;
- (id)_setupSKRendererIfNeeded;
- (id)_prepareSKRenderer;
- (void)_overlaysDidUpdate:(id)update;
- (id)_copyPassDescription;
- (id)_copyRenderGraphDescription;
- (void)_renderGraphFrameRecordingAtPath:(id)path withCompletion:(id /* block */)completion;
- (BOOL)_recordWithoutExecute;
- (void)set_recordWithoutExecute:(BOOL)execute;
- (id)_computedLightingEnvironmentMapsPath;
- (void)set_computedLightingEnvironmentMapsPath:(id)path;
- (BOOL)_preloadResource:(id)resource abortHandler:(id /* block */)handler;
- (BOOL)_preparePreloadRenderer:(id)renderer;
- (void)_releasePreloadRenderer;
- (BOOL)prepareObject:(id)object shouldAbortBlock:(id /* block */)block;
- (BOOL)_prepareObject:(id)object shouldAbortBlock:(id /* block */)block;
- (void)prepareObjects:(id)objects withCompletionHandler:(id /* block */)handler;
- (id)programWithNode:(id)node withMaterial:(id)material;
- (void)_updateEngineCallbacks;
- (BOOL)_wantsSceneRendererDelegationMessages;
- (void)set_wantsSceneRendererDelegationMessages:(BOOL)messages;
- (BOOL)_shouldForwardSceneRendererDelegationMessagesToPrivateRendererOwner;
- (void)set_shouldForwardSceneRendererDelegationMessagesToPrivateRendererOwner:(BOOL)owner;
- (id)_resourceManagerMonitor;
- (void)set_resourceManagerMonitor:(id)monitor;
- (void)renderContext:(id)context didFallbackToDefaultTextureForSource:(id)source message:(id)message;
- (id)_commandBufferStatusMonitor;
- (void)set_commandBufferStatusMonitor:(id)monitor;
- (void)renderContext:(id)context commandBufferDidCompleteWithError:(id)error;
- (void)updateCurrentTimeIfPlayingWithSystemTime:(double)time;
- (void)set_nextFrameTime:(double)time;
- (double)_nextFrameTime;
- (BOOL)_needsRepetitiveRedraw;
- (double)currentTime;
- (void)setCurrentTime:(double)time;
- (void)_setSceneTime:(double)time;
- (double)_systemTime;
- (void)set_systemTime:(double)time;
- (void)set_deltaTime:(double)time;
- (void)_update:(struct __C3DScene *)_update;
- (void)_updateWithSystemTime:(double)time;
- (void)updateAtTime:(double)time;
- (void)updateAndDrawStatisticsIfNeeded;
- (void)_drawOverlaySceneAtTime:(double)time;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test options:(id)options;
- (id)hitTestWithSegmentFromPoint:(struct SCNVector3 { float x0; float x1; float x2; })point toPoint:(struct SCNVector3 { float x0; float x1; float x2; })point options:(id)options;
- (id)_hitTest:(struct CGPoint { double x0; double x1; })test viewport:(struct CGSize { double x0; double x1; })viewport options:(id)options;
- (BOOL)_isNodeInsideFrustum:(id)frustum withPointOfView:(id)view viewport:(struct SCNVector4 { float x0; float x1; float x2; float x3; })viewport;
- (BOOL)isNodeInsideFrustum:(id)frustum withPointOfView:(id)view;
- (id)_nodesInsideFrustumWithPointOfView:(id)view viewport:(struct SCNVector4 { float x0; float x1; float x2; float x3; })viewport;
- (id)nodesInsideFrustumWithPointOfView:(id)view;
- (void)_play;
- (void)_pause;
- (void)_stop;
- (BOOL)isPlaying;
- (void)setRendersContinuously:(BOOL)continuously;
- (BOOL)isJitteringEnabled;
- (BOOL)vertexAmplificationEnabled;
- (BOOL)isVertexAmplificationEnabled;
- (BOOL)forceAsyncShaderCompilation;
- (void)setForceAsyncShaderCompilation:(BOOL)compilation;
- (void)setVertexAmplificationEnabled:(BOOL)enabled;
- (BOOL)isTemporalAntialiasingEnabled;
- (BOOL)frozen;
- (void)setFrozen:(BOOL)frozen;
- (id)_copyPerformanceStatistics;
- (void)_displayLinkStatsTick;
- (void)_displayLinkStatsTack;
- (void)_runningInExtension;
- (void)_presentFramebuffer;
- (void)_reloadDebugOptions;
- (BOOL)_disableLinearRendering;
- (void)set_disableLinearRendering:(BOOL)rendering;
- (BOOL)_collectCompilationErrors;
- (void)set_collectCompilationErrors:(BOOL)errors;
- (id)_compilationErrors;
- (BOOL)_showsAuthoringEnvironment;
- (void)set_showsAuthoringEnvironment:(BOOL)environment;
- (void)setupAuthoringEnvironment;
- (id)_authoringEnvironment;
- (struct SCNVector4 { float x0; float x1; float x2; float x3; })_viewport;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })viewport;
- (void)set_viewport:(struct SCNVector4 { float x0; float x1; float x2; float x3; })set_viewport;
- (1)_drawableSafeAreaInsets;
- (void)set_drawableSafeAreaInsets:;
- (id)MTLTexture;
- (void)_drawWithJitteringPresentationMode;
- (void)_renderSceneWithEngineContext:(struct __C3DEngineContext *)context sceneTime:(double)time;
- (BOOL)_drawSceneWithNewRenderer:(struct __C3DScene *)renderer;
- (BOOL)_needsRedrawAsap;
- (double)_computeNextFrameTime;
- (void)_drawScene:(struct __C3DScene *)scene;
- (void)_updateSystemTimeAndDeltaTimeWithCurrentTime:(double)time;
- (void)_draw;
- (void)_drawAtTime:(double)time;
- (void)_renderAtTime:(double)time;
- (void)renderAtTime:(double)time;
- (void)renderWithViewport:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })viewport commandBuffer:(id)buffer passDescriptor:(id)descriptor;
- (void)renderAtTime:(double)time viewport:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })viewport commandBuffer:(id)buffer passDescriptor:(id)descriptor;
- (void)_renderAtTime:(double)time viewport:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })viewport encoder:(id)encoder passDescriptor:(id)descriptor commandQueue:(id)queue commandBuffer:(id)buffer;
- (void)renderAtTime:(double)time viewport:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })viewport encoder:(id)encoder passDescriptor:(id)descriptor commandQueue:(id)queue;
- (void)renderWithCommandBuffer:(id)buffer viewPoints:(id)points;
- (void)renderWithCommandBuffer:(id)buffer viewpoints:(id)viewpoints coordinateSpace:(unsigned long long)space;
- (void)renderAtTime:(double)time encoder:(id)encoder commandQueue:(id)queue passDescriptor:(id)descriptor viewPoints:(id)points;
- (void)renderAtTime:(double)time encoder:(id)encoder commandQueue:(id)queue passDescriptor:(id)descriptor viewPoints:(id)points coordinateSpace:(unsigned long long)space;
- (void)renderAtTime:(double)time commandBuffer:(id)buffer viewPoints:(id)points;
- (void)render;
- (struct CGImage *)createSnapshot:(double)snapshot error:(id *)error;
- (id)snapshotAtTime:(double)time;
- (struct CGImage *)_createBackgroundColorImageWithSize:(struct CGSize { double x0; double x1; })size;
- (id)snapshotAtTime:(double)time withSize:(struct CGSize { double x0; double x1; })size antialiasingMode:(unsigned long long)mode;
- (id)snapshotAtTime:(double)time withSize:(struct CGSize { double x0; double x1; })size antialiasingMode:(unsigned long long)mode error:(id *)error;
- (struct CGImage *)_createSnapshotAtTime:(double)time withSize:(struct CGSize { double x0; double x1; })size antialiasingMode:(unsigned long long)mode;
- (struct CGImage *)_createSnapshotAtTime:(double)time withSize:(struct CGSize { double x0; double x1; })size antialiasingMode:(unsigned long long)mode error:(id *)error;
- (id)snapshotRendererWithSize:(struct CGSize { double x0; double x1; })size;
- (void)_updateProbes:(id)probes withProgress:(id)progress;
- (void)updateProbes:(id)probes atTime:(double)time;
- (void)_jitterAtStep:(unsigned long long)step updateMainFramebuffer:(BOOL)framebuffer redisplay:(BOOL)redisplay jitterer:(id)jitterer;
- (id)privateRendererOwner;
- (void)_addGPUFrameScheduledHandler:(id /* block */)handler;
- (void)_addGPUFrameCompletedHandler:(id /* block */)handler;
- (void)_addGPUFramePresentedHandler:(id /* block */)handler;
- (void)_allowGPUBackgroundExecution;
@end

#endif /* SCNRenderer_h */
