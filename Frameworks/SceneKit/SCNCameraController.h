//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNCameraController_h
#define SCNCameraController_h
@import Foundation;

#include "SCNCameraControllerDelegate-Protocol.h"
#include "SCNNode.h"

@interface SCNCameraController : NSObject {
  /* instance variables */
  struct { " angles; int x0; in int x1; int128 x2; int x3; a x4; long x5; atomic  x6; unsigned int x7 :0; short x8; out long x9; u x10; int128 x11; e x12; atomic  x13; in g x14; long x15; e x16; short x17; int x18; in int x19; int128 x20; int x21; a x22; long x23; unsigned int128 x24; const a x25; in short x26; float x27; out const m x28; W x29; out const long x30; double x31; char {?=; out long x32; u x33; m x34; in short x35; int [4]}; in int x36; int128 x37; int x38; a x39; long x40; by copy const int x41; e x42; in int128 x43; a x44; int128 x45; int x46; out in W x47; out const long x48; double x49; void {?=; e x50; char x51; int128 x52; out const " x53; } x54; } _orientationState;
  struct { " start; char x0; u x1; const const e x2; in int128 x3; long x4; a x5; short x6; int128 x7; " x8; } _inputLocation;
  struct { " localArcballAdjustement; short x0; p x1; h x2; e x3; const e x4; unsigned long x5; out char x6; a x7; int128 x8; int x9; out in unsigned short x10; int128 x11; a x12; const int128 x13; short x14; p x15; h x16; e x17; const e x18; unsigned long x19; out char x20; a x21; int128 x22; int x23; out in unsigned char x24; u x25; const const e x26; in int128 x27; " x28; } _arcball;
  struct { BOOL inertiaEnabled; BOOL inertiaRunning; double lastSimulationTime; float friction; float rotationSensitivity; float translationSensitivity; " velocity; int128 x0; int x1; m x2; e x3; const " x4; NSTimer * x5; } _inertia;
   _minimumAngles;
   _maximumAngles;
  BOOL _handlingInteraction;
  BOOL _drivenBydefaultNavigationCameraController;
}

@property (nonatomic) BOOL drivenByDefaultNavigationCameraController;
@property (nonatomic)  simdUp;
@property (nonatomic)  simdTarget;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } up;
@property (nonatomic) float verticalMaximumAngle;
@property (nonatomic) float horizontalMaximumAngle;
@property (nonatomic) NSObject<SCNCameraControllerDelegate> *delegate;
@property (retain, nonatomic) SCNNode *pointOfView;
@property (nonatomic) long long interactionMode;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } target;
@property (nonatomic) BOOL automaticTarget;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } worldUp;
@property (nonatomic) BOOL inertiaEnabled;
@property (nonatomic) float inertiaFriction;
@property (readonly, nonatomic) BOOL inertiaRunning;
@property (nonatomic) float minimumVerticalAngle;
@property (nonatomic) float maximumVerticalAngle;
@property (nonatomic) float minimumHorizontalAngle;
@property (nonatomic) float maximumHorizontalAngle;

/* instance methods */
- (4)_orthographicViewSpaceTranslationForZoomAtScreenPoint:(float)point scaleDelta:(struct CGSize { double x0; double x1; })delta;
- (void)updateInertiaAtTime:(double)time;
- (id)init;
- (void)dealloc;
- (void)setPointOfView:(id)view updateUpTransform:(BOOL)transform;
- (BOOL)isInertiaRunning;
- (void)translateInCameraSpaceByX:(float)x Y:(float)y Z:(float)z;
- (void)translateInScreenSpaceTo:(struct CGPoint { double x0; double x1; })to viewport:(struct CGSize { double x0; double x1; })viewport;
- (void)rotateByX:(float)x Y:(float)y;
- (void)rollCameraSpaceBy:(float)by withPoint:(struct CGPoint { double x0; double x1; })point viewport:(struct CGSize { double x0; double x1; })viewport;
- (void)rollAroundTarget:(float)target;
- (void)dollyToTarget:(float)target;
- (BOOL)useOrbitInteractionMode;
- (struct )unrolledWorldOrientation:(out float *)orientation;
- (void)clearRoll;
- (void)stopInertia;
- (void)frameNodes:(id)nodes;
- (struct { x0[4] })lookAtWith:target:;
- (void)beginInteraction:(struct CGPoint { double x0; double x1; })interaction withViewport:(struct CGSize { double x0; double x1; })viewport;
- (void)continueInteraction:(struct CGPoint { double x0; double x1; })interaction withViewport:(struct CGSize { double x0; double x1; })viewport sensitivity:(double)sensitivity;
- (void)endInteraction:(struct CGPoint { double x0; double x1; })interaction withViewport:(struct CGSize { double x0; double x1; })viewport velocity:(struct CGPoint { double x0; double x1; })velocity;
- (void)rollBy:(float)by aroundScreenPoint:(struct CGPoint { double x0; double x1; })point viewport:(struct CGSize { double x0; double x1; })viewport;
- (void)dollyBy:(float)by onScreenPoint:(struct CGPoint { double x0; double x1; })point viewport:(struct CGSize { double x0; double x1; })viewport;
- (void)_resetOrientationState;
- (4)_directionForScreenPoint:(struct CGPoint { double x0; double x1; })point viewport:(struct CGSize { double x0; double x1; })viewport;
- (void)_updateInertiaAtTime:(double)time;
- (1)_targetRelativeToPointOfViewParent;
- (void)_translateInCameraSpaceByX:(float)x Y:(float)y Z:(float)z;
- (void)_rotateByX:(float)x Y:(float)y;
- (struct )_orientationForMode;
- (void)_capOrientationAnglesToMaximum;
- (void)_updateRotation;
- (struct )_convertRotationFromWorldToPointOfView:(struct )view;
- (void)_updateArcballOrientation;
- (BOOL)_isLocationValid:(struct CGPoint { double x0; double x1; })valid inViewport:(struct CGSize { double x0; double x1; })viewport;
- (4)_mapToSphere:(struct CGPoint { double x0; double x1; })sphere inViewport:(struct CGSize { double x0; double x1; })viewport;
- (void)_endDraggingWithVelocity:(struct CGPoint { double x0; double x1; })velocity;
- (void)_setInertiaRunning:(BOOL)running;
@end

#endif /* SCNCameraController_h */
