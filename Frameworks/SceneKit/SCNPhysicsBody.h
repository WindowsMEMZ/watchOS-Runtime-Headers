//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNPhysicsBody_h
#define SCNPhysicsBody_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"
#include "SCNNode.h"
#include "SCNPhysicsShape.h"

@interface SCNPhysicsBody : NSObject<NSCopying, NSSecureCoding> {
  /* instance variables */
  SCNNode *_node;
  BOOL _ignoreGravity;
  BOOL _explicitMomentOfInertia;
  BOOL _isDefaultShape;
  void * _body;
}

@property (nonatomic) long long type;
@property (nonatomic) double mass;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } momentOfInertia;
@property (nonatomic) BOOL usesDefaultMomentOfInertia;
@property (nonatomic) double charge;
@property (nonatomic) double friction;
@property (nonatomic) double restitution;
@property (nonatomic) double rollingFriction;
@property (retain, nonatomic) SCNPhysicsShape *physicsShape;
@property (readonly, nonatomic) BOOL isResting;
@property (nonatomic) BOOL allowsResting;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } velocity;
@property (nonatomic) struct SCNVector4 { float x0; float x1; float x2; float x3; } angularVelocity;
@property (nonatomic) double damping;
@property (nonatomic) double angularDamping;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } velocityFactor;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } angularVelocityFactor;
@property (nonatomic) unsigned long long categoryBitMask;
@property (nonatomic) unsigned long long collisionBitMask;
@property (nonatomic) unsigned long long contactTestBitMask;
@property (nonatomic) BOOL affectedByGravity;
@property (nonatomic) double continuousCollisionDetectionThreshold;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } centerOfMassOffset;
@property (nonatomic) double linearRestingThreshold;
@property (nonatomic) double angularRestingThreshold;

/* class methods */
+ (id)bodyWithType:(long long)type shape:(id)shape;
+ (id)staticBody;
+ (id)dynamicBody;
+ (id)kinematicBody;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)initWithType:(long long)type shape:(id)shape;
- (struct __C3DScene *)sceneRef;
- (void *)_handle;
- (void)dealloc;
- (BOOL)respondsToCollision;
- (void)updateGlobalScale:(double)scale;
- (void)setLinearSleepingThreshold:(double)threshold;
- (double)linearSleepingThreshold;
- (void)setAngularSleepingThreshold:(double)threshold;
- (double)angularSleepingThreshold;
- (struct btCollisionShape { undefined * * x0; int x1; void * x2; } *)_shapeHandleWithShape:(id)shape owner:(id)owner;
- (double)continuousCollisionDetection;
- (BOOL)isAffectedByGravity;
- (void)applyForce:(struct SCNVector3 { float x0; float x1; float x2; })force impulse:(BOOL)impulse;
- (void)applyForce:(struct SCNVector3 { float x0; float x1; float x2; })force atPosition:(struct SCNVector3 { float x0; float x1; float x2; })position impulse:(BOOL)impulse;
- (void)applyTorque:(struct SCNVector4 { float x0; float x1; float x2; float x3; })torque impulse:(BOOL)impulse;
- (void)_activate;
- (void)clearAllForces;
- (void)setResting:(BOOL)resting;
- (void)resetToTransform:(struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })transform;
- (void)resetTransform;
- (void)moveToPosition:(struct SCNVector3 { float x0; float x1; float x2; })position;
- (void)rotateToAxisAngle:(struct SCNVector4 { float x0; float x1; float x2; float x3; })angle;
- (void)moveToTransform:(struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })transform;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)copy;
- (void *)_createBody;
- (void)_ownerWillDie;
- (void)_removeOwner;
- (void)_setOwner:(id)owner;
- (id)_owner;
- (void)_didDecodeSCNPhysicsBody:(id)body;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
@end

#endif /* SCNPhysicsBody_h */
