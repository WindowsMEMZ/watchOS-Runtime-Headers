//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNView_h
#define SCNView_h
@import Foundation;

#include "UIView.h"
#include "MTLDevice-Protocol.h"
#include "SCNCameraControlConfiguration-Protocol.h"
#include "SCNCameraController.h"
#include "SCNDisplayLink.h"
#include "SCNEventHandler-Protocol.h"
#include "SCNJitterer.h"
#include "SCNNode.h"
#include "SCNRecursiveLock.h"
#include "SCNRenderer.h"
#include "SCNScene.h"
#include "SCNSceneRenderer-Protocol.h"
#include "SCNSpriteKitEventHandler.h"
#include "SCNTechnique.h"
#include "SCNTechniqueSupport-Protocol.h"

@class AVAudioEngine, AVAudioEnvironmentNode, CALayer, NSArray, NSString, SKScene, UIColor;
@protocol SCNSceneRendererDelegate;

@interface SCNView : UIView<SCNSceneRenderer, SCNTechniqueSupport> {
  /* instance variables */
  double _currentSystemTime;
  double _lastUpdate;
  NSString *__ibSceneName;
  unsigned int x :1 _ibNoMultisampling;
  unsigned int x :1 _isOpaque;
  unsigned int x :1 _firstDrawDone;
  unsigned int x :1 _drawOnMainThreadPending;
  unsigned int x :1 _viewIsOffscreen;
  unsigned int x :1 _appChangedColorAppearance;
  unsigned int x :1 _appIsDeactivated;
  unsigned int x :1 _autoPausedScene;
  unsigned int x :1 _inRenderQueueForLayerBackedGLRendering;
  unsigned int x :1 _disableLinearRendering;
  unsigned int x :1 _isInLiveResize;
  BOOL _isHidden;
  BOOL _didTriggerRedrawWhileRendering;
  SCNRenderer *_renderer;
  BOOL _displayLinkCreationRequested;
  BOOL _skipFramesIfNoDrawableAvailable;
  SCNDisplayLink *_displayLink;
  long long _preferredFramePerSeconds;
  CALayer *_backingLayer;
  SCNJitterer *_jitterer;
  SCNRecursiveLock *_lock;
  UIColor *_backgroundColor;
  struct CGSize { double width; double height; } _boundsSize;
  char * _snapshotImageData;
  unsigned long long _snapshotImageDataLength;
  NSObject<SCNEventHandler> *_navigationCameraController;
  SCNSpriteKitEventHandler *_spriteKitEventHandler;
  NSObject<MTLDevice> *_device;
  NSArray *_controllerGestureRecognizers;
}

@property (retain, nonatomic) SCNScene *scene;
@property (nonatomic) BOOL rendersContinuously;
@property (nonatomic) BOOL allowsCameraControl;
@property (readonly, nonatomic) NSObject<SCNCameraControlConfiguration> *cameraControlConfiguration;
@property (readonly, nonatomic) SCNCameraController *defaultCameraController;
@property (nonatomic) long long preferredFramesPerSecond;
@property (nonatomic) unsigned long long antialiasingMode;
@property (nonatomic) double sceneTime;
@property (weak, nonatomic) NSObject<SCNSceneRendererDelegate> *delegate;
@property BOOL playing;
@property (nonatomic) BOOL loops;
@property (retain, nonatomic) SCNNode *pointOfView;
@property (nonatomic) BOOL autoenablesDefaultLighting;
@property (nonatomic) BOOL jitteringEnabled;
@property (nonatomic) BOOL temporalAntialiasingEnabled;
@property (nonatomic) BOOL showsStatistics;
@property (nonatomic) unsigned long long debugOptions;
@property (retain, nonatomic) SKScene *overlaySKScene;
@property (readonly, nonatomic) unsigned long long renderingAPI;
@property (readonly, nonatomic) struct CGColorSpace * workingColorSpace;
@property (readonly, nonatomic) AVAudioEngine *audioEngine;
@property (readonly, nonatomic) AVAudioEnvironmentNode *audioEnvironmentNode;
@property (retain, nonatomic) SCNNode *audioListener;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } currentViewport;
@property (nonatomic) BOOL usesReverseZ;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy, nonatomic) SCNTechnique *technique;

/* class methods */
+ (unsigned long long)renderingAPIForOptions:(id)options;
+ (id)deviceForOptions:(id)options;
+ (BOOL)shouldObserveApplicationStateToPreventBackgroundGPUAccess;
+ (BOOL)_isMetalSupported;
+ (BOOL)lowLatency;
+ (BOOL)usesSeparateWorkGroup;
+ (id)_kvoKeysForwardedToRenderer;
+ (id)keyPathsForValuesAffectingValueForKey:(id)key;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)key;
+ (BOOL)displayLinkCallbackShouldReturnImmediately;
+ (BOOL)displayLinkPolicy;
+ (Class)layerClass;

/* instance methods */
- (void)_initializeDisplayLinkWithScreen:(id)screen policy:(unsigned long long)policy completionHandler:(id /* block */)handler;
- (void)_adjustBackingLayerPixelFormat;
- (void)_commonInit:(id)init;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame options:(id)options;
- (id)init;
- (void)_selectRenderingAPIWithOptions:(id)options;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (void)dealloc;
- (void)setHidden:(BOOL)hidden;
- (void)presentScene:(id)scene withTransition:(id)transition incomingPointOfView:(id)view completionHandler:(id /* block */)handler;
- (BOOL)skipFramesIfNoDrawableAvailable;
- (void)setSkipFramesIfNoDrawableAvailable:(BOOL)available;
- (void)set_superSamplingFactor:(double)factor;
- (double)_superSamplingFactor;
- (void)set_screenTransform:(struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })transform;
- (struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })_screenTransform;
- (void)set_renderOptions:(unsigned long long)options;
- (unsigned long long)_renderOptions;
- (id)renderer;
- (id)scn_backingLayer;
- (void)scn_setBackingLayer:(id)layer;
- (BOOL)isJitteringEnabled;
- (BOOL)isTemporalAntialiasingEnabled;
- (void)_jitterRedisplay;
- (BOOL)_supportsJitteringSyncRedraw;
- (BOOL)_canJitter;
- (void)_scnUpdateContentsGravity;
- (BOOL)drawableResizesAsynchronously;
- (void)setDrawableResizesAsynchronously:(BOOL)asynchronously;
- (BOOL)asynchronousResizing;
- (void)setAsynchronousResizing:(BOOL)resizing;
- (BOOL)scn_inLiveResize;
- (id)_renderingQueue;
- (void)SCN_displayLinkCallback:(double)callback;
- (void)updateAtTime:(double)time;
- (void)_resetContentsScaleFactor;
- (void)_updateContentsScaleFactor;
- (struct CGSize { double x0; double x1; })backingSizeForBoundSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })_updateBackingSize;
- (void)_drawAtTime:(double)time;
- (void)layoutSubviews;
- (void)setPointOfView:(id)view animate:(BOOL)animate;
- (void)setPointOfCulling:(id)culling;
- (id)pointOfCulling;
- (BOOL)isPlaying;
- (void)play:(id)play;
- (void)pause:(id)pause;
- (void)stop:(id)stop;
- (double)_flipY:(double)y;
- (struct SCNVector4 { float x0; float x1; float x2; float x3; })_viewport;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test options:(id)options;
- (id)hitTestWithSegmentFromPoint:(struct SCNVector3 { float x0; float x1; float x2; })point toPoint:(struct SCNVector3 { float x0; float x1; float x2; })point options:(id)options;
- (BOOL)isNodeInsideFrustum:(id)frustum withPointOfView:(id)view;
- (id)nodesInsideFrustumWithPointOfView:(id)view;
- (struct SCNVector3 { float x0; float x1; float x2; })projectPoint:(struct SCNVector3 { float x0; float x1; float x2; })point;
- (struct SCNVector3 { float x0; float x1; float x2; })unprojectPoint:(struct SCNVector3 { float x0; float x1; float x2; })point;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)setEventHandler:(id)handler;
- (id)eventHandler;
- (id)navigationCameraController;
- (void)setNavigationCameraController:(id)controller;
- (void)eventHandlerWantsRedraw;
- (id)_defaultBackgroundColor;
- (void)_backgroundDidChange;
- (void)_updateOpacity;
- (void)setBackgroundColor:(id)color;
- (id)backgroundColor;
- (BOOL)isOpaque;
- (id)currentRenderPassDescriptor;
- (id)currentRenderCommandEncoder;
- (id)device;
- (id)commandQueue;
- (unsigned long long)colorPixelFormat;
- (unsigned long long)depthPixelFormat;
- (unsigned long long)stencilPixelFormat;
- (BOOL)prepareObject:(id)object shouldAbortBlock:(id /* block */)block;
- (void)prepareObjects:(id)objects withCompletionHandler:(id /* block */)handler;
- (BOOL)_wantsSceneRendererDelegationMessages;
- (void)set_wantsSceneRendererDelegationMessages:(BOOL)messages;
- (id)_resourceManagerMonitor;
- (void)set_resourceManagerMonitor:(id)monitor;
- (id)_commandBufferStatusMonitor;
- (void)set_commandBufferStatusMonitor:(id)monitor;
- (id)displayLink;
- (void)setDisplayLink:(id)link;
- (double)_renderThreadPriority;
- (void)_createDisplayLinkIfNeeded;
- (BOOL)_checkAndUpdateDisplayLinkStateIfNeeded;
- (void)_setNeedsDisplay;
- (void)_systemTimeAnimationStarted:(id)started;
- (void)_sceneDidUpdate:(id)update;
- (id)snapshot;
- (void)lock;
- (void)unlock;
- (void *)__CFObject;
- (BOOL)_isEditor;
- (void)switchToCameraNamed:(id)named;
- (void)switchToNextCamera;
- (BOOL)_disableLinearRendering;
- (void)set_disableLinearRendering:(BOOL)rendering;
- (void)_updateProbes:(id)probes withProgress:(id)progress;
- (BOOL)_showsAuthoringEnvironment;
- (void)set_showsAuthoringEnvironment:(BOOL)environment;
- (id)_authoringEnvironment;
- (id)_ibSceneName;
- (void)set_ibSceneName:(id)name;
- (BOOL)_ibWantsMultisampling;
- (void)set_ibWantsMultisampling:(BOOL)multisampling;
- (id)ibSceneName;
- (void)setIbSceneName:(id)name;
- (BOOL)ibWantsMultisampling;
- (void)setIbWantsMultisampling:(BOOL)multisampling;
- (double)_runFPSTestWithDuration:(double)duration;
- (void)_addGPUFrameScheduledHandler:(id /* block */)handler;
- (void)_addGPUFrameCompletedHandler:(id /* block */)handler;
- (void)_addGPUFramePresentedHandler:(id /* block */)handler;
- (void)_allowGPUBackgroundExecution;
- (void)setNeedsDisplay;
- (void)setContentScaleFactor:(double)factor;
- (void)displayLayer:(id)layer;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (BOOL)_controlsOwnScaleFactor;
- (void)scn_updateGestureRecognizers;
- (void)scn_setGestureRecognizers:(id)recognizers;
- (id)hitTest:(struct CGPoint { double x0; double x1; })test withEvent:(id)event;
- (void)touchesBegan:(id)began withEvent:(id)event;
- (void)touchesMoved:(id)moved withEvent:(id)event;
- (void)touchesEnded:(id)ended withEvent:(id)event;
- (void)touchesCancelled:(id)cancelled withEvent:(id)event;
- (void)pauseDisplayLink;
- (void)resumeDisplayLink;
- (void)didMoveToWindow;
- (void)willMoveToWindow:(id)window;
- (void)_enterForeground:(id)foreground;
- (void)_flushDisplayLink;
- (void)_enterBackground:(id)background;
- (void)safeAreaInsetsDidChange;
@end

#endif /* SCNView_h */
