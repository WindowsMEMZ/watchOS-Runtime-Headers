//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNAction_h
#define SCNAction_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@interface SCNAction : NSObject<NSCopying, NSSecureCoding> {
  /* instance variables */
  struct SCNCAction { undefined * * x0; double x1; id /* block */ x2; id x3; BOOL x4; double x5; double x6; double x7; double x8; double x9; BOOL x10; BOOL x11; id /* block */ x12; struct __CFString * x13; long long x14; double x15; double x16; double x17; double x18; } * _caction;
}

@property (nonatomic) double duration;
@property (nonatomic) long long timingMode;
@property (nonatomic) id /* block */ timingFunction;
@property (nonatomic) double speed;

/* class methods */
+ (BOOL)editingModeEnabled;
+ (void)setEditingModeEnabled:(BOOL)enabled;
+ (BOOL)supportsSecureCoding;
+ (id)moveByX:(double)x y:(double)y z:(double)z duration:(double)duration;
+ (id)moveBy:(struct SCNVector3 { float x0; float x1; float x2; })by duration:(double)duration;
+ (id)moveTo:(struct SCNVector3 { float x0; float x1; float x2; })to duration:(double)duration;
+ (id)rotateByX:(double)x y:(double)y z:(double)z duration:(double)duration;
+ (id)rotateToX:(double)x y:(double)y z:(double)z duration:(double)duration;
+ (id)rotateByAngle:(double)angle aroundAxis:(struct SCNVector3 { float x0; float x1; float x2; })axis duration:(double)duration;
+ (id)rotateToAxisAngle:(struct SCNVector4 { float x0; float x1; float x2; float x3; })angle duration:(double)duration;
+ (id)rotateToX:(double)x y:(double)y z:(double)z duration:(double)duration shortestUnitArc:(BOOL)arc;
+ (id)scaleBy:(double)by duration:(double)duration;
+ (id)scaleTo:(double)to duration:(double)duration;
+ (id)sequence:(id)sequence;
+ (id)group:(id)group;
+ (id)repeatAction:(id)action count:(unsigned long long)count;
+ (id)repeatActionForever:(id)forever;
+ (id)fadeInWithDuration:(double)duration;
+ (id)fadeOutWithDuration:(double)duration;
+ (id)fadeOpacityBy:(double)by duration:(double)duration;
+ (id)fadeOpacityTo:(double)to duration:(double)duration;
+ (id)hide;
+ (id)unhide;
+ (id)playAudioSource:(id)source waitForCompletion:(BOOL)completion;
+ (id)waitForDuration:(double)duration;
+ (id)waitForDuration:(double)duration withRange:(double)range;
+ (id)removeFromParentNode;
+ (id)performSelector:(SEL)selector onTarget:(id)target;
+ (id)runBlock:(id /* block */)block;
+ (id)runBlock:(id /* block */)block queue:(id)queue;
+ (id)runAction:(id)action onChildNodeWithName:(id)name;
+ (id)javaScriptActionWithScript:(id)script duration:(double)duration;
+ (id)customActionWithDuration:(double)duration actionBlock:(id /* block */)block;
+ (id)actionNamed:(id)named;

/* instance methods */
- (void)setCppAction:(void *)action;
- (void)wasPausedWithTarget:(id)target atTime:(double)time;
- (void)willResumeWithTarget:(id)target atTime:(double)time;
- (void)timeJumpWithTarget:(id)target timeOffset:(double)offset;
- (BOOL)finished;
- (void)setFinished:(BOOL)finished;
- (double)ratioForTime:(double)time;
- (void)wasAddedToTarget:(id)target atTime:(double)time;
- (void)wasRemovedFromTarget:(id)target atTime:(double)time;
- (void)willStartWithTarget:(id)target atTime:(double)time;
- (void)updateWithTarget:(id)target forTime:(double)time;
- (void)setKey:(id)key;
- (void)setCompletionBlock:(id /* block */)block;
- (struct SCNCAction { undefined * * x0; double x1; id /* block */ x2; id x3; BOOL x4; double x5; double x6; double x7; double x8; double x9; BOOL x10; BOOL x11; id /* block */ x12; struct __CFString * x13; long long x14; double x15; double x16; double x17; double x18; } *)caction;
- (double)durationRange;
- (void)setDurationRange:(double)range;
- (BOOL)isCustom;
- (BOOL)isRelative;
- (id)parameters;
- (id)init;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)reversedAction;
- (void)dealloc;
@end

#endif /* SCNAction_h */
