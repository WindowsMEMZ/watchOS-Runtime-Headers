//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNPhysicsField_h
#define SCNPhysicsField_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"
#include "SCNNode.h"
#include "SCNPhysicsWorld.h"

@interface SCNPhysicsField : NSObject<NSCopying, NSSecureCoding> {
  /* instance variables */
  SCNPhysicsWorld *_world;
  SCNNode *_node;
  struct c3dPhysicsField { undefined * * x0; struct { x0[4] } x1; struct { x0[4] } x2; float x3; float x4; float x5; unsigned int x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; float x11; } * _field;
}

@property (nonatomic) double strength;
@property (nonatomic) double falloffExponent;
@property (nonatomic) double minimumDistance;
@property (nonatomic) BOOL active;
@property (nonatomic) BOOL exclusive;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } halfExtent;
@property (nonatomic) BOOL usesEllipsoidalExtent;
@property (nonatomic) long long scope;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } offset;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } direction;
@property (nonatomic) unsigned long long categoryBitMask;

/* class methods */
+ (id)field;
+ (id)dragField;
+ (id)customFieldWithEvaluationBlock:(id /* block */)block;
+ (id)vortexField;
+ (id)radialGravityField;
+ (id)linearGravityField;
+ (id)noiseFieldWithSmoothness:(double)smoothness animationSpeed:(double)speed;
+ (id)turbulenceFieldWithSmoothness:(double)smoothness animationSpeed:(double)speed;
+ (id)springField;
+ (id)electricField;
+ (id)magneticField;
+ (void)_setDisplayScaleFactor:(double)factor;
+ (double)_displayScaleFactor;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (void)_commonInit;
- (id)init;
- (void)dealloc;
- (struct c3dPhysicsField { undefined * * x0; struct { x0[4] } x1; struct { x0[4] } x2; float x3; float x4; float x5; unsigned int x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; float x11; } *)_createField;
- (void)_setupCommonProperties;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)copy;
- (BOOL)isActive;
- (BOOL)isExclusive;
- (BOOL)supportsDirection;
- (BOOL)supportsOffset;
- (void)_removeOwner;
- (void)_willRemoveFromPhysicsWorld;
- (void)_setOwner:(id)owner;
- (void)_setWorld:(id)world;
- (id)_owner;
- (struct c3dPhysicsField { undefined * * x0; struct { x0[4] } x1; struct { x0[4] } x2; float x3; float x4; float x5; unsigned int x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; float x11; } *)_handle;
- (struct SCNVector3 { float x0; float x1; float x2; })evalAtLocation:(struct SCNVector3 { float x0; float x1; float x2; })location;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
@end

#endif /* SCNPhysicsField_h */
