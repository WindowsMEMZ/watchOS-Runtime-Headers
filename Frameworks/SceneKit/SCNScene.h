//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNScene_h
#define SCNScene_h
@import Foundation;

#include "NSSecureCoding-Protocol.h"
#include "SCNAuthoringEnvironment.h"
#include "SCNMaterialProperty.h"
#include "SCNNode.h"
#include "SCNPhysicsWorld.h"
#include "SCNSceneSource.h"
#include "SCNTransactionCommandObject-Protocol.h"

@class NSMutableDictionary, NSString, NSURL;

@interface SCNScene : NSObject<SCNTransactionCommandObject, NSSecureCoding> {
  /* instance variables */
  struct __C3DScene * _scene;
  SCNSceneSource *_sceneSource;
  SCNNode * _layerRootNode[4];
  SCNMaterialProperty *_environment;
  NSMutableDictionary *_userAttributes;
  double _screenSpaceReflectionMaxRayDistance;
  NSURL *_sourceURL;
  BOOL _pausedForEditing;
  BOOL _allowsDefaultLightingEnvironmentFallback;
  SCNAuthoringEnvironment *_authoringEnvironment;
}

@property (readonly, nonatomic) SCNNode *rootNode;
@property (readonly, nonatomic) SCNPhysicsWorld *physicsWorld;
@property (readonly, nonatomic) SCNMaterialProperty *background;
@property (readonly, nonatomic) SCNMaterialProperty *lightingEnvironment;
@property (nonatomic) double fogStartDistance;
@property (nonatomic) double fogEndDistance;
@property (nonatomic) double fogDensityExponent;
@property (retain, nonatomic) id fogColor;
@property (nonatomic) BOOL wantsScreenSpaceReflection;
@property (nonatomic) long long screenSpaceReflectionSampleCount;
@property (nonatomic) double screenSpaceReflectionMaximumDistance;
@property (nonatomic) double screenSpaceReflectionStride;
@property (nonatomic) BOOL paused;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sceneWithMDLAsset:(id)mdlasset;
+ (id)sceneWithMDLAsset:(id)mdlasset options:(id)options;
+ (id)scene;
+ (id)sceneNamed:(id)named;
+ (id)sceneNamed:(id)named inDirectory:(id)directory options:(id)options;
+ (id)sceneNamed:(id)named options:(id)options;
+ (id)sceneWithURL:(id)url options:(id)options;
+ (id)sceneWithURL:(id)url options:(id)options error:(id *)error;
+ (id)sceneWithURL:(id)url atIndex:(long long)index options:(id)options;
+ (id)sceneWithData:(id)data atIndex:(long long)index options:(id)options;
+ (id)sceneWithData:(id)data options:(id)options;
+ (id)sceneWithSceneRef:(struct __C3DScene *)ref;
+ (BOOL)canImportFileUTI:(id)uti;
+ (BOOL)canImportFileExtension:(id)extension;
+ (id)supportedFileUTIsForImport;
+ (id)supportedFileUTIsForExport;
+ (id)_indexPathForNode:(id)node;
+ (SEL)jsConstructor;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)debugQuickLookObject;
- (id)debugQuickLookObjectWithPointOfView:(id)view;
- (BOOL)writeToURL:(id)url options:(id)options;
- (id)_exportAsMovieOperationWithDestinationURL:(id)url size:(struct CGSize { double x0; double x1; })size attributes:(id)attributes delegate:(id)delegate didEndSelector:(SEL)selector userInfo:(void *)info;
- (id)exportAsMovieOperationWithDestinationURL:(id)url size:(struct CGSize { double x0; double x1; })size attributes:(id)attributes delegate:(id)delegate didEndSelector:(SEL)selector userInfo:(void *)info;
- (id)init;
- (id)initWithSceneRef:(struct __C3DScene *)ref;
- (void)_syncObjCModel;
- (void)_clearSceneRef;
- (struct SCNVector3 { float x0; float x1; float x2; })upAxis;
- (void)setUpAxis:(struct SCNVector3 { float x0; float x1; float x2; })axis;
- (void)dealloc;
- (void)_setSourceURL:(id)url;
- (id)scene;
- (id)_scenes;
- (struct __C3DScene *)sceneRef;
- (void)setSceneSource:(id)source;
- (id)sceneSource;
- (id)root;
- (void)_setRootNode:(id)node;
- (void)setRootNode:(id)node forLayer:(int)layer;
- (id)rootNodeForLayer:(int)layer;
- (void)_scaleSceneBy:(double)by;
- (id)_physicsWorldCreateIfNeeded:(BOOL)needed;
- (void)_resetSceneTimeRange;
- (double)startTime;
- (void)setStartTime:(double)time;
- (double)endTime;
- (void)setEndTime:(double)time;
- (double)frameRate;
- (void)setFrameRate:(double)rate;
- (float)playbackSpeed;
- (void)setPlaybackSpeed:(float)speed;
- (void)setAttribute:(id)attribute forKey:(id)key;
- (id)attributeForKey:(id)key;
- (BOOL)_allowsDefaultLightingEnvironmentFallback;
- (void)set_allowsDefaultLightingEnvironmentFallback:(BOOL)fallback;
- (double)screenSpaceReflectionDepthThreshold;
- (void)setScreenSpaceReflectionDepthThreshold:(double)threshold;
- (BOOL)writeToURL:(id)url options:(id)options delegate:(id)delegate progressHandler:(id /* block */)handler;
- (void)lock;
- (void)unlock;
- (id)copyAnimationChannelForKeyPath:(id)path animation:(id)animation;
- (id)copyAnimationChannelForKeyPath:(id)path property:(id)property;
- (id)valueForUndefinedKey:(id)key;
- (void)setValue:(id)value forUndefinedKey:(id)key;
- (void *)__CFObject;
- (void)addSceneAnimation:(id)animation forKey:(id)key target:(id)target;
- (void)addParticleSystem:(id)system withTransform:(struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })transform;
- (void)removeParticleSystem:(id)system;
- (void)removeAllParticleSystems;
- (id)particleSystems;
- (BOOL)isPaused;
- (BOOL)isPausedOrPausedByInheritance;
- (void)setPausedForEditing:(BOOL)editing;
- (BOOL)isPausedForEditing;
- (id)_nodeWithIndexPath:(id)path;
- (id)_subnodeFromIndexPath:(id)path;
- (id)initForJavascript:(id)javascript;
- (void)_customEncodingOfSCNScene:(id)scnscene;
- (void)_customDecodingOfSCNScene:(id)scnscene;
- (void)_didDecodeSCNScene:(id)scnscene;
- (void)_didEncodeSCNScene:(id)scnscene;
- (void)_prettifyForPreview;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
@end

#endif /* SCNScene_h */
