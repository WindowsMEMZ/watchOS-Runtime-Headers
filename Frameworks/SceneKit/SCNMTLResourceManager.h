//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNMTLResourceManager_h
#define SCNMTLResourceManager_h
@import Foundation;

#include "MTLDevice-Protocol.h"
#include "MTLTexture-Protocol.h"
#include "SCNMTLBufferAllocator.h"
#include "SCNMTLLibraryManager.h"
#include "SCNMTLShadableKey.h"
#include "SCNMTLShaderBindingsGenerator.h"

@class MTKTextureLoader, NSMutableArray;
@protocol MTLCommandQueue, MTLDepthStencilState;

@interface SCNMTLResourceManager : NSObject {
  /* instance variables */
  NSObject<MTLDevice> *_device;
  NSObject<MTLCommandQueue> *_commandQueue;
  struct __C3DEngineStats { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; unsigned int x21; unsigned int x22; unsigned int x23; double x24; double x25; double x26; double x27; double x28; double x29; double x30; double x31; double x32; double x33; double x34; double x35; double x36; double x37; double x38; unsigned int x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; unsigned int x44; unsigned int x45; unsigned int x46; unsigned int x47; unsigned int x48; unsigned int x49; unsigned int x50; unsigned int x51; unsigned int x52; unsigned int x53; unsigned int x54; unsigned int x55; double x56; unsigned int x57; double x58; unsigned int x59; double x60; double x61; double x62; double x63; double x64[60] unsigned int x65; double x66; double x67; } * __engineStats;
  SCNMTLLibraryManager *_libraryManager;
  SCNMTLShaderBindingsGenerator *_bindingsGenerator;
  struct __CFDictionary * _availablePipelineStates;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _availablePipelineStatesLock;
  SCNMTLBufferAllocator *_commonProfileBuffersAllocator;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableLightingSystemReflectionProbeTextures;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableIrradianceTextures;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableRadianceTextures;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableImages;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableImageProxy;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableSamplers;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableIESTextures;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableBuffers;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableMeshes;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableMeshSources;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableMeshElements;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableRasterizerStates;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableDeformerStacks;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableSkinDeformerReadOnlyBuffers;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableMorphDeformerReadOnlyBuffers;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableComputePipelines;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableComputePipelinesWithStageDescriptor;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableColorMatchingComputePipelines;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableTessellators;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableWireframeMaterials;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableOpenSubdivComputeEvaluators;
  struct { NSMapTable *registry; struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _availableShadables;
  SCNMTLShadableKey *_availableShadablesSearchKey;
  NSMutableArray *_availableStageDescriptors;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _stageDescriptorsLock;
  NSObject<MTLTexture> *_areaLightPrecomputedDataTexture;
  NSObject<MTLTexture> *_specularDFGDiffuseHammonTexture;
  struct __C3DFXMetalProgram { struct __C3DFXProgram { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; int x1; unsigned int x2 :1; unsigned int x3 :1; struct __C3DFXProgramDelegate * x4; } x0; struct __CFString * x1[2] struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __CFSet * x5; void * x6; struct __CFDictionary * x7; void * x8; unsigned long long x9; unsigned int x10; } * _defaultProgram;
  struct __C3DFXMetalProgram { struct __C3DFXProgram { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; int x1; unsigned int x2 :1; unsigned int x3 :1; struct __C3DFXProgramDelegate * x4; } x0; struct __CFString * x1[2] struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __CFSet * x5; void * x6; struct __CFDictionary * x7; void * x8; unsigned long long x9; unsigned int x10; } * _defaultProgramForTessellation;
  struct __C3DFXMetalProgram { struct __C3DFXProgram { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; int x1; unsigned int x2 :1; unsigned int x3 :1; struct __C3DFXProgramDelegate * x4; } x0; struct __CFString * x1[2] struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __CFSet * x5; void * x6; struct __CFDictionary * x7; void * x8; unsigned long long x9; unsigned int x10; } * _isolateProgram;
  NSObject<MTLDepthStencilState> *_depthAndStencilStateWithReadWriteDepthDisabled;
  NSObject<MTLTexture> *_defaultTexture;
  NSObject<MTLTexture> *_defaultTexture3D;
  NSObject<MTLTexture> *_defaultCubeTexture;
  NSObject<MTLTexture> *_defaultLightingEnvironmentIrradianceTexture;
  NSObject<MTLTexture> *_defaultLightingEnvironmentRadianceTexture;
  MTKTextureLoader *_mtkTextureLoader;
}

/* class methods */
+ (void)unregisterManagerForDevice:(id)device;
+ (void)_fillVertexDescriptor:(id)descriptor withMeshSource:(struct __C3DMeshSource { struct __C3DGenericSource { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; struct __C3DSourceAccessor * x1; union { struct __CFData * x0; void * x1; void * x2; } x2; long long x3; unsigned int x4 :1; unsigned int x5 :1; unsigned int x6 :1; } x0; unsigned short x1; unsigned char x2; unsigned char x3; } *)source semantic:(char)semantic inputSet:(long long)set bufferIndex:(long long)index;
+ (void)_fillVertexDescriptor:(id)descriptor withSemantic:(char)semantic inputSet:(long long)set bufferIndex:(long long)index vertexFormat:(unsigned long long)format offset:(unsigned long long)offset stride:(unsigned long long)stride;

/* instance methods */
- (id)defaultLightingEnvironmentIrradianceTexture;
- (id)defaultLightingEnvironmentRadianceTexture;
- (id)irradianceTextureForPrecomputedLightingEnvironment:(id)environment;
- (id)radianceTextureForPrecomputedLightingEnvironment:(id)environment;
- (id)irradianceTextureForEnvironmentTexture:(id)texture renderContext:(id)context applySH:(id /* block */)sh;
- (void)_bakeStochasticIrradianceTexture:(id)texture forEnvironmentTexture:(id)texture mipmapLevelForSampling:(unsigned long long)sampling renderContext:(id)context;
- (void)_bakeSphericalHamonicsBasedIrradianceTexture:(id)texture forEnvironmentTexture:(id)texture renderContext:(id)context applySH:(id /* block */)sh;
- (id)newRadianceTextureForEnvironmentTexture:(id)texture engineContext:(struct __C3DEngineContext *)context cpuAccessible:(BOOL)accessible commandBuffer:(id)buffer;
- (id)radianceTextureForEnvironmentTexture:(id)texture engineContext:(struct __C3DEngineContext *)context commandBuffer:(id)buffer;
- (id)specularDFGDiffuseHammonTextureWithRenderContext:(id)context;
- (id)areaLightPrecomputedDataTexture;
- (id)copyTextureByConvertingToCubeMapIfApplicable:(id)applicable engineContext:(struct __C3DEngineContext *)context needsMipmap:(BOOL)mipmap;
- (id)newTextureWithDescriptor:(id)descriptor;
- (id)newTextureUsingMTKTextureLoaderWithURL:(id)url options:(id)options;
- (id)newTextureUsingMTKTextureLoaderWithData:(id)data options:(id)options;
- (void)_enqueueCopyFromTexture:(id)texture toTexture:(id)texture blitEncoder:(struct SCNMTLBlitCommandEncoder { id x0; id x1; } *)encoder generateMipMaps:(BOOL)maps;
- (id)_textureDescriptorFromImage:(struct __C3DImage *)image needsMipMap:(BOOL)map textureOptions:(int)options;
- (BOOL)_copyImage:(struct __C3DImage *)image toTexture:(id)texture desc:(id)desc textureOptions:(int)options needsMipMapGeneration:(BOOL)generation;
- (id)newCubemapTextureForLatlongTexture:(id)texture pixelFormat:(unsigned long long)format engineContext:(struct __C3DEngineContext *)context needsMipmap:(BOOL)mipmap;
- (id)latlongTextureForCubemap:(id)cubemap pixelFormat:(unsigned long long)format renderContext:(id)context needsMipmap:(BOOL)mipmap;
- (id)unstageTexture:(id)texture commandBuffer:(id)buffer;
- (id)renderResourceForEffectSlot:(struct __C3DEffectSlot { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; struct C3DColor4 { union { float x0[4] struct { float x0; float x1; float x2; float x3; } x1; } x0; } x1; void * x2; union { struct __C3DImage * x0; void * x1; struct __C3DImageProxy * x2; struct __C3DTexture * x3; void * x4; } x3; unsigned int x4 :8; unsigned int x5 :1; unsigned int x6 :1; unsigned int x7 :1; unsigned int x8 :4; char x9; struct __C3DTextureSampler * x10; union C3DMatrix4x4 * x11; float x12; int x13; void * x14; } *)slot withEngineContext:(struct __C3DEngineContext *)context didFallbackToDefaultTexture:(BOOL *)texture;
- (id)renderResourceForImageProxy:(struct __C3DImageProxy { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; struct { undefined * x0; undefined * x1; undefined * x2; undefined * x3; } x1; void * x2; unsigned char x3; } *)proxy sampler:(struct __C3DTextureSampler { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; int x1; int x2; int x3; int x4; int x5; int x6; struct C3DColor4 { union { float x0[4] struct { float x0; float x1; float x2; float x3; } x1; } x0; } x7; float x8; unsigned char x9; int x10; unsigned long long x11; } *)sampler engineContext:(struct __C3DEngineContext *)context didFallbackToDefaultTexture:(BOOL *)texture;
- (id)renderResourceForImage:(struct __C3DImage *)image sampler:(struct __C3DTextureSampler { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; int x1; int x2; int x3; int x4; int x5; int x6; struct C3DColor4 { union { float x0[4] struct { float x0; float x1; float x2; float x3; } x1; } x0; } x7; float x8; unsigned char x9; int x10; unsigned long long x11; } *)sampler options:(int)options engineContext:(struct __C3DEngineContext *)context didFallbackToDefaultTexture:(BOOL *)texture;
- (id)defaultTexture;
- (id)defaultCubeTexture;
- (id)defaultTexture3D;
- (id)iesTextureForProfile:(id)profile renderContext:(id)context;
- (void)colorMatchSourceTexture:(id)texture sourceColorSpace:(struct CGColorSpace *)space destinationColorSpace:(struct CGColorSpace *)space destinationTexture:(id)texture renderContext:(id)context;
- (void)colorMatchBiPlanarPixelBufferWithFormatType:(unsigned int)type pixelBufferYCbCrMatrix:(id)matrix pixelBufferColorPrimaries:(id)primaries pixelBufferTransferFunction:(id)function sourceTextureY:(id)y sourceTextureCbCr:(id)cr sourceColorSpace:(struct CGColorSpace *)space destinationColorSpace:(struct CGColorSpace *)space destinationTexture:(id)texture renderContext:(id)context;
- (id)renderResourceForProgramDesc:(struct { struct __C3DFXMetalProgram * x0; struct __C3DMaterial * x1; struct __C3DGeometry * x2; struct __C3DFXPass * x3; struct __C3DFXPass * x4; id x5; struct __C3DBlendStates * x6; struct __C3DNode * x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; id x13; struct { unsigned char x0; id /* block */ x1; } x14; unsigned long long x15; })desc renderPassDescriptor:(id)descriptor;
- (struct __C3DFXMetalProgram *)defaultProgramUsingTessellation:(BOOL)tessellation;
- (void)_createPipelineStateWithDescriptor:(id)descriptor desc:(struct { struct { struct __C3DFXMetalProgram * x0; struct __C3DMaterial * x1; struct __C3DGeometry * x2; struct __C3DFXPass * x3; struct __C3DFXPass * x4; id x5; struct __C3DBlendStates * x6; struct __C3DNode * x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; id x13; struct { unsigned char x0; id /* block */ x1; } x14; unsigned long long x15; } x0; id x1; struct { unsigned long long x0[8] unsigned long long x1; unsigned long long x2; unsigned char x3; } x2; struct __C3DBlendStates * x3; unsigned long long x4[8] id x5; id x6; id x7; id x8; id /* block */ x9; unsigned char x10; BOOL x11; BOOL x12; BOOL x13; })desc pipeline:(id)pipeline;
- (id)newRenderPipelineStateWithDesc:(struct { struct { struct __C3DFXMetalProgram * x0; struct __C3DMaterial * x1; struct __C3DGeometry * x2; struct __C3DFXPass * x3; struct __C3DFXPass * x4; id x5; struct __C3DBlendStates * x6; struct __C3DNode * x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; id x13; struct { unsigned char x0; id /* block */ x1; } x14; unsigned long long x15; } x0; id x1; struct { unsigned long long x0[8] unsigned long long x1; unsigned long long x2; unsigned char x3; } x2; struct __C3DBlendStates * x3; unsigned long long x4[8] id x5; id x6; id x7; id x8; id /* block */ x9; unsigned char x10; BOOL x11; BOOL x12; BOOL x13; })desc;
- (id)_newComputeDescriptorForPipelineDesc:(struct { id x0; id x1; id x2; id /* block */ x3; BOOL x4; BOOL x5; BOOL x6; })desc library:(id)library;
- (void)_configureComputePipeline:(id)pipeline withDescriptor:(id)descriptor;
- (id)newComputePipelineStateForDesc:(struct { id x0; id x1; id x2; id /* block */ x3; BOOL x4; BOOL x5; BOOL x6; })desc library:(id)library;
- (id)computePipelineStateForKernel:(id)kernel;
- (id)computePipelineStateForKernel:(id)kernel threadGroupSizeIsMultipleOfThreadExecutionWidth:(BOOL)width;
- (id)computePipelineStateForKernel:(id)kernel constants:(id)constants constantsHash:(id)hash;
- (id)_computePipelineStateForKernel:(id)kernel constants:(id)constants constantsHash:(id)hash threadGroupSizeIsMultipleOfThreadExecutionWidth:(BOOL)width;
- (id)computePipelineStateForKernel:(id)kernel withStageDescriptor:(id)descriptor stageDescriptorUpdateBlock:(id /* block */)block constants:(id)constants constantsHash:(id)hash;
- (id)getUniqueStageDescriptor:(id)descriptor;
- (id)newComputePipelineStateWithFunctionName:(id)name;
- (id)newComputePipelineStateWithFunctionName:(id)name library:(id)library;
- (id)newComputePipelineStateWithFunctionName:(id)name constantValues:(id)values;
- (id)newComputePipelineStateWithFunctionName:(id)name library:(id)library constantValues:(id)values;
- (id)colorMatchingComputePipelineStateForSourceColorSpace:(struct CGColorSpace *)space destinationColorSpace:(struct CGColorSpace *)space renderContext:(id)context;
- (id)colorMatchingComputePipelineStateForBiPlanarPixelBufferWithFormatType:(unsigned int)type pixelBufferYCbCrMatrix:(id)matrix pixelBufferColorPrimaries:(id)primaries pixelBufferTransferFunction:(id)function sourceColorSpace:(struct CGColorSpace *)space destinationColorSpace:(struct CGColorSpace *)space renderContext:(id)context;
- (void)reloadPipelinesIfNeeded;
- (BOOL)hasCommonProfilePrecompiledFunctions;
- (id)computeEvaluatorWithContext:(struct MTLContext { id x0; id x1; id x2; id x3; } *)context srcDesc:(const struct BufferDescriptor { int x0; int x1; int x2; } *)desc dstDesc:(const struct BufferDescriptor { int x0; int x1; int x2; } *)desc duDesc:(const struct BufferDescriptor { int x0; int x1; int x2; } *)desc dvDesc:(const struct BufferDescriptor { int x0; int x1; int x2; } *)desc;
- (id)shFromCPU:(id)cpu commandBuffer:(id)buffer;
- (id)sphericalHarmonicsForEnvironmentTexture:(id)texture order:(unsigned long long)order commandBuffer:(id)buffer;
- (id)initWithDevice:(id)device;
- (void)dealloc;
- (void)_meshSourceWillDie:(id)die;
- (void)_meshElementWillDie:(id)die;
- (void)_meshWillDie:(id)die;
- (void)_morphWillDie:(id)die;
- (void)_programHashCodeWillDie:(id)die;
- (void)_skinWillDie:(id)die;
- (void)_deformerStackWillDie:(id)die;
- (void)_deformerStackDidChange:(id)change;
- (void)_imageWillDie:(id)die;
- (void)_imageProxyWillDie:(id)die;
- (void)_precomputedLightingEnvironmentWillDie:(id)die;
- (void)_rasterizerStateDidDie:(const void *)die;
- (void)_removeMatchingProgram:(struct __C3DFXMetalProgram { struct __C3DFXProgram { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; int x1; unsigned int x2 :1; unsigned int x3 :1; struct __C3DFXProgramDelegate * x4; } x0; struct __CFString * x1[2] struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __CFSet * x5; void * x6; struct __CFDictionary * x7; void * x8; unsigned long long x9; unsigned int x10; } *)program pass:(struct __C3DFXPass { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; struct __CFString * x1; int x2; int x3; BOOL x4; struct __C3DFXTechnique * x5; struct __CFString * x6; struct __CFString * x7; struct __CFString * x8; struct __CFString * x9; BOOL x10; struct __C3DFXProgram * x11; struct __C3DMaterial * x12; struct __C3DBlendStates * x13; struct __C3DRasterizerStates * x14; struct C3DColor4 { union { float x0[4] struct { float x0; float x1; float x2; float x3; } x1; } x0; } x15; unsigned char x16; unsigned int x17; unsigned int x18 :1; unsigned int x19 :1; unsigned int x20 :1; unsigned int x21 :1; unsigned int x22 :1; unsigned int x23 :1; unsigned int x24 :1; unsigned int x25 :1; unsigned int x26 :1; unsigned int x27 :1; unsigned int x28 :1; unsigned int x29 :1; unsigned int x30 :1; unsigned int x31 :1; unsigned int x32 :1; unsigned int x33 :1; unsigned int x34 :1; unsigned int x35 :1; unsigned int x36 :1; unsigned int x37 :1; unsigned int x38 :1; unsigned int x39 :1; unsigned int x40 :1; unsigned int x41 :1; unsigned int x42 :1; unsigned int x43 :1; unsigned int x44 :1; unsigned int x45 :1; struct __C3DRendererElement * x46; unsigned long long x47; unsigned long long x48; struct { undefined * x0; undefined * x1; undefined * x2; undefined * x3; undefined * x4; undefined * x5; undefined * x6; undefined * x7; void * x8; } x49; struct { C]} x0[8{?=CCCb1b1b1b1b1b1[4] struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned int x3 :1; unsigned int x4 :1; unsigned int x5 :1; unsigned int x6 :1; unsigned int x7 :1; unsigned int x8 :1; unsigned char x9[4] } x1; unsigned int x2 :3; unsigned int x3 :1; unsigned int x4 :1; } x50; struct CGPoint { double x0; double x1; } x51; float x52[9] struct  * x53; unsigned int x54; struct __C3DNode * x55; struct __C3DNode * x56; struct __CFArray * x57; struct __C3DNode * x58; unsigned char x59; struct __CFString * x60; struct __CFString * x61; struct __CFString * x62; struct __C3DFXPassInput * * x63; long long x64; long long x65; struct __CFDictionary * x66; id /* block */ x67; id /* block */ x68; struct __CFDictionary * x69; void * x70; } *)pass;
- (void)_programWillDie:(id)die;
- (void)_passWillDie:(id)die;
- (void)_materialWillDie:(id)die;
- (void)_geometryWillDie:(id)die;
- (id)_bufferForMTLBuffer:(void *)mtlbuffer;
- (id)_bufferForData:(struct __CFData *)data bytesPerIndex:(unsigned long long)index;
- (void)__updateMutableMesh:(struct __C3DMesh *)mesh withMetalMesh:(id)mesh;
- (id)renderResourceForDeformerStack:(struct __C3DDeformerStack *)stack node:(struct __C3DNode *)node dataKind:(unsigned char)kind;
- (id)renderResourceForSkinner:(struct __C3DSkinner *)skinner baseMesh:(struct __C3DMesh *)mesh dataKind:(unsigned char)kind provider:(id /* block */)provider;
- (id)renderResourceForMorpher:(struct __C3DMorpher { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; struct __C3DGeometry * x1; struct __C3DMorph * x2; unsigned int x3; unsigned int x4; float * x5; unsigned int x6; unsigned int x7; } *)morpher baseMesh:(struct __C3DMesh *)mesh dataKind:(unsigned char)kind provider:(id /* block */)provider;
- (void)commandBufferDidCompleteWithError:(id)error;
@end

#endif /* SCNMTLResourceManager_h */
