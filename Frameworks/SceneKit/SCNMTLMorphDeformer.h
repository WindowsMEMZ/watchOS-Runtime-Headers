//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNMTLMorphDeformer_h
#define SCNMTLMorphDeformer_h
@import Foundation;

#include "MTLBuffer-Protocol.h"
#include "SCNMTLComputePipeline.h"
#include "SCNMTLDeformer-Protocol.h"
#include "SCNMTLResourceManager.h"

@class NSString;

@interface SCNMTLMorphDeformer : NSObject<SCNMTLDeformer> {
  /* instance variables */
  struct __C3DMorpher { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; struct __C3DGeometry * x1; struct __C3DMorph * x2; unsigned int x3; unsigned int x4; float * x5; unsigned int x6; unsigned int x7; } * _morpher;
  unsigned char _finalMeshDataKind;
  unsigned char _dataKindForComputeKernel;
  SCNMTLResourceManager *_resourceManager;
  BOOL _morphNormals;
  unsigned long long _morphKind;
  unsigned long long _currentFrameHash;
  unsigned int _lastMorpherIncrementalPassState;
  unsigned int _finalMeshVertexCount;
  unsigned int _vertexCountForComputeKernel;
  unsigned int _morphTargetCount;
  struct { float x0; unsigned int x1; unsigned int x2; unsigned long long x3; unsigned long long x4; } * _morphTargets;
  short _morphTargetPositionDataType;
  short _morphTargetNormalDataType;
  short _basePositionDataType;
  short _baseNormalDataType;
  NSObject<MTLBuffer> *_baseBufferForComputeKernel;
  NSObject<MTLBuffer> *_originalToFirstDeindexedTableBuffer;
  NSObject<MTLBuffer> *_deindexedToFirstDeindexedTableBuffer;
  NSObject<MTLBuffer> *_morphTargetsVertexBuffer;
  NSObject<MTLBuffer> *_morphTargetsSparseIndicesBuffer;
  SCNMTLComputePipeline *_incrementalInitPipeline;
  SCNMTLComputePipeline *_incrementalAddPipeline;
  SCNMTLComputePipeline *_copyBaseBufferPipeline;
  SCNMTLComputePipeline *_blendDensePipeline;
  SCNMTLComputePipeline *_blendDenseIndexedPipeline;
  SCNMTLComputePipeline *_blendSparsePipeline;
  SCNMTLComputePipeline *_splatPipeline;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (unsigned long long)requiredInputs;
+ (unsigned long long)supportedOutputs;
+ (unsigned long long)requiredOutputs;

/* instance methods */
- (void)dealloc;
- (void)setupMorphTargetsWithComputeContext:(id)context;
- (void)createVertexBufferForMorphTarget:(struct { float x0; unsigned int x1; unsigned int x2; unsigned long long x3; unsigned long long x4; } *)target withSetupTarget:(struct { unsigned int x0; struct __C3DGeometry * x1; struct __C3DMeshSource * x2; struct __C3DMeshSource * x3; unsigned long long x4; } *)target vertexBuffer:(char *)buffer vertexBufferOffset:(unsigned long long)offset indicesBuffer:(char *)buffer indicesBufferOffset:(unsigned long long)offset indexSize:(unsigned long long)size originalToFirstDeindexedTable:(unsigned int *)table computeContext:(id)context;
- (void)createSparseIndicesBufferForMorphTarget:(struct { float x0; unsigned int x1; unsigned int x2; unsigned long long x3; unsigned long long x4; } *)target withSetupTarget:(struct { unsigned int x0; struct __C3DGeometry * x1; struct __C3DMeshSource * x2; struct __C3DMeshSource * x3; unsigned long long x4; } *)target indicesBuffer:(char *)buffer indicesBufferOffset:(unsigned long long)offset indexSize:(unsigned long long)size originalToFirstDeindexedTable:(unsigned int *)table computeContext:(id)context;
- (unsigned long long)updateWithComputeContext:(id)context positions:(id)positions normals:(id)normals tangents:(id)tangents;
- (unsigned long long)morphSparseWithComputeContext:(id)context positions:(id)positions normals:(id)normals;
- (unsigned long long)morphIncrementallyWithComputeContext:(id)context positions:(id)positions normals:(id)normals;
@end

#endif /* SCNMTLMorphDeformer_h */
