//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNNode_h
#define SCNNode_h
@import Foundation;

#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"
#include "SCNActionable-Protocol.h"
#include "SCNAnimatable-Protocol.h"
#include "SCNBoundingVolume-Protocol.h"
#include "SCNCamera.h"
#include "SCNGeometry.h"
#include "SCNLight.h"
#include "SCNMorpher.h"
#include "SCNNode.h"
#include "SCNNodeComponent.h"
#include "SCNOrderedDictionary.h"
#include "SCNPhysicsBody.h"
#include "SCNPhysicsField.h"
#include "SCNSkinner.h"
#include "SCNTransactionCommandObject-Protocol.h"

@class NSArray, NSMutableArray, NSMutableDictionary, NSString;
@protocol SCNNodeRendererDelegate;

@interface SCNNode : NSObject<SCNTransactionCommandObject, NSCopying, NSSecureCoding, SCNAnimatable, SCNActionable, SCNBoundingVolume> {
  /* instance variables */
  struct __C3DNode { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; struct __C3DNode * x1; struct __C3DNode * x2; struct __C3DNode * x3; int x4; struct { union C3DMatrix4x4 { float x0[16] x1[4] struct { x0[4] } x2; } x0; union  x1; } x5; union C3DMatrix4x4 * x6; BOOL x7; float x8; unsigned long long x9; int x10; unsigned int x11 :1; unsigned int x12 :1; unsigned int x13 :1; unsigned int x14 :1; unsigned int x15 :1; unsigned int x16 :1; unsigned int x17 :1; unsigned int x18 :1; unsigned int x19 :1; unsigned int x20 :1; unsigned int x21 :1; unsigned int x22 :1; unsigned int x23 :1; unsigned int x24 :1; unsigned int x25 :1; unsigned int x26 :1; unsigned int x27 :1; unsigned int x28 :1; unsigned int x29 :1; unsigned int x30 :1; unsigned int x31 :1; unsigned int x32 :1; unsigned int x33 :1; unsigned int x34 :3; unsigned int x35 :1; unsigned int x36 :1; struct { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; } x37; struct  * x38; struct __C3DGeometry * x39; struct __C3DDeformerStack * x40; float x41; struct  x42; } * _node;
  SCNNode *_parent;
  SCNNode *_presentationInstance;
  unsigned int x :1 _isPresentationInstance;
  unsigned int x :1 _lightLoaded;
  unsigned int x :1 _geometryLoaded;
  unsigned int x :1 _cameraLoaded;
  unsigned int x :1 _skinnerLoaded;
  unsigned int x :1 _morpherLoaded;
  unsigned int x :1 _pausedByInheritance;
  unsigned int x :1 _affineUpToDate;
  unsigned int x :1 _transformUpToDate;
  unsigned int x :1 _hasPivot;
  unsigned int x :1 _isJoint;
  unsigned int x :2 _rotationRepresentation;
  unsigned int x :1 _movability;
  unsigned int x :1 _depthPrePass;
  unsigned int x :1 _ignoreAnimationWhenCopying_tmp;
  unsigned int x :1 _isFocusableOrHasFocusableChild;
  unsigned int x :1 _authoringEnvironmentNode;
  unsigned int x :14 _hasComponentBitmask;
  SCNNodeComponent *_components;
  SCNOrderedDictionary *_actions;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _animationsLock;
  SCNOrderedDictionary *_animations;
  NSMutableDictionary *_bindings;
  struct SCNVector3 { float x0; float x1; float x2; } * _fixedBoundingBoxExtrema;
  NSMutableDictionary *_valueForKey;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _valueForKeyLock;
}

@property (nonatomic) long long authoringCameraType;
@property (readonly, nonatomic) struct SCNVector3 { float x0; float x1; float x2; } worldUp;
@property (readonly, nonatomic) struct SCNVector3 { float x0; float x1; float x2; } worldRight;
@property (readonly, nonatomic) struct SCNVector3 { float x0; float x1; float x2; } worldFront;
@property (nonatomic) struct { x0[4] } simdTransform;
@property (nonatomic)  simdPosition;
@property (nonatomic)  simdRotation;
@property (nonatomic) struct  simdOrientation;
@property (nonatomic)  simdEulerAngles;
@property (nonatomic)  simdScale;
@property (nonatomic) struct { x0[4] } simdPivot;
@property (nonatomic)  simdWorldPosition;
@property (nonatomic) struct  simdWorldOrientation;
@property (nonatomic) struct { x0[4] } simdWorldTransform;
@property (readonly, nonatomic)  simdWorldUp;
@property (readonly, nonatomic)  simdWorldRight;
@property (readonly, nonatomic)  simdWorldFront;
@property (copy, nonatomic) NSString *name;
@property (retain, nonatomic) SCNLight *light;
@property (retain, nonatomic) SCNCamera *camera;
@property (retain, nonatomic) SCNGeometry *geometry;
@property (retain, nonatomic) SCNSkinner *skinner;
@property (retain, nonatomic) SCNMorpher *morpher;
@property (nonatomic) struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; } transform;
@property (readonly, nonatomic) struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; } worldTransform;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } position;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } worldPosition;
@property (nonatomic) struct SCNVector4 { float x0; float x1; float x2; float x3; } rotation;
@property (nonatomic) struct SCNVector4 { float x0; float x1; float x2; float x3; } orientation;
@property (nonatomic) struct SCNVector4 { float x0; float x1; float x2; float x3; } worldOrientation;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } eulerAngles;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } scale;
@property (nonatomic) struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; } pivot;
@property (nonatomic) BOOL hidden;
@property (nonatomic) double opacity;
@property (nonatomic) long long renderingOrder;
@property (nonatomic) BOOL castsShadow;
@property (nonatomic) long long movabilityHint;
@property (readonly, nonatomic) SCNNode *parentNode;
@property (readonly, nonatomic) NSArray *childNodes;
@property (retain, nonatomic) SCNPhysicsBody *physicsBody;
@property (retain, nonatomic) SCNPhysicsField *physicsField;
@property (copy) NSArray *constraints;
@property (readonly, nonatomic) SCNNode *presentationNode;
@property (nonatomic) BOOL paused;
@property (nonatomic) NSObject<SCNNodeRendererDelegate> *rendererDelegate;
@property (nonatomic) unsigned long long categoryBitMask;
@property (nonatomic) long long focusBehavior;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) NSArray *animationKeys;
@property (readonly, nonatomic) BOOL hasActions;
@property (readonly, nonatomic) NSArray *actionKeys;

/* class methods */
+ (id)nodeWithMDLAsset:(id)mdlasset;
+ (id)nodeWithMDLAsset:(id)mdlasset options:(id)options;
+ (id)nodeWithMDLObject:(id)mdlobject;
+ (id)nodeWithMDLObject:(id)mdlobject options:(id)options;
+ (id)nodeWithMDLObject:(id)mdlobject masterObjects:(id)objects sceneNodes:(id)nodes skinnedMeshes:(id)meshes skelNodesMap:(void *)map asset:(id)asset options:(id)options;
+ (1)simdLocalUp;
+ (1)simdLocalRight;
+ (1)simdLocalFront;
+ (struct SCNVector3 { float x0; float x1; float x2; })localUp;
+ (struct SCNVector3 { float x0; float x1; float x2; })localRight;
+ (struct SCNVector3 { float x0; float x1; float x2; })localFront;
+ (id)node;
+ (id)nodeWithGeometry:(id)geometry;
+ (id)_dumpNodeTree:(id)tree tab:(id)tab;
+ (id)nodeWithNodeRef:(struct __C3DNode { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; struct __C3DNode * x1; struct __C3DNode * x2; struct __C3DNode * x3; int x4; struct { union C3DMatrix4x4 { float x0[16] x1[4] struct { x0[4] } x2; } x0; union  x1; } x5; union C3DMatrix4x4 * x6; BOOL x7; float x8; unsigned long long x9; int x10; unsigned int x11 :1; unsigned int x12 :1; unsigned int x13 :1; unsigned int x14 :1; unsigned int x15 :1; unsigned int x16 :1; unsigned int x17 :1; unsigned int x18 :1; unsigned int x19 :1; unsigned int x20 :1; unsigned int x21 :1; unsigned int x22 :1; unsigned int x23 :1; unsigned int x24 :1; unsigned int x25 :1; unsigned int x26 :1; unsigned int x27 :1; unsigned int x28 :1; unsigned int x29 :1; unsigned int x30 :1; unsigned int x31 :1; unsigned int x32 :1; unsigned int x33 :1; unsigned int x34 :3; unsigned int x35 :1; unsigned int x36 :1; struct { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; } x37; struct  * x38; struct __C3DGeometry * x39; struct __C3DDeformerStack * x40; float x41; struct  x42; } *)ref;
+ (id)keyPathsForValuesAffectingPosition;
+ (id)keyPathsForValuesAffectingTransform;
+ (id)keyPathsForValuesAffectingRotation;
+ (id)keyPathsForValuesAffectingEulerAngles;
+ (id)keyPathsForValuesAffectingOrientation;
+ (id)keyPathsForValuesAffectingScale;
+ (BOOL)resolveInstanceMethod:(SEL)method;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)_associatedMDLObject;
- (void)_addSkinnerWithMDLMesh:(id)mdlmesh sceneNodes:(id)nodes;
- (void)_bakeNodes:(id)nodes folderPath:(id)path inVertex:(BOOL)vertex bakeAO:(BOOL)ao quality:(float)quality attenuation:(float)attenuation geomSetter:(id /* block */)setter terminateSetter:(id /* block */)setter;
- (id)debugQuickLookObject;
- (id)debugQuickLookData;
- (BOOL)simdGetBoundingSphereCenter:(1 *)center radius:(float *)radius;
- (4)simdConvertPosition:(id)position;
- (4)simdConvertPosition:(id)position;
- (4)simdConvertVector:(id)vector;
- (4)simdConvertVector:(id)vector;
- (struct { x0[4] })simdConvertTransform:(struct { x0[4] })transform toNode:(id)node;
- (struct { x0[4] })simdConvertTransform:(struct { x0[4] })transform fromNode:(id)node;
- (void)simdLookAt:;
- (void)simdLookAt:up:localFront:;
- (void)simdLocalTranslateBy:;
- (void)simdLocalRotateBy:(struct )by;
- (void)simdRotateBy:(struct )by;
- (void)lookAt:(struct SCNVector3 { float x0; float x1; float x2; })at;
- (void)lookAt:(struct SCNVector3 { float x0; float x1; float x2; })at up:(struct SCNVector3 { float x0; float x1; float x2; })up localFront:(struct SCNVector3 { float x0; float x1; float x2; })front;
- (void)localTranslateBy:(struct SCNVector3 { float x0; float x1; float x2; })by;
- (void)localRotateBy:(struct SCNVector4 { float x0; float x1; float x2; float x3; })by;
- (void)rotateBy:(struct SCNVector4 { float x0; float x1; float x2; float x3; })by aroundTarget:(struct SCNVector3 { float x0; float x1; float x2; })target;
- (id)init;
- (id)initPresentationNodeWithNodeRef:(struct __C3DNode { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; struct __C3DNode * x1; struct __C3DNode * x2; struct __C3DNode * x3; int x4; struct { union C3DMatrix4x4 { float x0[16] x1[4] struct { x0[4] } x2; } x0; union  x1; } x5; union C3DMatrix4x4 * x6; BOOL x7; float x8; unsigned long long x9; int x10; unsigned int x11 :1; unsigned int x12 :1; unsigned int x13 :1; unsigned int x14 :1; unsigned int x15 :1; unsigned int x16 :1; unsigned int x17 :1; unsigned int x18 :1; unsigned int x19 :1; unsigned int x20 :1; unsigned int x21 :1; unsigned int x22 :1; unsigned int x23 :1; unsigned int x24 :1; unsigned int x25 :1; unsigned int x26 :1; unsigned int x27 :1; unsigned int x28 :1; unsigned int x29 :1; unsigned int x30 :1; unsigned int x31 :1; unsigned int x32 :1; unsigned int x33 :1; unsigned int x34 :3; unsigned int x35 :1; unsigned int x36 :1; struct { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; } x37; struct  * x38; struct __C3DGeometry * x39; struct __C3DDeformerStack * x40; float x41; struct  x42; } *)ref;
- (id)initWithNodeRef:(struct __C3DNode { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; struct __C3DNode * x1; struct __C3DNode * x2; struct __C3DNode * x3; int x4; struct { union C3DMatrix4x4 { float x0[16] x1[4] struct { x0[4] } x2; } x0; union  x1; } x5; union C3DMatrix4x4 * x6; BOOL x7; float x8; unsigned long long x9; int x10; unsigned int x11 :1; unsigned int x12 :1; unsigned int x13 :1; unsigned int x14 :1; unsigned int x15 :1; unsigned int x16 :1; unsigned int x17 :1; unsigned int x18 :1; unsigned int x19 :1; unsigned int x20 :1; unsigned int x21 :1; unsigned int x22 :1; unsigned int x23 :1; unsigned int x24 :1; unsigned int x25 :1; unsigned int x26 :1; unsigned int x27 :1; unsigned int x28 :1; unsigned int x29 :1; unsigned int x30 :1; unsigned int x31 :1; unsigned int x32 :1; unsigned int x33 :1; unsigned int x34 :3; unsigned int x35 :1; unsigned int x36 :1; struct { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; } x37; struct  * x38; struct __C3DGeometry * x39; struct __C3DDeformerStack * x40; float x41; struct  x42; } *)ref;
- (void)_initChildNodesArray;
- (void)dealloc;
- (void)setIdentifier:(id)identifier;
- (id)identifier;
- (void)_syncEntityObjCModel;
- (void)setAttribute:(id)attribute forKey:(id)key;
- (id)attributeForKey:(id)key;
- (void)_syncObjCModel;
- (BOOL)isPresentationInstance;
- (id)presentationInstance;
- (struct __C3DScene *)sceneRef;
- (id)scene;
- (void)_dump:(id)_dump;
- (void)dump;
- (id)_dumpTree;
- (void)_setAttributes:(id)attributes;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)copy;
- (id)_copyRecursively;
- (id)clone;
- (BOOL)_isAReference;
- (id)childNodeWithName:(id)name recursively:(BOOL)recursively;
- (id)objectInChildNodesWithName:(id)name;
- (BOOL)_childNodesPassingTest:(id /* block */)test recursively:(BOOL)recursively output:(id)output;
- (id)childNodesPassingTest:(id /* block */)test recursively:(BOOL)recursively;
- (id)childNodesPassingTest:(id /* block */)test;
- (BOOL)_enumerateChildNodesUsingBlock:(id /* block */)block;
- (void)enumerateChildNodesUsingBlock:(id /* block */)block;
- (void)enumerateHierarchyUsingBlock:(id /* block */)block;
- (void)enumerateNodesUsingBlock:(id /* block */)block;
- (void)_childNodesWithAttribute:(Class)attribute output:(id)output recursively:(BOOL)recursively;
- (id)childNodesWithAttribute:(Class)attribute recursively:(BOOL)recursively;
- (id)objectInChildNodesWithAttribute:(id)attribute firstOnly:(BOOL)only;
- (id)childNodeWithName:(id)name;
- (id)jsChildNodesWithAttribute:(id)attribute;
- (id)_findComponentWithType:(long long)type;
- (void)_removeComponentWithType:(long long)type;
- (void)_assignComponent:(id)component toContainerWithType:(long long)type;
- (id)__light;
- (id)__camera;
- (id)__geometry;
- (id)__skinner;
- (id)__morpher;
- (struct __C3DNode { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x0; atomic  x1; unsigned long long x2; } x0; void * x1; struct __CFString * x2; struct __CFString * x3; struct __CFDictionary * x4; struct __C3DScene * x5; long long x6; } x0; struct __C3DNode * x1; struct __C3DNode * x2; struct __C3DNode * x3; int x4; struct { union C3DMatrix4x4 { float x0[16] x1[4] struct { x0[4] } x2; } x0; union  x1; } x5; union C3DMatrix4x4 * x6; BOOL x7; float x8; unsigned long long x9; int x10; unsigned int x11 :1; unsigned int x12 :1; unsigned int x13 :1; unsigned int x14 :1; unsigned int x15 :1; unsigned int x16 :1; unsigned int x17 :1; unsigned int x18 :1; unsigned int x19 :1; unsigned int x20 :1; unsigned int x21 :1; unsigned int x22 :1; unsigned int x23 :1; unsigned int x24 :1; unsigned int x25 :1; unsigned int x26 :1; unsigned int x27 :1; unsigned int x28 :1; unsigned int x29 :1; unsigned int x30 :1; unsigned int x31 :1; unsigned int x32 :1; unsigned int x33 :1; unsigned int x34 :3; unsigned int x35 :1; unsigned int x36 :1; struct { struct { unsigned short x0; unsigned short x1; } x0; unsigned int x1; } x37; struct  * x38; struct __C3DGeometry * x39; struct __C3DDeformerStack * x40; float x41; struct  x42; } *)nodeRef;
- (id)hitTestWithSegmentFromPoint:(struct SCNVector3 { float x0; float x1; float x2; })point toPoint:(struct SCNVector3 { float x0; float x1; float x2; })point options:(id)options;
- (void)_registerAsObserver;
- (void)_updateTransform;
- (void)_updateAffine;
- (long long)rotationRepresentation;
- (struct )_quaternion;
- (struct SCNVector4 { float x0; float x1; float x2; float x3; })quaternion;
- (void)setQuaternion:(struct SCNVector4 { float x0; float x1; float x2; float x3; })quaternion;
- (void)_setQuaternion:(struct )quaternion;
- (1)_euler;
- (void)_setPosition:;
- (void)_setScale:;
- (BOOL)isHittable;
- (void)setHittable:(BOOL)hittable;
- (BOOL)usesDepthPrePass;
- (void)setUsesDepthPrePass:(BOOL)pass;
- (BOOL)isHidden;
- (id)mutableChildNodes;
- (void)_setComponent:(id)component withType:(long long)type;
- (BOOL)isJoint;
- (void)setIsJoint:(BOOL)joint;
- (BOOL)isGizmo;
- (void)setGizmo:(BOOL)gizmo;
- (id)postMorphingDeformers;
- (void)setPostMorphingDeformers:(id)deformers;
- (id)postSkinningDeformers;
- (void)setPostSkinningDeformers:(id)deformers;
- (void)setFilters:(id)filters;
- (id)filters;
- (void)setEffect:(id)effect;
- (id)effect;
- (void)renderInContext:(void *)context;
- (BOOL)parseSpecialKey:(id)key withPath:(id)path intoDestination:(id *)destination;
- (id)copyAnimationChannelForKeyPath:(id)path animation:(id)animation;
- (void)setValue:(id)value forKeyPath:(id)path;
- (id)valueForKeyPath:(id)path;
- (id)valueForUndefinedKey:(id)key;
- (void)setValue:(id)value forUndefinedKey:(id)key;
- (void *)__CFObject;
- (struct __C3DAnimationManager *)animationManager;
- (BOOL)__removeAnimation:(id)animation forKey:(id)key;
- (void)addAnimationPlayer:(id)player forKey:(id)key;
- (void)addAnimation:(id)animation forKey:(id)key;
- (void)addAnimation:(id)animation;
- (void)removeAllAnimations;
- (void)removeAllAnimationsWithBlendOutDuration:(double)duration;
- (void)removeAnimationForKey:(id)key;
- (void)removeAnimationForKey:(id)key blendOutDuration:(double)duration;
- (void)_syncObjCAnimations;
- (id)animationForKey:(id)key;
- (id)_scnAnimationForKey:(id)key;
- (void)_copyAnimationsFrom:(id)from;
- (id)animationPlayerForKey:(id)key;
- (void)_pauseAnimation:(BOOL)animation forKey:(id)key pausedByNode:(BOOL)node;
- (void)pauseAnimationForKey:(id)key;
- (void)resumeAnimationForKey:(id)key;
- (void)removeAnimationForKey:(id)key fadeOutDuration:(double)duration;
- (void)setSpeed:(double)speed forAnimationKey:(id)key;
- (BOOL)isAnimationForKeyPaused:(id)paused;
- (id)_scnBindings;
- (void)bindAnimatablePath:(id)path toObject:(id)object withKeyPath:(id)path options:(id)options;
- (void)unbindAnimatablePath:(id)path;
- (void)removeAllBindings;
- (void)_setParent:(id)parent;
- (unsigned long long)countOfChildNodes;
- (id)objectInChildNodesAtIndex:(unsigned long long)index;
- (void)_reSyncModelTree;
- (BOOL)canAddChildNode:(id)node;
- (void)addChildNode:(id)node;
- (void)__insertObject:(id)object inChildNodesAtIndex:(unsigned long long)index;
- (void)insertObject:(id)object inChildNodesAtIndex:(unsigned long long)index;
- (void)__removeObjectFromChildNodesAtIndex:(unsigned long long)index;
- (void)removeObjectFromChildNodesAtIndex:(unsigned long long)index;
- (void)replaceObjectInChildNodesAtIndex:(unsigned long long)index withObject:(id)object;
- (void)removeFromParentNode;
- (unsigned long long)indexOfChildNode:(id)node;
- (void)removeAllChilds;
- (void)insertChildNode:(id)node atIndex:(unsigned long long)index;
- (void)replaceChildNode:(id)node with:(id)with;
- (BOOL)getBoundingBoxMin:(struct SCNVector3 { float x0; float x1; float x2; } *)min max:(struct SCNVector3 { float x0; float x1; float x2; } *)max;
- (void)setBoundingBoxMin:(struct SCNVector3 { float x0; float x1; float x2; } *)min max:(struct SCNVector3 { float x0; float x1; float x2; } *)max;
- (BOOL)getBoundingSphereCenter:(struct SCNVector3 { float x0; float x1; float x2; } *)center radius:(double *)radius;
- (BOOL)getFrustum:(struct { union { struct { float x00; float x1; float x2; float x3; } x0; } x[6] } *)frustum;
- (id)getBoundingSphere;
- (id)getBoundingBox;
- (id)flattenedClone;
- (id)flattenedCopy;
- (id)_subdividedCopyWithSubdivisionLevel:(long long)level;
- (void)_setPausedOrPausedByInheritance:(BOOL)inheritance;
- (BOOL)isPausedOrPausedByInheritance;
- (BOOL)isPaused;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_focusFrameInView:(id)view;
- (void)_appendFocusableNodesInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect ofView:(id)view toFocusItems:(id)items;
- (void)_setHasFocusableChild;
- (void)_updateFocusableCache;
- (BOOL)canBecomeFocused;
- (BOOL)isFocusInteractionEnabled;
- (BOOL)_isEffectivelyHidden;
- (void)runAction:(id)action forKey:(id)key completionHandler:(id /* block */)handler;
- (void)runAction:(id)action;
- (void)runAction:(id)action completionHandler:(id /* block */)handler;
- (void)runAction:(id)action forKey:(id)key;
- (id)actions;
- (id)actionForKey:(id)key;
- (void)_removeAction:(id)action forKey:(id)key;
- (void)removeActionForKey:(id)key;
- (void)removeAllActions;
- (id)entity;
- (void)setEntity:(id)entity;
- (id)_particleSystems;
- (void)_removeDeadParticleSystem:(struct __C3DParticleSystem *)system;
- (id)particleSystems;
- (void)addParticleSystem:(id)system;
- (void)removeAllParticleSystems;
- (void)removeParticleSystem:(id)system;
- (unsigned long long)countOfParticleSystems;
- (id)objectInParticleSystemsAtIndex:(unsigned long long)index;
- (void)insertObject:(id)object inParticleSystemsAtIndex:(unsigned long long)index;
- (void)removeObjectFromParticleSystemsAtIndex:(unsigned long long)index;
- (void)replaceObjectInParticleSystemsAtIndex:(unsigned long long)index withObject:(id)object;
- (id)_audioPlayers;
- (id)audioPlayers;
- (void)addAudioPlayer:(id)player;
- (void)removeAllAudioPlayers;
- (void)removeAudioPlayer:(id)player;
- (unsigned long long)countOfAudioPlayers;
- (id)objectInAudioPlayersAtIndex:(unsigned long long)index;
- (void)insertObject:(id)object inAudioPlayersAtIndex:(unsigned long long)index;
- (void)removeObjectFromAudioPlayersAtIndex:(unsigned long long)index;
- (void)replaceObjectInAudioPlayerAtIndex:(unsigned long long)index withObject:(id)object;
- (struct SCNVector3 { float x0; float x1; float x2; })convertPosition:(struct SCNVector3 { float x0; float x1; float x2; })position toNode:(id)node;
- (struct SCNVector3 { float x0; float x1; float x2; })convertPosition:(struct SCNVector3 { float x0; float x1; float x2; })position fromNode:(id)node;
- (struct SCNVector3 { float x0; float x1; float x2; })convertVector:(struct SCNVector3 { float x0; float x1; float x2; })vector toNode:(id)node;
- (struct SCNVector3 { float x0; float x1; float x2; })convertVector:(struct SCNVector3 { float x0; float x1; float x2; })vector fromNode:(id)node;
- (struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })convertTransform:(struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })transform toNode:(id)node;
- (struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })convertTransform:(struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })transform fromNode:(id)node;
- (void)_customEncodingOfSCNNode:(id)scnnode usePresentationInstance:(BOOL)instance;
- (void)_customDecodingOfSCNNode:(id)scnnode;
- (void)_didDecodeSCNNode:(id)scnnode;
- (void)_encodeNodePropertiesWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (BOOL)authoringEnvironmentNode;
- (void)setAuthoringEnvironmentNode:(BOOL)node;
- (id)authoringEnvironmentCompanionNode;
- (void)setAuthoringEnvironmentCompanionNode:(id)node;
- (id)authoringEnvironmentPresentationNode;
- (void)setAuthoringEnvironmentPresentationNode:(id)node;
@end

#endif /* SCNNode_h */
