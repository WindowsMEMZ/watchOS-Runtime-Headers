//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNCameraNavigationController_h
#define SCNCameraNavigationController_h
@import Foundation;

#include "SCNCameraController.h"
#include "SCNCameraControllerDelegate-Protocol.h"
#include "SCNEventHandler-Protocol.h"
#include "SCNNode.h"
#include "SCNView.h"

@class NSString, UIGestureRecognizer;
@protocol SCNCameraNavigationControllerDelegate, {?="lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}"keyCodeConfiguration"@"NSDictionary""keyDown"{set<unsigned short, std::less<unsigned short>, std::allocator<unsigned short>>="__tree_"{__tree<unsigned short, std::less<unsigned short>, std::allocator<unsigned short>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<unsigned short, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<unsigned short>>="__value_"Q}}}"forward"{vector<unsigned short, std::allocator<unsigned short>>="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::allocator<unsigned short>>="__value_"^S}}"backward"{vector<unsigned short, std::allocator<unsigned short>>="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::allocator<unsigned short>>="__value_"^S}}"left"{vector<unsigned short, std::allocator<unsigned short>>="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::allocator<unsigned short>>="__value_"^S}}"right"{vector<unsigned short, std::allocator<unsigned short>>="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::allocator<unsigned short>>="__value_"^S}}};

@interface SCNCameraNavigationController : NSObject<SCNEventHandler, SCNCameraControllerDelegate> {
  /* instance variables */
  UIGestureRecognizer *_pressGesture;
  UIGestureRecognizer *_tapGesture;
  UIGestureRecognizer *_pinchGesture;
  UIGestureRecognizer *_panGesture;
  UIGestureRecognizer *_rotateGesture;
  BOOL _isDraggingWithOneFinger;
  long long _lastGestureFingerCount;
  long long _browseMode;
  float _cameraOriginalFieldOfView;
  float _fieldOfViewZoomFactor;
  float _originalOrthoScale;
  float _orthographicZoomFactor;
  BOOL _translationAllowed;
  BOOL _didEverFocusNode;
  BOOL _isSceneBoundingSphereComputed;
  BOOL _cameraTargetComputed;
  BOOL _pinchShouldMoveCamera;
  BOOL _shouldUpdateTarget;
  BOOL _shouldIgnoreMomentumEvents;
  BOOL _isOrbiting;
  BOOL _recordingPointOfViewEvents;
  BOOL _mouseDown;
  union { " vector; char x0; e x1; in int128 x2; e x3; const " x4; struct { float x; float y; float z; float radius; } x5; } _sceneBoundingSphere;
   _translationOrigin;
  float _initialZoom;
   _initialPointOfViewWorldPosition;
  double _lastKeyInputTime;
  struct CGPoint { double x; double y; } _initialInputLocation;
  struct CGPoint { double x; double y; } _lastInputLocation;
  struct CGPoint { double x; double y; } _accumulatedDrag;
  double _lastRotationAngle;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _drawAtTimeLock;
  struct { BOOL automaticLocationUpToDate; BOOL hasAutomatic; } _target;
  struct { struct CGPoint { double x; double y; } lastDragLocation; struct CGPoint { double x; double y; } velocity; double lastDragTime; } _inertia;
  struct { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; NSDictionary *keyCodeConfiguration; struct set<unsigned short, std::less<unsigned short>, std::allocator<unsigned short>> { struct __tree<unsigned short, std::less<unsigned short>, std::allocator<unsigned short>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<unsigned short, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::less<unsigned short>> { unsigned long long __value_; } __pair3_; } __tree_; } keyDown; struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short *__value_; } __end_cap_; } forward; struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short *__value_; } __end_cap_; } backward; struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short *__value_; } __end_cap_; } left; struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short *__begin_; unsigned short *__end_; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short *__value_; } __end_cap_; } right; } _keyboard;
  struct { BOOL hasShift; BOOL hasOption; } _scrollWheelModifiers;
  SCNNode *_freeViewCameraNode;
}

@property (readonly, nonatomic) SCNCameraController *cameraController;
@property (nonatomic) NSObject<SCNCameraNavigationControllerDelegate> *delegate;
@property (nonatomic) unsigned long long stickyAxis;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } cameraTarget;
@property (nonatomic) BOOL gimbalLockMode;
@property (nonatomic) BOOL enableInertia;
@property (nonatomic) double friction;
@property (nonatomic) BOOL automaticCameraTarget;
@property (nonatomic) BOOL enabled;
@property (nonatomic) BOOL enableFreeCamera;
@property (readonly, nonatomic) SCNNode *freeCamera;
@property (nonatomic) SCNView *view;
@property (nonatomic) BOOL autoSwitchToFreeCamera;
@property (nonatomic) BOOL allowsTranslation;
@property (nonatomic) double flyModeVelocity;
@property (nonatomic) double panSensitivity;
@property (nonatomic) double truckSensitivity;
@property (nonatomic) double rotationSensitivity;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithView:(id)view;
- (void)dealloc;
- (void)invalidateCameraTarget;
- (struct SCNVector3 { float x0; float x1; float x2; })gimbalLockVector;
- (void)setGimbalLockVector:(struct SCNVector3 { float x0; float x1; float x2; })vector;
- (BOOL)wantsRedraw;
- (void)focusNode:(id)node;
- (void)focusNodes:(id)nodes;
- (unsigned long long)_effectiveStickyAxis;
- (void)activateFreeCamera;
- (void)_resetFreeViewCamera;
- (BOOL)_freeCameraActivated;
- (void)_prepareFreeViewCamera;
- (void)_installFreeViewCameraIfNeeded;
- (void)_switchToFreeViewCamera;
- (float)_cappedTranslationDelta:(float)delta;
- (float)_translationCoef;
- (float)_targetDistance;
- (void)rotateOf:(double)of;
- (void)zoomBy:(float)by animate:(BOOL)animate;
- (void)zoomBy:(float)by;
- (double)zoomFactor;
- (id)pointOfView;
- (float)_orthographicZoomFactorForProposedZoomFactor:(float)factor;
- (float)_orthographicScaleForZoomFactor:(float)factor;
- (void)setZoomFactor:(double)factor;
- (void)translateByX:(float)x Y:(float)y Z:(float)z;
- (void)cameraInertiaWillStartForController:(id)controller;
- (void)cameraInertiaDidEndForController:(id)controller;
- (void)sceneWillChange;
- (void)sceneDidChange;
- (void)viewWillDrawAtTime:(double)time;
- (void)viewDidDrawAtTime:(double)time;
- (void)cameraWillChange;
- (void)_setupUpVector;
- (void)_willBeginInteraction;
- (void)cameraDidChange;
- (void)_stopInertia;
- (id)gestureRecognizers;
- (BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizerShouldBegin:(id)begin;
- (void)_handlePinch:(id)pinch;
- (void)_handlePan:(id)pan;
- (void)_handleRotation:(id)rotation;
- (void)_handleDoubleTap:(id)tap;
- (void)_handlePress:(id)press;
- (void)beginGesture:(id)gesture;
- (void)rotateWithGestureRecognizer:(id)recognizer;
- (void)pinchWithGestureRecognizer:(id)recognizer;
- (void)panWithGestureRecognizer:(id)recognizer;
- (double)_modeSensitivity;
- (1)worldFront;
- (void)_startBrowsingIfNeeded:(struct CGPoint { double x0; double x1; })needed;
- (2)_defaultTargetForScene:(id)scene;
- (struct SCNVector3 { float x0; float x1; float x2; })cameraAutomaticTargetPoint;
- (void)_computeAutomaticTargetPointIfNeeded;
- (union { struct { float x0; float x1; float x2; float x3; } x0; })_sceneBoundingSphere;
- (BOOL)_computeBoundingSphereOmittingFloorsForNode:(struct __C3DNode *)node sphere:(struct C3DSphere *)sphere;
- (void)_computeStickyAxisIfNeeded:(struct CGPoint { double x0; double x1; })needed;
- (float)_pointOfViewOrthographicScale;
- (void)_setPointOfViewOrthographicScale:(float)scale;
- (BOOL)_pointOfViewUsesOrthographicProjection;
- (void)_computeTranslationOrigin3DFromPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_translateToViewPoint:(struct CGPoint { double x0; double x1; })point;
- (void)__willChangePointOfView;
- (void)__didChangePointOfView;
@end

#endif /* SCNCameraNavigationController_h */
