//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNPhysicsHingeJoint_h
#define SCNPhysicsHingeJoint_h
@import Foundation;

#include "SCNPhysicsBehavior.h"
#include "SCNPhysicsBody.h"
#include "SCNPhysicsWorld.h"

@interface SCNPhysicsHingeJoint : SCNPhysicsBehavior {
  /* instance variables */
  struct { SCNPhysicsBody *bodyA; SCNPhysicsBody *bodyB; struct SCNVector3 { float x; float y; float z; } anchorA; struct SCNVector3 { float x; float y; float z; } anchorB; struct SCNVector3 { float x; float y; float z; } axisA; struct SCNVector3 { float x; float y; float z; } axisB; } _definition;
  struct btHingeConstraint { undefined * * x0; int x1; int x2; union { int x0; void * x1; } x3; float x4; BOOL x5; BOOL x6; int x7; struct btRigidBody * x8; struct btRigidBody * x9; float x10; float x11; struct btJointFeedback * x12; f])}f} x13[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4] f])}f} x14[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4] struct btTransform { struct btMatrix3x3 { f])} x0[3{btVector3=(?=[4] } x0; struct btVector3 { union { float x0[4] } x0; } x1; } x15; struct btTransform { struct btMatrix3x3 { f])} x0[3{btVector3=(?=[4] } x0; struct btVector3 { union { float x0[4] } x0; } x1; } x16; float x17; float x18; struct btAngularLimit { float x0; float x1; float x2; float x3; float x4; float x5; float x6; BOOL x7; } x19; float x20; float x21; float x22; float x23; BOOL x24; BOOL x25; BOOL x26; BOOL x27; BOOL x28; float x29; int x30; float x31; float x32; float x33; } * _constraint;
  SCNPhysicsWorld *_world;
}

@property (readonly, nonatomic) SCNPhysicsBody *bodyA;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } axisA;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } anchorA;
@property (readonly, nonatomic) SCNPhysicsBody *bodyB;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } axisB;
@property (nonatomic) struct SCNVector3 { float x0; float x1; float x2; } anchorB;

/* class methods */
+ (BOOL)supportsSecureCoding;
+ (id)jointWithBodyA:(id)a axisA:(struct SCNVector3 { float x0; float x1; float x2; })a anchorA:(struct SCNVector3 { float x0; float x1; float x2; })a bodyB:(id)b axisB:(struct SCNVector3 { float x0; float x1; float x2; })b anchorB:(struct SCNVector3 { float x0; float x1; float x2; })b;
+ (id)jointWithBody:(id)body axis:(struct SCNVector3 { float x0; float x1; float x2; })axis anchor:(struct SCNVector3 { float x0; float x1; float x2; })anchor;

/* instance methods */
- (void)dealloc;
- (id)initWithBodyA:(id)a axisA:(struct SCNVector3 { float x0; float x1; float x2; })a anchorA:(struct SCNVector3 { float x0; float x1; float x2; })a bodyB:(id)b axisB:(struct SCNVector3 { float x0; float x1; float x2; })b anchorB:(struct SCNVector3 { float x0; float x1; float x2; })b;
- (id)initWithBody:(id)body axis:(struct SCNVector3 { float x0; float x1; float x2; })axis anchor:(struct SCNVector3 { float x0; float x1; float x2; })anchor;
- (void)_copyDefinition:(struct { unsigned char x0[296] } *)definition;
- (void)_addToPhysicsWorld:(id)world definition:(struct { unsigned char x0[296] })definition;
- (void)_willRemoveFromPhysicsWorld:(id)world;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
@end

#endif /* SCNPhysicsHingeJoint_h */
