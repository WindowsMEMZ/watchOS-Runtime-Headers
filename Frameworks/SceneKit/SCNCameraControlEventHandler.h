//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 599.201.0.0.0
//
#ifndef SCNCameraControlEventHandler_h
#define SCNCameraControlEventHandler_h
@import Foundation;

#include "SCNEventHandler.h"
#include "SCNNode.h"

@class UIGestureRecognizer;

@interface SCNCameraControlEventHandler : SCNEventHandler {
  /* instance variables */
  SCNNode *_freeViewCameraNode;
  struct CGPoint { double x; double y; } _initialPoint;
  union C3DMatrix4x4 { float x[16] components; x[4] m; struct { x[4] columns; } simd; } _initialMatrix;
  float _initialZoom;
  float _originalFovX;
  float _originalFovY;
  float _originalOrthoScale;
  float _zoomFactor;
   _clickOrigin;
  int _lastGestureFingerCount;
  BOOL _isDraggingWithOneFinger;
  float _roll;
  union C3DMatrix4x4 { float x[16] components; x[4] m; struct { x[4] columns; } simd; } _initialMatrixForRoll;
  UIGestureRecognizer *_pressGesture;
  UIGestureRecognizer *_tapGesture;
  UIGestureRecognizer *_pinchGesture;
  UIGestureRecognizer *_panGesture;
  UIGestureRecognizer *_rotateGesture;
  struct C3DSphere {  } _viewedObjectSphere;
  unsigned int x :1 _isViewedObjectSphereComputed;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _stateLock;
  unsigned int x :1 _enabled;
  unsigned int x :1 _hasAutomaticCameraTarget;
  unsigned int x :1 _automaticCameraTargetUpToDate;
  unsigned int x :1 _inertia;
  unsigned int x :1 _didEverFocusNode;
  unsigned int x :1 _pinchShouldMoveCamera;
  unsigned int x :1 _alternateMode;
  unsigned int x :1 _upDirIsSet;
  unsigned int x :1 _inertiaRunning;
  long long _browseMode;
   _upDir;
  struct SCNVector3 { float x; float y; float z; } _autoCameraTarget;
  float _browseScaleFactor;
  struct CGPoint { double x; double y; } _totalDragWithInertia;
  struct CGPoint { double x; double y; } _inertiaVelocity;
  double _lastSimulationTime;
}

@property BOOL gimbalLockMode;
@property struct SCNVector3 { float x0; float x1; float x2; } gimbalLockVector;
@property unsigned long long stickyAxis;
@property BOOL enableInertia;
@property double friction;
@property BOOL allowsTranslation;
@property BOOL automaticCameraTarget;
@property struct SCNVector3 { float x0; float x1; float x2; } cameraTarget;

/* class methods */
+ (2)frontVectorWithPointOfView:(id)view;
+ (struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })matrixWithNoRoll:(struct SCNMatrix4 { float x0; float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; })roll;

/* instance methods */
- (id)init;
- (void)dealloc;
- (BOOL)enabled;
- (void)setEnabled:(BOOL)enabled;
- (void)invalidateCameraTarget;
- (id)freeCamera;
- (void)focusNode:(id)node;
- (void)setEnableFreeCamera:(BOOL)camera;
- (void)activateFreeCamera;
- (void)_resetFreeViewCamera;
- (BOOL)_freeCameraActivated;
- (void)_prepareFreeViewCamera;
- (void)_installFreeViewCameraIfNeeded;
- (void)_switchToFreeViewCamera;
- (struct SCNVector3 { float x0; float x1; float x2; })cameraAutomaticTargetPoint;
- (void)computeAutomaticTargetPoint;
- (float)_translationCoef;
- (double)_browseScale;
- (void)_resetBrowseScaleFactor;
- (void)updateBrowseScaleFactor;
- (void)rotateOf:(double)of;
- (void)zoomBy:(float)by animate:(BOOL)animate;
- (void)zoomBy:(float)by;
- (double)zoomFactor;
- (void)setZoomFactor:(double)factor;
- (void)translateByX:(float)x Y:(float)y Z:(float)z;
- (void)sceneWillChange;
- (void)sceneDidChange;
- (void)cameraWillChange;
- (void)cameraDidChange;
- (void)_onInertiaTimer;
- (void)rotateWithVector:(long long)vector;
- (void)viewWillDrawAtTime:(double)time;
- (void)_setInertiaRunning:(BOOL)running;
- (BOOL)_isInertiaRunning;
- (BOOL)_3DConnexionIsPressed;
- (BOOL)wantsRedraw;
- (void)endDraggingWithVelocity:(struct CGPoint { double x0; double x1; })velocity;
- (void)_startBrowsingIfNeeded:(struct CGPoint { double x0; double x1; })needed;
- (BOOL)computeBoundingSphereOmittingFloorsForNode:(struct __C3DNode *)node sphere:(struct C3DSphere *)sphere;
- (struct C3DSphere)viewedObjectSphere;
- (1)frontVector;
- (void)_beginTranslateAtLocation:(struct CGPoint { double x0; double x1; })location;
- (void)clearRoll;
- (void)_rotateWithDrag:(struct CGPoint { double x0; double x1; })drag mode:(long long)mode stickyAxis:(unsigned long long)axis;
- (void)_translateTo:(struct CGPoint { double x0; double x1; })to;
- (BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)recognizer;
- (id)gestureRecognizers;
- (BOOL)gestureRecognizerShouldBegin:(id)begin;
- (void)_handlePinch:(id)pinch;
- (void)_handlePan:(id)pan;
- (void)_handleRotation:(id)rotation;
- (void)_handleDoubleTap:(id)tap;
- (void)_handlePress:(id)press;
- (void)beginGesture:(id)gesture;
- (void)rotateWithGestureRecognizer:(id)recognizer;
- (void)pinchWithGestureRecognizer:(id)recognizer;
- (void)panWithGestureRecognizer:(id)recognizer;
@end

#endif /* SCNCameraControlEventHandler_h */
