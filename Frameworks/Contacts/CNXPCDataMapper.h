//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3628.0.0.0.0
//
#ifndef CNXPCDataMapper_h
#define CNXPCDataMapper_h
@import Foundation;

#include "CNAuthorization.h"
#include "CNContactsLogger-Protocol.h"
#include "CNDataMapper-Protocol.h"
#include "CNKeyboardStateMonitor-Protocol.h"
#include "CNXPCDataMapperService-Protocol.h"

@class NSString, NSXPCConnection;

@interface CNXPCDataMapper : NSObject<CNDataMapper> {
  /* instance variables */
  NSXPCConnection *_connection;
  NSObject<CNContactsLogger> *_logger;
  NSObject<CNXPCDataMapperService> *_serviceProxy;
  CNAuthorization *_authorization;
  NSObject<CNKeyboardStateMonitor> *_keyboardStateMonitor;
}

@property (readonly) BOOL shouldLogContactsAccess;
@property (readonly) BOOL userMightHaveUnconfiguredPersistenceStack;
@property (retain, nonatomic) NSString *legacyTetheredSyncDeviceAnchor;
@property (retain, nonatomic) NSString *legacyTetheredSyncComputerAnchor;
@property (readonly, nonatomic) BOOL shouldLogPrivacyAccountingAccessEvents;
@property (readonly, nonatomic) BOOL shouldCaptureMetricsForQueries;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)contactBuffersDecoderForFetchRequest:(id)request;
+ (id)serviceProtocolInterface;

/* instance methods */
- (id)init;
- (id)initWithConfiguration:(id)configuration;
- (id)initWithConfiguration:(id)configuration connection:(id)connection;
- (void)dealloc;
- (id)unifiedContactCountWithError:(id *)error;
- (id)contactCountForFetchRequest:(id)request error:(id *)error;
- (id)sectionListOffsetsForSortOrder:(long long)order error:(id *)error;
- (id)contactObservableForFetchRequest:(id)request;
- (id)identifierWithError:(id *)error;
- (id)meContactIdentifiers:(id *)identifiers;
- (BOOL)executeSaveRequest:(id)request error:(id *)error;
- (BOOL)executeSaveRequest:(id)request response:(id *)response authorizationContext:(id)context error:(id *)error;
- (id)executeFetchRequest:(id)request progressiveResults:(id /* block */)results completion:(id /* block */)completion;
- (id)containersMatchingPredicate:(id)predicate error:(id *)error;
- (id)serverSearchContainersMatchingPredicate:(id)predicate error:(id *)error;
- (id)policyForContainerWithIdentifier:(id)identifier error:(id *)error;
- (id)policyWithDescription:(id)description error:(id *)error;
- (id)accountsMatchingPredicate:(id)predicate error:(id *)error;
- (id)groupsMatchingPredicate:(id)predicate error:(id *)error;
- (id)subgroupsOfGroupWithIdentifier:(id)identifier error:(id *)error;
- (id)defaultContainerIdentifier;
- (BOOL)setMeContact:(id)contact error:(id *)error;
- (BOOL)setMeContact:(id)contact forContainer:(id)container error:(id *)error;
- (BOOL)setBestMeIfNeededForGivenName:(id)name familyName:(id)name email:(id)email error:(id *)error;
- (id)contactWithUserActivityUserInfo:(id)info keysToFetch:(id)fetch;
- (id)userActivityUserInfoForContact:(id)contact;
- (BOOL)registerChangeHistoryClientIdentifier:(id)identifier forContainerIdentifier:(id)identifier error:(id *)error;
- (BOOL)unregisterChangeHistoryClientIdentifier:(id)identifier forContainerIdentifier:(id)identifier error:(id *)error;
- (id)changeHistoryWithFetchRequest:(id)request error:(id *)error;
- (BOOL)executeChangeHistoryClearRequest:(id)request error:(id *)error;
- (id)currentHistoryToken;
- (id)currentHistoryAnchor;
- (id)favoritesEntryDictionariesAtPath:(id)path error:(id *)error;
- (BOOL)writeFavoritesPropertyListData:(id)data toPath:(id)path error:(id *)error;
- (void)requestAccessForEntityType:(long long)type completionHandler:(id /* block */)handler;
- (BOOL)requestAccessForEntityType:(long long)type error:(id *)error;
- (id)authorizedKeysForContactKeys:(id)keys error:(id *)error;
- (id)requestExtensionCommand:(id)command error:(id *)error;
- (id)getBackgroundColorOnImageData:(id)data bitmapFormat:(id)format error:(id *)error;
@end

#endif /* CNXPCDataMapper_h */
