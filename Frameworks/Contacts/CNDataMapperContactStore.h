//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 3628.0.0.0.0
//
#ifndef CNDataMapperContactStore_h
#define CNDataMapperContactStore_h
@import Foundation;

#include "CNContactStore.h"
#include "CNContactsLogger-Protocol.h"
#include "CNDataMapper-Protocol.h"
#include "CNQueryAnalyticsLogger-Protocol.h"

@protocol CNRegulatoryLogger;

@interface CNDataMapperContactStore : CNContactStore

@property (readonly, nonatomic) NSObject<CNContactsLogger> *logger;
@property (readonly, nonatomic) NSObject<CNRegulatoryLogger> *regulatoryLogger;
@property (readonly, nonatomic) BOOL shouldLogPrivacyAccountingAccessEvents;
@property (readonly, nonatomic) BOOL isContactsProvider;
@property (readonly, nonatomic) NSObject<CNQueryAnalyticsLogger> *queryAnalyticsLogger;
@property (readonly, retain, nonatomic) NSObject<CNDataMapper> *mapper;

/* class methods */
+ (BOOL)hasEnvironmentSettingsEnabledContactsOutOfProcess;
+ (Class)dataMapperClassForConfiguration:(id)configuration;

/* instance methods */
- (id)iOSMapper;
- (id)init;
- (id)initWithEnvironment:(id)environment;
- (id)initWithEnvironment:(id)environment managedConfiguration:(id)configuration;
- (id)initWithConfiguration:(id)configuration;
- (id)initWithDataMapper:(id)mapper dataMapperConfiguration:(id)configuration;
- (BOOL)setDefaultAccountIdentifier:(id)identifier error:(id *)error;
- (BOOL)resetSortDataIfNeededWithError:(id *)error;
- (id)description;
- (id)identifierWithError:(id *)error;
- (int)saveSequenceCount;
- (id)meContactIdentifiers:(id *)identifiers;
- (BOOL)setMeContact:(id)contact error:(id *)error;
- (BOOL)setMeContact:(id)contact forContainer:(id)container error:(id *)error;
- (BOOL)setBestMeIfNeededForGivenName:(id)name familyName:(id)name email:(id)email error:(id *)error;
- (id)unifiedContactCountWithError:(id *)error;
- (id)contactCountForFetchRequest:(id)request error:(id *)error;
- (id)sectionListOffsetsForSortOrder:(long long)order error:(id *)error;
- (BOOL)moveContacts:(id)contacts fromContainer:(id)container toContainer:(id)container error:(id *)error;
- (id)unifiedContactsMatchingPredicate:(id)predicate keysToFetch:(id)fetch error:(id *)error;
- (BOOL)enumerateContactsAndMatchInfoWithFetchRequest:(id)request error:(id *)error usingBlock:(id /* block */)block;
- (id)contactsForFetchRequest:(id)request matchInfos:(id *)infos error:(id *)error;
- (id)executeFetchRequest:(id)request progressiveResults:(id /* block */)results completion:(id /* block */)completion;
- (id)groupsMatchingPredicate:(id)predicate error:(id *)error;
- (id)groupWithIdentifier:(id)identifier error:(id *)error;
- (id)membersOfGroupWithIdentifier:(id)identifier keysToFetch:(id)fetch error:(id *)error;
- (id)subgroupsOfGroupWithIdentifier:(id)identifier error:(id *)error;
- (id)contactsInContainerWithIdentifier:(id)identifier keysToFetch:(id)fetch error:(id *)error;
- (id)containersMatchingPredicate:(id)predicate error:(id *)error;
- (id)serverSearchContainersMatchingPredicate:(id)predicate error:(id *)error;
- (id)policyWithDescription:(id)description error:(id *)error;
- (id)usedLabelsForPropertyWithKey:(id)key error:(id *)error;
- (id)accountsMatchingPredicate:(id)predicate error:(id *)error;
- (BOOL)executeSaveRequest:(id)request error:(id *)error;
- (BOOL)executeSaveRequest:(id)request response:(id *)response authorizationContext:(id)context error:(id *)error;
- (BOOL)isValidSaveRequest:(id)request authorizationContext:(id)context error:(id *)error;
- (id)defaultContainerIdentifier;
- (id)legacyTetheredSyncDeviceAnchor;
- (void)setLegacyTetheredSyncDeviceAnchor:(id)anchor;
- (id)legacyTetheredSyncComputerAnchor;
- (void)setLegacyTetheredSyncComputerAnchor:(id)anchor;
- (id)contactWithUserActivityUserInfo:(id)info keysToFetch:(id)fetch;
- (id)userActivityUserInfoForContact:(id)contact;
- (BOOL)supportsMatchingDictionaries;
- (id)descriptorForRequiredKeysForMatchingDictionary;
- (id)contactIdentifierWithMatchingDictionary:(id)dictionary;
- (id)matchingDictionaryForContact:(id)contact;
- (BOOL)registerChangeHistoryClientIdentifier:(id)identifier forContainerIdentifier:(id)identifier error:(id *)error;
- (BOOL)unregisterChangeHistoryClientIdentifier:(id)identifier forContainerIdentifier:(id)identifier error:(id *)error;
- (id)changeHistoryWithFetchRequest:(id)request error:(id *)error;
- (BOOL)executeChangeHistoryClearRequest:(id)request error:(id *)error;
- (id)currentHistoryToken;
- (id)currentHistoryAnchor;
- (BOOL)hasMultipleGroupsOrAccounts;
- (BOOL)hasGroups;
- (id)requestExtensionCommand:(id)command error:(id *)error;
- (id)getBackgroundColorOnImageData:(id)data bitmapFormat:(id)format error:(id *)error;
- (id)requestAccessForEntityType:(long long)type;
- (void)requestReadAccessForEntityType:(long long)type completionHandler:(id /* block */)handler;
- (BOOL)requestContactsReadAccessWithError:(id *)error;
- (BOOL)requestContactsWriteAccessWithError:(id *)error;
- (BOOL)requestMetadataAccessWithError:(id *)error;
- (BOOL)_requestDataMapperAccessType:(unsigned long long)type error:(id *)error;
- (void)_logContactsAccessWasGrantedForAccessType:(unsigned long long)type;
- (void)_logContactsAccessWasDeniedForAccessType:(unsigned long long)type error:(id)error;
- (void)_logGreenTeaForAccessType:(unsigned long long)type;
- (void)_logPrivacyAccountingForAccessType:(unsigned long long)type;
@end

#endif /* CNDataMapperContactStore_h */
