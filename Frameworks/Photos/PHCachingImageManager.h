//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PHCachingImageManager_h
#define PHCachingImageManager_h
@import Foundation;

#include "PHImageManager.h"
#include "PHImageCache.h"
#include "PHImageCacheDelegate-Protocol.h"

@class BOOL *, NSMutableSet, NSString;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface PHCachingImageManager : PHImageManager<PHImageCacheDelegate> {
  /* instance variables */
  NSMutableSet *_cachingRequestIDs;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _cachingLock;
  PHImageCache *_imageCache;
  BOOL _imageCacheCommitScheduled;
  NSObject<OS_dispatch_queue> *_serialQueue;
  NSObject<OS_dispatch_source> *_memoryEventSource;
}

@property (nonatomic) BOOL allowsCachingHighQualityImages;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)_chooseImageTableFormatForPreheatingFromFormats:(id)formats targetSize:(struct CGSize { double x0; double x1; })size contentMode:(long long)mode returnBestTableRegardlessOfFit:(BOOL)fit;

/* instance methods */
- (id)init;
- (void)additionalWorkForImageRequestCompletedWithResult:(id)result request:(id)request context:(id)context;
- (id)_tableFormatsForLibrary:(id)library;
- (id)_imageTableForPreheatingDegradedOpportunisticRequestsWithPhotoLibrary:(id)library;
- (void)_preheatImageTable:(id)table forAssets:(id)assets;
- (void)_handleMemoryWarning;
- (id)_cacheFailReasonFromInfo:(id)info;
- (BOOL)_canPopulateCacheForResult:(id)result;
- (BOOL)_cacheImageResult:(id)result forRequest:(id)request;
- (void)_handleCachingImageRequestResult:(id)result request:(id)request context:(id)context;
- (void)_commitCacheChanges;
- (void)_scheduleOrCommitCacheChangesIfNeeded;
- (void)startCachingImagesForAssets:(id)assets targetSize:(struct CGSize { double x0; double x1; })size contentMode:(long long)mode options:(id)options;
- (void)stopCachingImagesForAssets:(id)assets targetSize:(struct CGSize { double x0; double x1; })size contentMode:(long long)mode options:(id)options;
- (void)stopCachingImagesForAllAssets;
- (void)mediaRequestContext:(id)context isQueryingCacheForRequest:(id)request didWait:(BOOL *)wait didFindImage:(BOOL *)image resultHandler:(id /* block */)handler;
- (void)imageCache:(id)cache didEvictCacheEntry:(id)entry;
@end

#endif /* PHCachingImageManager_h */
