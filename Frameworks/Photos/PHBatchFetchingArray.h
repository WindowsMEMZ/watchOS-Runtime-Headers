//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 624.0.100.0.0
//
#ifndef PHBatchFetchingArray_h
#define PHBatchFetchingArray_h
@import Foundation;

#include "NSArray.h"
#include "NSCacheDelegate-Protocol.h"
#include "PHBatchFetchingArrayDataSource-Protocol.h"
#include "PHBatchFetchingArrayFetchedClass.h"
#include "PHPhotoLibrary.h"

@class NSArray, NSCache, NSMutableDictionary, NSSet, NSString;
@protocol OS_dispatch_queue;

@interface PHBatchFetchingArray : NSArray<NSCacheDelegate> {
  /* instance variables */
  NSObject<PHBatchFetchingArrayDataSource> *_dataSource;
  unsigned long long _count;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _cacheLock;
  NSCache *_cache;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lastBatchLock;
  unsigned long long _lastBatchIndex;
  NSArray *_lastBatch;
  NSObject<OS_dispatch_queue> *_uuidsQueue;
  NSMutableDictionary *_uuidsByOIDs;
  unsigned long long _batchSize;
  PHBatchFetchingArrayFetchedClass *_overridenFetchResultClass;
  unsigned long long _propertyHint;
}

@property (readonly) PHPhotoLibrary *photoLibrary;
@property (readonly) NSArray *oids;
@property (readonly) NSSet *oidsSet;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (BOOL)accessInstanceVariablesDirectly;

/* instance methods */
- (id)initWithObjects:(id)objects options:(id)options photoLibrary:(id)library;
- (id)initWithOIDs:(id)oids options:(id)options photoLibrary:(id)library;
- (id)initWithOIDs:(id)oids options:(id)options dataSource:(id)source;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)mutableCopyWithZone:(struct _NSZone *)zone;
- (unsigned long long)count;
- (id)objectAtIndex:(unsigned long long)index;
- (void)getObjects:(id *)objects range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (BOOL)containsObject:(id)object;
- (unsigned long long)indexOfObject:(id)object;
- (unsigned long long)indexOfObject:(id)object inRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (id)subarrayWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (unsigned long long)countByEnumeratingWithState:(struct { unsigned long long x0; id * x1; unsigned long long * x2; unsigned long long x3[5] } *)state objects:(id *)objects count:(unsigned long long)count;
- (unsigned long long)_populateObjectBuffer:(id *)buffer range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
- (unsigned long long)batchSize;
- (BOOL)_shouldRetrieveRestrictedAssetOIDsWithSample:(id)sample;
- (id)_phObjectsForOIDs:(id)oids;
- (id)_prepareObjectsByOIDsFromOIDsToFetch:(id)fetch andUpdateUUIDsByOIDsForRestrictedObjectsUsingFetchedObjects:(id)objects;
- (id)_phObjectAtIndex:(unsigned long long)index;
- (id)_batchForBatchNumber:(unsigned long long)number shouldUpdateLastBatch:(BOOL)batch;
- (id)_fetchObjectsInBatchNumber:(unsigned long long)number;
- (void)cache:(id)cache willEvictObject:(id)object;
- (void)_rememberUUIDsForBatch:(id)batch;
- (void)test_evictBatchNumber:(long long)number;
- (void)test_invalidateUUIDCache;
- (unsigned long long)test_lastBatchIndex;
- (void)prefetchObjectsAtIndexes:(id)indexes;
@end

#endif /* PHBatchFetchingArray_h */
