//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1394.60.57.0.0
//
#ifndef LAClient_h
#define LAClient_h
@import Foundation;

#include "LAContext.h"
#include "LAContextCallbackXPC-Protocol.h"
#include "LAContextXPC-Protocol.h"
#include "LAUIDelegate-Protocol.h"

@class LACachedExternalizedContext, NSData, NSError, NSMutableArray, NSNumber, NSString, NSUUID, NSXPCConnection;

@interface LAClient : NSObject<LAContextXPC, LAContextCallbackXPC>

@property (readonly, nonatomic) NSXPCConnection *serverConnection;
@property (retain, nonatomic) NSObject<LAContextXPC> *remoteContext;
@property (readonly, nonatomic) NSObject<LAContextXPC> *synchronousRemoteContext;
@property (readonly, nonatomic) NSMutableArray *invalidations;
@property (retain) LACachedExternalizedContext *cachedExternalizedContext;
@property (retain) NSError *permanentError;
@property BOOL shouldRecoverConnection;
@property (readonly, nonatomic) NSNumber *userSession;
@property (retain, nonatomic) NSData *existingContext;
@property (retain, nonatomic) NSUUID *uuid;
@property (retain, nonatomic) NSString *proxyId;
@property (readonly, weak, nonatomic) LAContext *context;
@property (readonly, nonatomic) NSData *externalizedContext;
@property (weak, nonatomic) NSObject<LAUIDelegate> *uiDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)_queue;
+ (id)createConnection:(const unsigned int *)connection legacyService:(BOOL)service;
+ (void)_performInvalidationBlocks:(id)blocks;

/* instance methods */
- (id)initWithExternalizedContext:(id)context userSession:(unsigned int *)session context:(id)context;
- (id)initWithUUID:(id)uuid token:(id)token senderAuditTokenData:(id)data context:(id)context;
- (void)dealloc;
- (void)_connectToServerWithRecovery:(BOOL)recovery userSession:(const unsigned int *)session legacyService:(BOOL)service;
- (void)_synchronousRemoteObjectProxy:(const unsigned int *)proxy performCall:(id /* block */)call;
- (void)_handleConnectionResult:(id)result uuid:(id)uuid proxyId:(id)id error:(id)error;
- (void)_scheduleRecovery;
- (void)_recoverConnection;
- (void)allowTransferToProcess:(int)process receiverAuditTokenData:(id)data reply:(id /* block */)reply;
- (void)tokenForTransferToUnknownProcess:(id /* block */)process;
- (void)invalidatedWithError:(id)error;
- (void)invalidateWithMessage:(id)message;
- (void)_serializedInvalidateWithMessage:(id)message;
- (void)invalidateWithReply:(id /* block */)reply;
- (void)_checkIdResultForTCC:(id)tcc synchronous:(BOOL)synchronous error:(id)error retryBlock:(id /* block */)block finally:(id /* block */)finally;
- (void)_performCallId:(id /* block */)id finally:(id /* block */)finally;
- (void)_performCallBool:(id /* block */)bool finally:(id /* block */)finally;
- (void)_performSynchronous:(BOOL)synchronous callId:(id /* block */)id finally:(id /* block */)finally;
- (void)_performSynchronous:(BOOL)synchronous callBool:(id /* block */)bool finally:(id /* block */)finally;
- (BOOL)_setPermanentError:(id)error;
- (id)_updateOptions:(id)options;
- (void)evaluatePolicy:(long long)policy options:(id)options reply:(id /* block */)reply;
- (void)evaluatePolicy:(long long)policy options:(id)options uiDelegate:(id)delegate reply:(id /* block */)reply;
- (void)evaluatePolicy:(long long)policy options:(id)options uiDelegate:(id)delegate synchronous:(BOOL)synchronous reply:(id /* block */)reply;
- (void)evaluateACL:(id)acl operation:(id)operation options:(id)options reply:(id /* block */)reply;
- (void)evaluateACL:(id)acl operation:(id)operation options:(id)options uiDelegate:(id)delegate reply:(id /* block */)reply;
- (void)evaluateACL:(id)acl operation:(id)operation options:(id)options uiDelegate:(id)delegate synchronous:(BOOL)synchronous reply:(id /* block */)reply;
- (void)failProcessedEvent:(long long)event failureError:(id)error reply:(id /* block */)reply;
- (void)retryProcessedEvent:(long long)event reply:(id /* block */)reply;
- (void)resetProcessedEvent:(long long)event reply:(id /* block */)reply;
- (void)pauseProcessedEvent:(long long)event pause:(BOOL)pause reply:(id /* block */)reply;
- (void)setCredential:(id)credential forProcessedEvent:(long long)event credentialType:(long long)type reply:(id /* block */)reply;
- (void)isCredentialSet:(long long)set reply:(id /* block */)reply;
- (void)setCredential:(id)credential type:(long long)type reply:(id /* block */)reply;
- (void)credentialOfType:(long long)type reply:(id /* block */)reply;
- (void)verifyFileVaultUser:(id)user volumeUuid:(id)uuid options:(unsigned long long)options reply:(id /* block */)reply;
- (void)serverPropertyForOption:(long long)option reply:(id /* block */)reply;
- (void)setServerPropertyForOption:(long long)option value:(id)value reply:(id /* block */)reply;
- (id)serverPropertyForOption:(long long)option error:(id *)error;
- (BOOL)setServerPropertyForOption:(long long)option value:(id)value error:(id *)error;
- (void)externalizedContextWithReply:(id /* block */)reply;
- (id)synchronousExternalizedContextWithError:(id *)error;
- (void)authMethodWithReply:(id /* block */)reply;
- (void)prearmTouchIdWithReply:(id /* block */)reply;
- (void)resetWithReply:(id /* block */)reply;
- (void)notifyEvent:(long long)event options:(id)options reply:(id /* block */)reply;
- (void)setShowingCoachingHint:(BOOL)hint event:(long long)event reply:(id /* block */)reply;
- (void)bootstrapServiceType:(id)type completionHandler:(id /* block */)handler;
@end

#endif /* LAClient_h */
