//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 290.153.3.50.1
//
#ifndef Core_Audio_Driver_h
#define Core_Audio_Driver_h
@import Foundation;

#include "Core_Audio_Driver_Host_Proxy.h"
#include "Core_Audio_Driver_Protocol-Protocol.h"
#include "NSXPCListenerDelegate-Protocol.h"

@class NSString, NSXPCListener, NSXPCListenerEndpoint;
@protocol OS_dispatch_queue, struct shared_ptr<Property_Type_Info> { struct Property_Type_Info * x0; struct __shared_weak_count * x1; }, struct shared_ptr<caulk::mach::unfair_lock> { struct unfair_lock * x0; struct __shared_weak_count * x1; }, struct shared_ptr<std::map<unsigned long long, void *>> { void * x0; struct __shared_weak_count * x1; }, struct shared_ptr<std::unordered_map<AMCP::Portal::IPC::io_messenger_id_t, std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>> { void * x0; struct __shared_weak_count * x1; }, struct shared_ptr<std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t, applesauce::xpc::dict>>> { void * x0; struct __shared_weak_count * x1; }, {shared_ptr<Property_Type_Info>="__ptr_"^{Property_Type_Info}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<caulk::mach::unfair_lock>="__ptr_"^{unfair_lock}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<std::map<unsigned long long, void *>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}}, {shared_ptr<std::unordered_map<AMCP::Portal::IPC::io_messenger_id_t, std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}}, {shared_ptr<std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t, applesauce::xpc::dict>>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}};

@interface Core_Audio_Driver : NSObject<NSXPCListenerDelegate, Core_Audio_Driver_Protocol> {
  /* instance variables */
  struct shared_ptr<Property_Type_Info> { struct Property_Type_Info *__ptr_; struct __shared_weak_count *__cntrl_; } _m_custom_property_type_cache;
}

@property (retain, nonatomic) Core_Audio_Driver_Host_Proxy *driver_host_proxy;
@property (retain, nonatomic) NSXPCListener *listener;
@property (retain, nonatomic) NSXPCListenerEndpoint *endpoint;
@property (nonatomic) struct AudioServerPlugInDriverInterface * * asp_interface;
@property (nonatomic) struct AudioServerPlugInHostInterface { undefined * x0; undefined * x1; undefined * x2; undefined * x3; undefined * x4; } * host_interface;
@property (readonly, nonatomic) struct shared_ptr<caulk::mach::unfair_lock> { struct unfair_lock * x0; struct __shared_weak_count * x1; } config_change_info_lock;
@property (nonatomic) struct shared_ptr<std::map<unsigned long long, void *>> { void * x0; struct __shared_weak_count * x1; } config_change_info_map;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *concurrent_queue;
@property (nonatomic) struct shared_ptr<Property_Type_Info> { struct Property_Type_Info * x0; struct __shared_weak_count * x1; } m_property_type_info;
@property (copy, nonatomic) id /* block */ process_boost_reply;
@property (nonatomic) struct shared_ptr<std::unordered_map<AMCP::Portal::IPC::io_messenger_id_t, std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>> { void * x0; struct __shared_weak_count * x1; } io_receivers;
@property (nonatomic) struct shared_ptr<std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t, applesauce::xpc::dict>>> { void * x0; struct __shared_weak_count * x1; } io_buffer_list;
@property (nonatomic) struct shared_ptr<caulk::mach::unfair_lock> { struct unfair_lock * x0; struct __shared_weak_count * x1; } io_receiver_lock;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)init;
- (id)init_driver_interface:(struct AudioServerPlugInDriverInterface * *)init_driver_interface;
- (void)dealloc;
- (BOOL)listener:(id)listener shouldAcceptNewConnection:(id)connection;
- (void)store_change_info:(void *)store_change_info for_token:(unsigned long long)for_token;
- (void)initialize:(id)initialize reply:(id /* block */)reply;
- (void)perform_device_configuration_change:(unsigned int)perform_device_configuration_change action:(unsigned long long)action change:(unsigned long long)change reply:(id /* block */)reply;
- (void)abort_device_configuration_change:(unsigned int)abort_device_configuration_change action:(unsigned long long)action change:(unsigned long long)change reply:(id /* block */)reply;
- (int)create_and_start_io_receiver:(unsigned int)create_and_start_io_receiver client_id:(unsigned int)client_id nominal_sample_rate:(double)nominal_sample_rate io_buffer_frame_size:(unsigned int)io_buffer_frame_size work_group_port:(id)work_group_port io_messenger:(id)io_messenger;
- (int)destroy_io_receiver:(unsigned int)destroy_io_receiver client_id:(unsigned int)client_id;
- (int)destroy_io_receiver:(unsigned int)destroy_io_receiver;
- (void)add_device_client:(unsigned int)add_device_client client_info:(id)client_info reply:(id /* block */)reply;
- (void)remove_device_client:(unsigned int)remove_device_client client_info:(id)client_info reply:(id /* block */)reply;
- (void)create_device:(id)create_device client_info:(id)client_info reply:(id /* block */)reply;
- (void)destroy_device:(unsigned int)destroy_device reply:(id /* block */)reply;
- (void)object_was_destroyed:(unsigned int)object_was_destroyed reply:(id /* block */)reply;
- (int)handle_register_buffer:(struct dict { struct object { id x0; } x0; })handle_register_buffer;
- (int)handle_unregister_buffer:(struct dict { struct object { id x0; } x0; })handle_unregister_buffer;
- (void)register_io_buffer:(id)register_io_buffer reply:(id /* block */)reply;
- (void)unregister_io_buffer:(id)unregister_io_buffer reply:(id /* block */)reply;
- (void)start_io:(unsigned int)start_io client_id:(unsigned int)client_id reply:(id /* block */)reply;
- (void)stop_io:(unsigned int)stop_io client_id:(unsigned int)client_id reply:(id /* block */)reply;
- (void)start_synchronous_messenger:(unsigned int)start_synchronous_messenger client_id:(unsigned int)client_id nominal_sample_rate:(double)nominal_sample_rate io_buffer_frame_size:(unsigned int)io_buffer_frame_size work_group_port:(id)work_group_port io_messenger:(id)io_messenger reply:(id /* block */)reply;
- (void)stop_synchronous_messenger:(unsigned int)stop_synchronous_messenger client_id:(unsigned int)client_id reply:(id /* block */)reply;
- (void)retain_reply_for_process_boost:(id /* block */)retain_reply_for_process_boost;
- (struct tuple<NSData *, unsigned int, AMCP::HAL::HAL_Property_Type_Code> { struct __tuple_impl<std::__tuple_indices<0, 1, 2>, NSData *, unsigned int, AMCP::HAL::HAL_Property_Type_Code> { id x0; unsigned int x1; unsigned int x2; } x0; })unpack_data_from_qualifier:(struct Driver_Property_Identity { unsigned int x0; int x1; struct AudioObjectPropertyAddress { unsigned int x0; unsigned int x1; unsigned int x2; } x2; })unpack_data_from_qualifier qualifier:(id)qualifier;
- (struct tuple<NSData *, unsigned int, AMCP::HAL::HAL_Property_Type_Code> { struct __tuple_impl<std::__tuple_indices<0, 1, 2>, NSData *, unsigned int, AMCP::HAL::HAL_Property_Type_Code> { id x0; unsigned int x1; unsigned int x2; } x0; })unpack_data_from_value:(struct Driver_Property_Identity { unsigned int x0; int x1; struct AudioObjectPropertyAddress { unsigned int x0; unsigned int x1; unsigned int x2; } x2; })unpack_data_from_value value:(id)value;
- (void)has_property:(struct Driver_Property_Identity { unsigned int x0; int x1; struct AudioObjectPropertyAddress { unsigned int x0; unsigned int x1; unsigned int x2; } x2; })has_property reply:(id /* block */)reply;
- (void)release_unpacked_cf_objects:(unsigned int)release_unpacked_cf_objects qualifier_data:(id)qualifier_data data_type:(unsigned int)data_type data:(id)data;
- (void)is_property_settable:(struct Driver_Property_Identity { unsigned int x0; int x1; struct AudioObjectPropertyAddress { unsigned int x0; unsigned int x1; unsigned int x2; } x2; })is_property_settable reply:(id /* block */)reply;
- (void)get_property_data_size:(struct Driver_Property_Identity { unsigned int x0; int x1; struct AudioObjectPropertyAddress { unsigned int x0; unsigned int x1; unsigned int x2; } x2; })get_property_data_size qualifier:(id)qualifier reply:(id /* block */)reply;
- (void)get_property_data:(struct Driver_Property_Identity { unsigned int x0; int x1; struct AudioObjectPropertyAddress { unsigned int x0; unsigned int x1; unsigned int x2; } x2; })get_property_data qualifier:(id)qualifier data_size:(unsigned int)data_size reply:(id /* block */)reply;
- (void)set_property_data:(struct Driver_Property_Identity { unsigned int x0; int x1; struct AudioObjectPropertyAddress { unsigned int x0; unsigned int x1; unsigned int x2; } x2; })set_property_data qualifier:(id)qualifier data:(id)data reply:(id /* block */)reply;
@end

#endif /* Core_Audio_Driver_h */
