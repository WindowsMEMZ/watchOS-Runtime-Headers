//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2130.14.1.0.0
//
#ifndef CKFetchRecordChangesOperation_h
#define CKFetchRecordChangesOperation_h
@import Foundation;

#include "CKDatabaseOperation.h"
#include "CKFetchRecordChangesOperationCallbacks-Protocol.h"
#include "CKFetchRecordZoneChangesOperationInfo.h"
#include "CKRecordZoneID.h"
#include "CKServerChangeToken.h"

@class NSArray, NSData, NSMutableDictionary;

@interface CKFetchRecordChangesOperation : CKDatabaseOperation<CKFetchRecordChangesOperationCallbacks>

@property (retain, nonatomic) CKServerChangeToken *resultServerChangeToken;
@property (retain, nonatomic) NSData *resultClientChangeTokenData;
@property (nonatomic) long long status;
@property (nonatomic) BOOL shouldFetchAssetContents;
@property (nonatomic) BOOL fetchAllChanges;
@property (retain, nonatomic) NSMutableDictionary *recordErrors;
@property (copy, nonatomic) id /* block */ serverChangeTokenFetchedBlock;
@property (copy, nonatomic) id /* block */ changeTokensUpdatedBlock;
@property (readonly, @dynamic, nonatomic) NSObject<CKFetchRecordChangesOperationCallbacks> *clientOperationCallbackProxy;
@property (readonly, @dynamic, nonatomic) CKFetchRecordZoneChangesOperationInfo *operationInfo;
@property (copy, nonatomic) CKRecordZoneID *recordZoneID;
@property (copy, nonatomic) CKServerChangeToken *previousServerChangeToken;
@property (nonatomic) unsigned long long resultsLimit;
@property (copy, nonatomic) NSArray *desiredKeys;
@property (copy, nonatomic) id /* block */ recordChangedBlock;
@property (copy, nonatomic) id /* block */ recordWithIDWasDeletedBlock;
@property (readonly, nonatomic) BOOL moreComing;
@property (copy, nonatomic) id /* block */ fetchRecordChangesCompletionBlock;

/* class methods */
+ (Class)operationInfoClass;
+ (SEL)daemonInvocationSelector;
+ (void)applyDaemonCallbackInterfaceTweaks:(id)tweaks;
+ (SEL)daemonCallbackCompletionSelector;

/* instance methods */
- (id)init;
- (id)initWithRecordZoneID:(id)id previousServerChangeToken:(id)token;
- (id)relevantZoneIDs;
- (void)fillOutOperationInfo:(id)info;
- (void)fillFromOperationInfo:(id)info;
- (long long)changeTypesFromSetCallbacks;
- (BOOL)hasCKOperationCallbacksSet;
- (BOOL)CKOperationShouldRun:(id *)run;
- (void)performCKOperation;
- (void)handleChangeForRecordID:(id)id record:(id)record error:(id)error;
- (void)handleDeleteForRecordID:(id)id;
- (void)handleChangeSetCompletionWithServerChangeToken:(id)token clientChangeTokenData:(id)data recordChangesStatus:(long long)status reply:(id /* block */)reply;
- (void)handleOperationDidCompleteWithServerChangeToken:(id)token clientChangeTokenData:(id)data recordChangesStatus:(long long)status metrics:(id)metrics error:(id)error;
- (void)_finishOnCallbackQueueWithError:(id)error;
- (void)ckSignpostBegin;
- (void)ckSignpostEndWithError:(id)error;
- (id)activityCreate;
@end

#endif /* CKFetchRecordChangesOperation_h */
