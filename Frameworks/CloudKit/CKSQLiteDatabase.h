//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2130.14.1.0.0
//
#ifndef CKSQLiteDatabase_h
#define CKSQLiteDatabase_h
@import Foundation;

#include "CKSQLiteDatabase.h"
#include "CKSQLiteDatabaseKeyValueProperties-Protocol.h"
#include "CKSQLiteDatabaseManagerTimer.h"
#include "CKSQLiteTOCTableGroup.h"

@class NSData, NSMapTable, NSMutableArray, NSMutableSet, NSObject, NSString;
@protocol OS_dispatch_group;

@interface CKSQLiteDatabase : NSObject<CKSQLiteDatabaseKeyValueProperties> {
  /* instance variables */
  struct sqlite3 * _db;
  struct { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } lock; struct _opaque_pthread_cond_t { long long __sig; char x[40] __opaque; } waitCond; atomic  accessThread; unsigned long long x0; } _serializer;
  CKSQLiteTOCTableGroup *_tocTableGroup;
  unsigned int _savepointNestCount;
  NSMutableArray *_transactionCompletionHandlers;
  NSMutableSet *_validatedTableGroups;
  NSObject<OS_dispatch_group> *_databaseGroup;
  CKSQLiteDatabase *_registryDatabase;
}

@property (readonly, nonatomic) NSData *uniquingKey;
@property (readonly, nonatomic) NSMapTable *tableGroupCache;
@property (nonatomic) BOOL isEmpty;
@property (retain, nonatomic) CKSQLiteDatabaseManagerTimer *databaseManagerTimer;
@property (retain, nonatomic) NSObject *databaseManagerData;
@property (readonly, copy, nonatomic) NSString *databaseDirectory;
@property (readonly, nonatomic) BOOL databaseWasCreated;
@property (nonatomic) BOOL removeWhenClosed;
@property (readonly, nonatomic) unsigned long long options;

/* class methods */
+ (void)initialize;
+ (void)resetValidatedDatabases;
+ (id)databaseArchiveWithObject:(id)object;
+ (id)unarchivedObjectFromDatabaseArchive:(id)archive;
+ (void)removeLegacyDatabaseAtPath:(id)path;
+ (id)uniquingKeyForDatabaseDirectory:(id)directory;
+ (id)databaseInDirectory:(id)directory registryDatabase:(id)database options:(unsigned long long)options error:(id *)error;
+ (id)temporaryDatabaseDirectory;
+ (id)newInMemoryDatabase:(id *)database;
+ (BOOL)databaseDidDealloc:(id)dealloc timeout:(double)timeout;
+ (id)databaseFilePathInDirectory:(id)directory;

/* instance methods */
- (id)numberValueForKey:(id)key error:(id *)error;
- (id)setNumberValue:(id)value forKey:(id)key;
- (id)stringValueForKey:(id)key error:(id *)error;
- (id)setStringValue:(id)value forKey:(id)key;
- (id)dataValueForKey:(id)key error:(id *)error;
- (id)setDataValue:(id)value forKey:(id)key;
- (id)dateValueForKey:(id)key error:(id *)error;
- (id)setDateValue:(id)value forKey:(id)key;
- (id)UUIDValueForKey:(id)key error:(id *)error;
- (id)setUUIDValue:(id)uuidvalue forKey:(id)key;
- (id)objectValueForKey:(id)key error:(id *)error;
- (id)setObjectValue:(id)value forKey:(id)key;
- (id)managerForRegistryDatabase:(id)database options:(unsigned long long)options error:(id *)error;
- (id)databaseManager:(id *)manager;
- (id)initWithDatabaseDirectory:(id)directory registryDatabase:(id)database options:(unsigned long long)options;
- (void)dealloc;
- (id)deallocToken;
- (void)setupDatabaseConnection;
- (id)openExistingDatabase:(BOOL)database;
- (id)_validateVersionNumbers;
- (id)_pruneTables;
- (id)validateOpenDatabase;
- (id)bootstrap;
- (id)createNewDatabase;
- (void)closeDatabase;
- (id)removeDatabaseDirectory;
- (id)tocTableGroup;
- (id)description;
- (id)databaseFilePath;
- (id)sqlErrorWithMessage:(id)message;
- (id)allTableNames:(id *)names;
- (id)executeSQL:(id)sql;
- (long long)lastInsertRowID;
- (unsigned long long)changeCount;
- (void *)compiledStatementWithSQL:(id)sql error:(id *)error;
- (void)finalizeHandle:(void *)handle;
- (id)dropTable:(id)table;
- (void)traceSQL;
- (void)usingTableGroupCachePerformBlock:(id /* block */)block;
- (void)assertDbSerialized;
- (void)assertDbNotSerialized;
- (void *)serializer;
- (void)assertInTransaction;
- (id)performDatabaseTransaction:(id /* block */)transaction;
- (id)performInDatabaseTransaction:(id /* block */)transaction;
- (void)addTransactionCompletionHandler:(id /* block */)handler;
- (void)tableGroupPassedValidation:(id)validation;
- (BOOL)tableGroupWasPreviouslyValidated:(id)validated;
- (void)removeValidatedTableGroup:(id)group;
@end

#endif /* CKSQLiteDatabase_h */
