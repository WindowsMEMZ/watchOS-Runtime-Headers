//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2130.14.1.0.0
//
#ifndef CKSQLiteTable_h
#define CKSQLiteTable_h
@import Foundation;

#include "CKSQLiteDatabase.h"
#include "CKSQLiteDatabaseKeyValueProperties-Protocol.h"
#include "CKSQLiteTableGroup.h"

@class NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSNumber, NSObject, NSString;

@interface CKSQLiteTable : NSObject<CKSQLiteDatabaseKeyValueProperties> {
  /* instance variables */
  CKSQLiteDatabase *_db;
  struct { struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x0; struct _opaque_pthread_cond_t { long long x0; char x1[40] } x1; atomic  x2; unsigned long long x3; } * _serializer;
  struct { struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x0; struct _opaque_pthread_cond_t { long long x0; char x1[40] } x1; atomic  x2; unsigned long long x3; } * _dbSerializer;
  NSMutableDictionary *_compiledStatementsByLabel;
  NSMutableArray *_referencedGroups;
  NSDictionary *_referencedTablesByProperty;
  BOOL _entriesUseArchivingInit;
}

@property (weak, nonatomic) CKSQLiteTableGroup *tableGroup;
@property (retain, nonatomic) NSObject *databaseManagerData;
@property (retain, nonatomic) id tocTableEntry;
@property (readonly, copy, nonatomic) NSString *logicalTableName;
@property (readonly, copy, nonatomic) NSString *dbTableName;
@property (readonly, nonatomic) NSArray *primaryKeyProperties;
@property (readonly, nonatomic) BOOL isIntegerPrimaryKeyTable;
@property (readonly, nonatomic) NSString *primaryKeyProperty;
@property (readonly, nonatomic) NSNumber *primaryKeyPropertyInfo;
@property (readonly, nonatomic) BOOL databaseTableWasCreated;
@property (nonatomic) BOOL logOperations;

/* class methods */
+ (void)initialize;
+ (BOOL)shouldValidateEntryClass;
+ (unsigned long long)dbVersion;
+ (Class)entryClass;
+ (id)dbProperties;
+ (void)enumerateClassPropertyDictionariesWithBlock:(id /* block */)block;
+ (void)enumeratePropertyDataWithBlock:(id /* block */)block;
+ (unsigned int)propertyCount;
+ (id)allPropertyNames;
+ (id)propertyInfo:(id)info;
+ (id)flattenedDBProperties;
+ (Class)tableClassWithName:(id)name properties:(id)properties version:(unsigned long long)version entryClass:(Class)class;
+ (void)encodeEntry:(id)entry withCoder:(id)coder;
+ (void)decodeEntry:(id)entry withCoder:(id)coder;
+ (unsigned long long)hashForEntry:(id)entry;
+ (BOOL)entriesHaveEqualProperties:(id)properties other:(id)other includePrimaryKeys:(BOOL)keys;
+ (id)copyOfEntry:(id)entry;
+ (id)descriptionOfProperties:(id)properties from:(id)from;
+ (id)descriptionOfEntry:(id)entry;
+ (BOOL)useNSCoding;
+ (id)nonKeyProperties;
+ (id)valueForProperty:(id)property propertyInfo:(id)info inObject:(id)object allowFetchingUnsetPropertySentinel:(BOOL)sentinel;
+ (id)valueForProperty:(id)property propertyInfo:(id)info inObject:(id)object;
+ (void)setValue:(id)value forProperty:(id)property propertyInfo:(id)info inObject:(id)object;

/* instance methods */
- (void)_setupActivityEntry:(id)entry;
- (id)numberValueForKey:(id)key error:(id *)error;
- (id)setNumberValue:(id)value forKey:(id)key;
- (id)stringValueForKey:(id)key error:(id *)error;
- (id)setStringValue:(id)value forKey:(id)key;
- (id)dataValueForKey:(id)key error:(id *)error;
- (id)setDataValue:(id)value forKey:(id)key;
- (id)dateValueForKey:(id)key error:(id *)error;
- (id)setDateValue:(id)value forKey:(id)key;
- (id)UUIDValueForKey:(id)key error:(id *)error;
- (id)setUUIDValue:(id)uuidvalue forKey:(id)key;
- (id)objectValueForKey:(id)key error:(id *)error;
- (id)setObjectValue:(id)value forKey:(id)key;
- (id)init;
- (id)initWithLogicalTableName:(id)name;
- (id)description;
- (id)didCreateDatabaseTable;
- (id)wakeFromDatabase;
- (id)finishInitializing;
- (id)db;
- (void)assertSerialized;
- (void)assertNotSerialized;
- (void)serialize:(id /* block */)serialize;
- (id)performTransaction:(id /* block */)transaction;
- (id)performInTransaction:(id /* block */)transaction;
- (void)addTransactionCompletionHandler:(id /* block */)handler;
- (id)checkConstraintForProperty:(id)property;
- (id)createTableSQL;
- (id)extraGroupTables:(id)tables;
- (id)valueForProperty:(id)property propertyInfo:(id)info inObject:(id)object;
- (void)setValue:(id)value forProperty:(id)property propertyInfo:(id)info inObject:(id)object;
- (id)primaryKeyValuesInEntry:(id)entry;
- (id)predicateForMatchingPrimaryKeys;
- (id)requestCallbackWithDate:(id)date coalescingInterval:(double)interval minimumSeparation:(double)separation;
- (void)activityTriggered:(id)triggered;
- (void)activityTriggerWasRolledBack;
- (id)setupReferencedTableCache;
- (id)tableForReferenceProperty:(id)property block:(id /* block */)block;
- (id)tableForReferenceProperty:(id)property;
- (id)referenceProperties;
- (BOOL)migrateEntryDataFromTable:(id)table entry:(id)entry toEntry:(id)entry addedProperties:(id)properties;
- (BOOL)migrateDataFromTable:(id)table error:(id *)error;
- (id)compiledStatementWithLabel:(id)label creationBlock:(id /* block */)block;
- (void)cacheStatement:(id)statement;
- (id)_predicateForMatchingProperties:(id)properties;
- (id)_valueDictionaryForProperties:(id)properties inObject:(id)object nilPropertyError:(id *)error selForNilPropertyError:(SEL)error;
- (void)_addPredicateForMatching:(id)matching toStatement:(id)statement;
- (id)statementForFetchingProperties:(id)properties inEntriesMatchingColumns:(id)columns error:(id *)error;
- (id)_bindProperties:(id)properties valueObject:(id)object inStatement:(id)statement includePrimaryKeys:(BOOL)keys;
- (BOOL)hasEntry:(id)entry error:(id *)error;
- (id)entryWithPrimaryKey:(id)key fetchProperties:(id)properties error:(id *)error;
- (id)entryWithValues:(id)values label:(id)label error:(id *)error setupBlock:(id /* block */)block;
- (id)_fetchPropertiesUsingStatement:(id)statement inObject:(id)object matchingDBProperties:(id)dbproperties label:(id)label;
- (id)fetchProperties:(id)properties inObject:(id)object matchingDBProperties:(id)dbproperties label:(id)label;
- (id)fetchAllProperties:(id)properties;
- (id)updateProperties:(id)properties usingObject:(id)object label:(id)label;
- (id)updateUsingObject:(id)object;
- (id)_performInsertOrUpdateStatement:(id)statement usingObject:(id)object;
- (id)insertObject:(id)object;
- (id)insertObject:(id)object orUpdateProperties:(id)properties label:(id)label;
- (id)deleteObject:(id)object;
- (id)deletePrimaryKeyValue:(id)value;
- (id)newEntryObject;
- (long long)sizeOfProperty:(id)property inEntry:(id)entry label:(id)label error:(id *)error;
- (id)minimumValueOfProperty:(id)property error:(id *)error;
- (id)maximumValueOfProperty:(id)property error:(id *)error;
- (id)_statementForFetchingEntriesMatchingObject:(id)object label:(id)label error:(id *)error setupBlock:(id /* block */)block;
- (id)entriesMatchingObject:(id)object label:(id)label error:(id *)error setupBlock:(id /* block */)block;
- (id)_performEnumerationWithBlock:(id /* block */)block usingEnumerator:(id /* block */)enumerator;
- (id)entryEnumerator:(id *)enumerator;
- (id)enumerateEntriesWithBlock:(id /* block */)block;
- (id)newEntryObjectFromStatement:(id)statement error:(id *)error;
- (id)fetchProperties:(id)properties label:(id)label error:(id *)error;
- (id)fetchAllEntries:(id *)entries;
- (BOOL)hasEntries:(id *)entries;
- (unsigned long long)count:(id *)count;
- (id)addPredicateToStatement:(id)statement predicate:(id /* block */)predicate;
- (unsigned long long)setProperties:(id)properties valuesToStore:(id)store inEntriesMatching:(id)matching label:(id)label error:(id *)error predicate:(id /* block */)predicate;
- (unsigned long long)deleteEntriesMatching:(id)matching label:(id)label error:(id *)error predicate:(id /* block */)predicate;
- (unsigned long long)deleteAllEntries:(id *)entries;
- (id)entriesWithValues:(id)values label:(id)label error:(id *)error setupBlock:(id /* block */)block;
- (unsigned long long)countOfEntriesMatching:(id)matching label:(id)label error:(id *)error predicate:(id /* block */)predicate;
- (long long)sumOfProperty:(id)property inEntriesMatching:(id)matching label:(id)label error:(id *)error predicate:(id /* block */)predicate;
- (long long)sumOfProperty:(id)property error:(id *)error;
- (long long)sizeOfProperty:(id)property inEntriesMatching:(id)matching label:(id)label error:(id *)error predicate:(id /* block */)predicate;
- (long long)sizeOfProperty:(id)property error:(id *)error;
@end

#endif /* CKSQLiteTable_h */
