//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2130.14.1.0.0
//
#ifndef CKSyncEngine_h
#define CKSyncEngine_h
@import Foundation;

#include "CKAccountInfo.h"
#include "CKAssetDownloadStagingManager.h"
#include "CKCoalescer.h"
#include "CKDatabase.h"
#include "CKNotificationListener.h"
#include "CKServerChangeToken.h"
#include "CKSyncEngineAsyncDelegate-Protocol.h"
#include "CKSyncEngineDataSource-Protocol.h"
#include "CKSyncEngineDataSourceAdapter.h"
#include "CKSyncEngineDelegateInternal-Protocol.h"
#include "CKSyncEngineState.h"
#include "OS_xpc_object-Protocol.h"

@class NSArray, NSDate, NSOperationQueue, NSString;
@protocol OS_dispatch_queue;

@interface CKSyncEngine : NSObject {
  /* instance variables */
  BOOL _ignoringSystemConditions;
  BOOL _useUniqueActivityIdentifiers;
  unsigned long long _lastNotifiedStateChangeCount;
  NSObject<OS_dispatch_queue> *_queue;
  unsigned long long _maxRecordBytesPerBatch;
  id /* block */ _updateStateBlock;
}

@property (copy, nonatomic) CKServerChangeToken *serverChangeTokenForDatabase;
@property (readonly, nonatomic) BOOL hasPendingModifications;
@property (readonly, weak, nonatomic) NSObject<CKSyncEngineDataSource> *dataSource;
@property (readonly, nonatomic) NSArray *recordIDsToSave;
@property (readonly, nonatomic) NSArray *recordIDsToDelete;
@property (retain) NSObject<CKSyncEngineAsyncDelegate> *asyncDelegate;
@property (weak, nonatomic) NSObject<CKSyncEngineDelegateInternal> *internalDelegate;
@property (retain) CKSyncEngineDataSourceAdapter *dataSourceAdapter;
@property (retain) CKSyncEngineState *state;
@property (retain) CKNotificationListener *notificationListener;
@property (readonly, nonatomic) NSOperationQueue *operationQueue;
@property (retain, nonatomic) NSString *apsMachServiceName;
@property (retain, nonatomic) CKCoalescer *accountChangeCoalescer;
@property (retain, nonatomic) CKCoalescer *schedulerSubmitCoalescer;
@property (retain, nonatomic) CKCoalescer *pushSyncCoalescer;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue;
@property (readonly, nonatomic) unsigned long long maxRecordCountPerBatch;
@property unsigned long long maxZoneCountPerBatch;
@property (readonly, nonatomic) NSObject<OS_xpc_object> *xpcActivityCriteriaOverrides;
@property (nonatomic) BOOL waitingForIdentityUpdate;
@property (nonatomic) BOOL waitingForHSA2;
@property (retain, nonatomic) CKAccountInfo *lastKnownAccountInfo;
@property (readonly, nonatomic) long long priority;
@property (readonly, nonatomic) NSString *databaseSubscriptionIDOverride;
@property (readonly, nonatomic) BOOL continueModifyingPendingChangesAfterFailure;
@property (readonly, nonatomic) BOOL allowFetchAndModifyConcurrently;
@property (retain, nonatomic) NSDate *earliestStartDateForSchedulerActivities;
@property (retain, nonatomic) NSDate *lastForegroundTriggeredFetchDate;
@property (retain) CKAssetDownloadStagingManager *assetDownloadStagingManager;
@property (copy) NSString *loggingID;
@property (copy) NSDate *stateTelemetrySubmissionDate;
@property (weak) id boxedSyncEngine;
@property BOOL automaticSyncingEnabled;
@property BOOL useOpportunisticPushTopic;
@property BOOL needsToReloadAccount;
@property (readonly) CKDatabase *database;

/* class methods */
+ (id)syncActivityIdentifierInDatabase:(id)database ignoringSystemConditions:(BOOL)conditions;
+ (void)addKnownEngine:(id)engine;
+ (void)populateLoggingIDsForSyncEngines:(id)engines;
+ (BOOL)fastErrorRetry;
+ (void)setFastErrorRetry:(BOOL)retry;
+ (id)_oldAdopterVisibleFetchChangesErrorForZoneID:(id)id error:(id)error;
+ (BOOL)_isFetchChangesErrorAdopterVisible:(id)visible;
+ (id)earliestStartDateAfterError:(id)error;
+ (void)unregisterActivitiesWithDatabase:(id)database ignoringSystemConditions:(BOOL)conditions;
+ (BOOL)shouldDeferAfterError:(id)error;
+ (id)defaultOperationGroup;
+ (id)defaultManualOperationGroupNameWithType:(id)type scope:(id)scope;

/* instance methods */
- (id)initWithDeprecatedConfiguration:(id)configuration;
- (void)setHasPendingModifications;
- (void)setNeedsToSaveRecords:(id)records needsToSave:(BOOL)save;
- (void)cancelPendingOperationsWithCompletionHandler:(id /* block */)handler;
- (void)setNeedsToDeleteRecords:(id)records needsToDelete:(BOOL)delete;
- (void)setNeedsToSaveRecordZones:(id)zones needsToSave:(BOOL)save;
- (void)setNeedsToDeleteRecordZones:(id)zones needsToDelete:(BOOL)delete;
- (void)addRecordIDsToSave:(id)save recordIDsToDelete:(id)delete;
- (void)removeRecordIDsToSave:(id)save recordIDsToDelete:(id)delete;
- (void)addRecordZonesToSave:(id)save recordZoneIDsToDelete:(id)delete;
- (void)removeRecordZonesToSave:(id)save recordZoneIDsToDelete:(id)delete;
- (void)modifyPendingChangesWithCompletionHandler:(id /* block */)handler;
- (void)modifyPendingChangesInZoneIDs:(id)ids completionHandler:(id /* block */)handler;
- (void)fetchChangesForZoneIDs:(id)ids completionHandler:(id /* block */)handler;
- (id)serverChangeTokenForRecordZoneID:(id)id;
- (void)setServerChangeToken:(id)token forRecordZoneID:(id)id;
- (void)scheduleSync;
- (id)init;
- (id)initWithConfiguration:(id)configuration;
- (void)dealloc;
- (id)description;
- (id)redactedDescription;
- (void)registerForApplicationLifecycleEvents;
- (void)applicationWillEnterForeground;
- (void)shareAcceptedNotification:(id)notification;
- (void)scheduleSyncIfNecessaryAfterError:(id)error completionHandler:(id /* block */)handler;
- (void)coalescedScheduleSync;
- (void)nonCoalescedScheduleSync;
- (void)scheduleSyncWithEarliestStartDate:(id)date completionHandler:(id /* block */)handler;
- (id)syncActivityIdentifier;
- (id)userRequestedBackupActivityIdentifier;
- (BOOL)allowFetchAndModifyConcurrentlyForContainerID:(id)id;
- (void)networkAttributionBundleIDForZoneIDs:(id)ids recordIDs:(id)ids completionHandler:(id /* block */)handler;
- (BOOL)isAutomaticSyncingEnabled;
- (void)performAsyncDelegateCallbackWithDescription:(id)description block:(id /* block */)block;
- (void)postEvent:(id)event;
- (void)postWillEnqueueOperation:(id)operation;
- (BOOL)shouldSendTelemetry;
- (void)sendStateTelemetryIfNecessaryWithByteCount:(unsigned long long)count;
- (id)stateTelemetryPayloadWithByteCount:(long long)count;
- (void)sendConfigurationTelemetry;
- (id)configurationTelemetryPayload;
- (id)redactedContainerIdentifierIfNecessaryFromContainerID:(id)id;
- (void)cancelOperationsWithCompletionHandler:(id /* block */)handler;
- (void)sendChangesWithCompletionHandler:(id /* block */)handler;
- (void)sendChangesWithOptions:(id)options completionHandler:(id /* block */)handler;
- (void)_sendChangesWithContext:(id)context osActivity:(id)activity completionHandler:(id /* block */)handler;
- (id)existingOperationToModifyPendingChangesWithOptions:(id)options includingExecutingOperations:(BOOL)operations;
- (void)nextBatchOfRecordsToModifyForContext:(id)context completionHandler:(id /* block */)handler;
- (void)fetchChangesWithCompletionHandler:(id /* block */)handler;
- (void)fetchChangesWithOptions:(id)options completionHandler:(id /* block */)handler;
- (void)_fetchChangesWithContext:(id)context osActivity:(id)activity completionHandler:(id /* block */)handler;
- (BOOL)shouldFetchChangesWithOptions:(id)options;
- (BOOL)_queue_shouldFetchChangesWithOptions:(id)options;
- (id)existingOperationToFetchChangesWithOptions:(id)options includingExecutingOperations:(BOOL)operations;
- (void)setNeedsToFetchChanges;
- (id)defaultDatabaseSubscriptionID;
- (id)defaultDatabaseSubscription;
- (id)databaseSubscription;
- (id)databaseSubscriptionWithID:(id)id;
- (void)didReceiveDatabaseNotification:(id)notification;
- (void)saveSubscriptionIfNecessaryWithCompletionHandler:(id /* block */)handler;
- (void)unregisterActivities;
- (void)performSyncWithOperationGroup:(id)group completionHandler:(id /* block */)handler;
- (BOOL)isReadyToSubmitSchedulerActivity;
- (void)submitActivityIfNecessaryWithIdentifier:(id)identifier earliestStartDate:(id)date priority:(long long)priority userRequestedBackupTask:(BOOL)task relatedApplicationBundleIdentifiers:(id)identifiers completionHandler:(id /* block */)handler;
- (BOOL)shouldScheduleSyncActivity;
- (BOOL)_queue_shouldScheduleSyncActivity;
- (BOOL)_queue_lastSyncWasLongAgo;
- (BOOL)hasSchedulerActivityWithIdentifier:(id)identifier;
- (void)relatedApplicationBundleIdentifiersForPendingWorkWithCompletionHandler:(id /* block */)handler;
- (void)relatedApplicationBundleIdentifiersForZoneIDs:(id)ids recordIDs:(id)ids completionHandler:(id /* block */)handler;
- (void)fixConfigurationInOperationGroup:(id)group;
- (void)coalescePushSyncIfNecessary;
- (void)performCoalescedPushSync;
- (void)identityUpdateNotification:(id)notification;
- (void)accountChangedNotification:(id)notification;
- (void)handleAccountChangeNotification;
- (void)updateAccountInfoWithCompletionHandler:(id /* block */)handler;
- (void)updateStateAndNotifyDatasourceIfNecessaryForUserRecordID:(id)id;
- (BOOL)isAccountReadyToSync:(id)sync unreadyDescription:(id *)description;
- (BOOL)isWaitingForIdentityUpdate;
- (BOOL)isWaitingForHSA2;
@end

#endif /* CKSyncEngine_h */
