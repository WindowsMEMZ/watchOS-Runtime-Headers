//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2130.14.1.0.0
//
#ifndef CKSQLite_h
#define CKSQLite_h
@import Foundation;

#include "CKSQLiteDB-Protocol.h"
#include "CKSQLiteDBConveniences-Protocol.h"
#include "CKSQLiteDelegate-Protocol.h"

@class NSError, NSString;

@interface CKSQLite : NSObject<CKSQLiteDB, CKSQLiteDBConveniences> {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _operationLock;
  atomic unsigned long long _operationThread;
  id /* block */ _errorHandlerBlock;
  BOOL _cancelled;
  NSError *_error;
  long long _errorResponse;
  NSError *_invalidationError;
  BOOL _needsMarkCorrupt;
  BOOL _needsRemove;
}

@property (nonatomic) struct sqlite3 * db;
@property (nonatomic) unsigned long long openCount;
@property BOOL invalid;
@property (readonly, nonatomic) NSString *path;
@property (readonly, nonatomic) NSString *schema;
@property (readonly, nonatomic) NSString *schemaVersion;
@property (retain, nonatomic) NSString *objectClassPrefix;
@property (nonatomic) int userVersion;
@property (nonatomic) long long synchronousMode;
@property (readonly, nonatomic) BOOL isOpen;
@property (readonly, nonatomic) BOOL isCorrupt;
@property (readonly, nonatomic) BOOL hasMigrated;
@property (nonatomic) BOOL shouldVacuum;
@property (nonatomic) BOOL traced;
@property (copy, nonatomic) id /* block */ invalidationHandler;
@property (retain, nonatomic) NSObject<CKSQLiteDelegate> *delegate;

/* class methods */
+ (id)equalityClauseAndBindingsForDict:(id)dict;

/* instance methods */
- (id)initWithPath:(id)path schema:(id)schema;
- (void)dealloc;
- (void)assertInOperation:(SEL)operation;
- (id)sqlErrorWithMessage:(id)message;
- (void)vacuum;
- (void)markCorrupt;
- (id)_performDatabaseOperation_locked:(id /* block */)operation_locked withErrorHandler:(id /* block */)handler;
- (void)_recursiveOperationLock:(id /* block */)lock;
- (id)performDatabaseOperation:(id /* block */)operation withErrorHandler:(id /* block */)handler;
- (id)performDatabaseOperation:(id /* block */)operation;
- (id)handleError:(id)error;
- (id)handleDatabaseError:(id)error args:(char *)args;
- (id)handleDatabaseError:(id)error;
- (id)_prepareDatabase;
- (BOOL)openWithError:(id *)error;
- (void)_forceClosed_locked;
- (void)_forceClosed_unlocked;
- (void)close;
- (BOOL)remove;
- (long long)lastInsertRowID;
- (int)changes;
- (void)executeSQL:(id)sql;
- (void)executeSQL:(id)sql arguments:(char *)arguments;
- (void)usingStatementForSQL:(id)sql performBlock:(id /* block */)block;
- (id)allTableNames;
- (void)_dropAllTables;
- (id)propertyForKey:(id)key;
- (void)setProperty:(id)property forKey:(id)key;
- (id)datePropertyForKey:(id)key;
- (void)setDateProperty:(id)property forKey:(id)key;
- (void)removePropertyForKey:(id)key;
- (id)creationDate;
- (id)columnNamesForTable:(id)table;
- (void)select:(id)select from:(id)from where:(id)where bindings:(id)bindings orderBy:(id)by limit:(id)limit offset:(id)offset block:(id /* block */)block;
- (void)select:(id)select from:(id)from where:(id)where bindings:(id)bindings orderBy:(id)by limit:(id)limit block:(id /* block */)block;
- (void)selectFrom:(id)from where:(id)where bindings:(id)bindings orderBy:(id)by limit:(id)limit block:(id /* block */)block;
- (id)select:(id)select from:(id)from where:(id)where bindings:(id)bindings orderBy:(id)by limit:(id)limit;
- (id)select:(id)select from:(id)from;
- (id)select:(id)select from:(id)from where:(id)where bindings:(id)bindings;
- (id)select:(id)select from:(id)from where:(id)where bindings:(id)bindings orderBy:(id)by;
- (id)selectFrom:(id)from where:(id)where bindings:(id)bindings limit:(id)limit;
- (id)selectAllFrom:(id)from where:(id)where bindings:(id)bindings;
- (void)update:(id)update set:(id)set where:(id)where bindings:(id)bindings limit:(id)limit;
- (long long)selectCountFrom:(id)from where:(id)where bindings:(id)bindings;
- (long long)insertOrReplaceInto:(id)into values:(id)values;
- (long long)upsertInto:(id)into values:(id)values onConflict:(id)conflict doUpdate:(id)update where:(id)where;
- (void)deleteFrom:(id)from where:(id)where bindings:(id)bindings;
- (void)deleteFrom:(id)from matchingValues:(id)values;
- (id)_tableNameForClass:(Class)class;
- (long long)insertOrReplaceObject:(id)object;
- (BOOL)deleteExactObject:(id)object;
- (int)deleteAllObjectsOfClass:(Class)class where:(id)where bindings:(id)bindings;
- (id)selectAllObjectsOfClass:(Class)class where:(id)where bindings:(id)bindings limit:(id)limit;
- (id)selectAllObjectsOfClass:(Class)class;
- (id)selectAllObjectsOfClass:(Class)class where:(id)where bindings:(id)bindings;
- (void)selectAllObjectsOfClass:(Class)class where:(id)where bindings:(id)bindings orderBy:(id)by limit:(id)limit block:(id /* block */)block;
- (id)selectObjectOfClass:(Class)class where:(id)where bindings:(id)bindings;
- (void)updateAllObjectsOfClass:(Class)class set:(id)set where:(id)where bindings:(id)bindings;
- (id)_boxedPropertyDictionary:(id)dictionary forObjCClass:(id)cclass;
- (id)_boxedValue:(id)value forObjcCProperty:(id)cproperty;
- (int)dbUserVersion;
- (void)willCreateDatabase;
@end

#endif /* CKSQLite_h */
