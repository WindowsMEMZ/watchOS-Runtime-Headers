//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2130.14.1.0.0
//
#ifndef CKUploadRequestManagerInternals_h
#define CKUploadRequestManagerInternals_h
@import Foundation;

#include "CKAssetRepairScheduler.h"
#include "CKAssetRepairSchedulerDelegate-Protocol.h"
#include "CKContainer.h"
#include "CKSchedulerActivity.h"
#include "CKSyncEngine.h"
#include "CKSyncEngineDataSource-Protocol.h"
#include "CKUploadRequestConfiguration.h"
#include "CKUploadRequestManagerResponseActionThrottler.h"
#include "CKUploadRequestManagerStateMachine.h"
#include "CKUploadRequestPersistentStore.h"
#include "NSObject-Protocol.h"

@class NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface CKUploadRequestManagerInternals : NSObject<CKAssetRepairSchedulerDelegate, CKSyncEngineDataSource>

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) double recurringFetchPeriod;
@property (nonatomic) double tryAgainLaterRetryTime;
@property (nonatomic) double retryableErrorRetryTime;
@property (nonatomic) double cancelledErrorRetryTime;
@property (nonatomic) double retryableErrorMaxRetryCount;
@property (nonatomic) double notificationDebouncePeriod;
@property (nonatomic) long long assetRepairSchedulerRepairBatchCountLimit;
@property (nonatomic) double assetRepairSchedulerDefaultSuspensionTime;
@property (nonatomic) long long assetRepairSchedulerRepairRetryCount;
@property (readonly, nonatomic) CKContainer *container;
@property (readonly, nonatomic) CKContainer *repairContainer;
@property (readonly, nonatomic) CKUploadRequestConfiguration *repairContainerOverrides;
@property (retain, nonatomic) CKUploadRequestManagerStateMachine *stateMachine;
@property (retain, nonatomic) CKSyncEngine *repairZoneSyncEngine;
@property (retain, nonatomic) NSString *assignedMachServiceName;
@property (nonatomic) BOOL hasRegisteredActivity;
@property (retain, nonatomic) CKAssetRepairScheduler *repairProcessor;
@property (retain, nonatomic) CKUploadRequestPersistentStore *database;
@property (retain, nonatomic) NSString *deviceID;
@property (retain, nonatomic) NSString *cachesDirectory;
@property (nonatomic) struct __SCNetworkReachability * reachability;
@property (retain, nonatomic) NSObject<NSObject> *accountChangeObserver;
@property (copy, nonatomic) id /* block */ scheduledAccountStatusCheck;
@property (nonatomic) int fetchAllToken;
@property (copy, nonatomic) id /* block */ repairActivityHandler;
@property (retain, nonatomic) CKSchedulerActivity *observedRepairActivity;
@property (readonly, nonatomic) CKUploadRequestManagerResponseActionThrottler *responseActionThrottler;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *stateMachineQueue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *stateQueue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue;
@property (retain, nonatomic) NSMutableDictionary *callbackForOverridePoint;
@property (readonly, nonatomic) BOOL ignoringSystemConditions;
@property (copy) id /* block */ assetRequestCallback;
@property (copy) id /* block */ packageRequestCallback;
@property (copy) NSString *machServiceName;
@property (readonly, nonatomic) NSString *activityIdentifierForSchedulingRepairs;

/* instance methods */
- (id)createStateMachine;
- (void)respondToStateMachineAction:(long long)action isRetry:(BOOL)retry;
- (void)respondToStateMachineChangeState:(long long)state enter:(BOOL)enter;
- (void)dispatchEvent:(long long)event;
- (BOOL)canPerformFunction:(long long)function;
- (void)registerForRepairScheduler;
- (void)finishSchedulerCallbackWithDeferral:(BOOL)deferral;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)cancelScheduledEvent;
- (void)openSyncEngine;
- (void)closeSyncEngine;
- (void)fetchRepairContainerMetadata;
- (void)registerForNetworkReachability;
- (void)unregisterFromNetworkReachability;
- (void)checkNetworkReachability;
- (void)registerForAccountNotifications;
- (void)unregisterFromAccountNotifications;
- (void)checkAccountStatus;
- (void)checkAccountID;
- (void)registerForFetchAllNotifications;
- (void)unregisterFromFetchAllNotifications;
- (void)scheduleRecurringFetch;
- (void)scheduleNextSync;
- (void)scheduleRepairsWithDelay:(double)delay;
- (void)scheduleOrInvokeRepairsNow;
- (void)scheduleRecordRepair:(id)repair withDelay:(double)delay increasingCount:(BOOL)count;
- (id)repairableAssetsForDate:(id)date;
- (id)nextRepairDateForDate:(id)date;
- (void)performRepairs;
- (void)syncEngine:(id)engine didFetchRecord:(id)record;
- (void)syncEngine:(id)engine recordWithIDWasDeleted:(id)deleted recordType:(id)type;
- (void)syncEngine:(id)engine didUpdateMetadata:(id)metadata;
- (void)syncEngine:(id)engine zoneWithIDChanged:(id)idchanged;
- (void)syncEngine:(id)engine zoneWithIDWasDeleted:(id)deleted;
- (void)syncEngine:(id)engine zoneWithIDWasPurged:(id)purged;
- (id)syncEngine:(id)engine recordToSaveForRecordID:(id)id;
- (void)syncEngine:(id)engine didSaveRecord:(id)record;
- (void)syncEngine:(id)engine failedToSaveRecord:(id)record error:(id)error;
- (void)syncEngine:(id)engine didDeleteRecordWithID:(id)id;
- (void)syncEngine:(id)engine failedToDeleteRecordWithID:(id)id error:(id)error;
- (BOOL)isRepairRecordActionable:(id)actionable;
- (void)assetRepairScheduler:(id)scheduler completedRequestWithMetadata:(id)metadata result:(long long)result;
- (void)assetRepairScheduler:(id)scheduler completedRepairWithMetadata:(id)metadata error:(id)error;
- (void)assetRepairScheduler:(id)scheduler preparingRepairWithIncludedMetadataCount:(unsigned long long)count;
- (void)assetRepairSchedulerAllRequestsComplete:(id)complete;
- (id)initWithContainer:(id)container repairContainerOverrides:(id)overrides;
- (id)initWithContainer:(id)container repairContainerOverrides:(id)overrides ignoringSystemConditions:(BOOL)conditions;
- (void)commonInitWithContainer:(id)container repairContainerOverrides:(id)overrides;
- (void)dealloc;
- (id)repairZoneID;
- (id)createDatabase;
- (void)fetchServerChanges:(id /* block */)changes;
- (void)manuallyTriggerUploadRequests;
- (void)dispatchEvent:(long long)event synchronously:(BOOL)synchronously;
- (void)dispatchAsyncOnStateQueue:(id /* block */)queue;
- (void)setCallback:(id /* block */)callback forOverridePoint:(long long)point;
- (void)invokeCallbackForOverridePoint:(long long)point withError:(id)error onCallbackQueue:(BOOL)queue;
@end

#endif /* CKUploadRequestManagerInternals_h */
