//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2417.42.9.28.9
//
#ifndef MKLocationManager_h
#define MKLocationManager_h
@import Foundation;

#include "GEOResourceManifestTileGroupObserver-Protocol.h"
#include "MKLocationProvider-Protocol.h"
#include "MKLocationProviderDelegate-Protocol.h"

@class CLHeading, CLLocation, GEOLocation, GEOLocationShifter, NSBundle, NSError, NSHashTable, NSLock, NSMutableArray, NSString, NSTimer, geo_isolater;
@protocol MNLocationRecorder, OS_dispatch_group;

@interface MKLocationManager : NSObject<GEOResourceManifestTileGroupObserver, MKLocationProviderDelegate> {
  /* instance variables */
  NSHashTable *_locationObservers;
  NSHashTable *_locationListeners;
  NSHashTable *_headingObservers;
  double _lastLocationUpdateTime;
  BOOL _trackingLocation;
  BOOL _trackingHeading;
  double _applicationResumeTime;
  double _applicationSuspendTime;
  double _headingUpdateTime;
  double _locationAccuracyUpdateTime;
  double _locationUpdateStartTime;
  BOOL _isReceivingAccurateLocations;
  NSMutableArray *_waitForAccurateLocationsHandlers;
  NSTimer *_waitForAccurateLocationsTimer;
  double _lastLocationReportTime;
  GEOLocationShifter *_locationShifter;
  NSTimer *_headingThrottlingTimer;
  double _lastVehicleHeading;
  double _lastVehicleSpeed;
  double _lastVehicleHeadingUpdateTime;
  double _lastVehicleSpeedUpdateTime;
  int _consecutiveOutOfCourseCount;
  double _navCourse;
  BOOL _continuedAfterBecomingInactive;
  BOOL _suspended;
  NSMutableArray *_recentLocationUpdateIntervals;
  NSLock *_lastLocationLock;
  NSLock *_observersLock;
  int _accuracyAuthorizationState;
  BOOL _temporaryPreciseLocationAuthorizationPromptShown;
  geo_isolater *_accuracyAuthorizationIsolater;
  struct GEOOnce_s { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; BOOL didRun; } _initializedAuthorizationStatus;
  NSObject<OS_dispatch_group> *_authStatusInitializationGroup;
  BOOL _hasCustomDesiredAccuracy;
}

@property (retain, nonatomic) NSObject<MKLocationProvider> *locationProvider;
@property (copy, nonatomic) id /* block */ locationCorrector;
@property (nonatomic) BOOL logStartStopLocationUpdates;
@property (nonatomic) BOOL enabled;
@property (readonly, nonatomic) BOOL locationServicesAuthorizationNeeded;
@property (readonly, nonatomic) BOOL isLocationServicesAvailable;
@property (readonly, nonatomic) BOOL isLocationServicesPossiblyAvailable;
@property (readonly, nonatomic) BOOL isLocationServicesEnabled;
@property (readonly, nonatomic) BOOL isLocationServicesApproved;
@property (readonly, nonatomic) BOOL isLocationServicesDenied;
@property (readonly, nonatomic) BOOL isLocationServicesRestricted;
@property (readonly, nonatomic) BOOL isHeadingServicesAvailable;
@property (readonly, nonatomic) BOOL isAuthorizedForPreciseLocation;
@property (readonly, nonatomic) BOOL isTemporaryPreciseLocationAuthorizationPromptShown;
@property (nonatomic) BOOL locationServicesPreferencesDialogEnabled;
@property (readonly, nonatomic) double headingUpdateTimeInterval;
@property (readonly, nonatomic) GEOLocation *currentLocation;
@property (readonly, nonatomic) GEOLocation *gridSnappedCurrentLocation;
@property (readonly, nonatomic) GEOLocation *courseCorrectedLocation;
@property (nonatomic) long long headingOrientation;
@property (copy, nonatomic) id /* block */ authorizationRequestBlock;
@property (readonly, nonatomic) BOOL hasLocation;
@property (readonly, nonatomic) CLLocation *lastLocation;
@property (readonly, nonatomic) CLLocation *lastGoodLocation;
@property (readonly, nonatomic) BOOL isLastLocationStale;
@property (readonly, nonatomic) NSError *locationError;
@property (nonatomic) double desiredAccuracy;
@property (nonatomic) double distanceFilter;
@property (nonatomic) BOOL matchInfoEnabled;
@property (nonatomic) BOOL fusionInfoEnabled;
@property (readonly, nonatomic) CLLocation *lastProviderLocation;
@property (nonatomic) long long activityType;
@property (readonly, nonatomic) double expectedGpsUpdateInterval;
@property (readonly, nonatomic) double timeScale;
@property (retain, nonatomic) NSBundle *effectiveBundle;
@property (copy, nonatomic) NSString *effectiveBundleIdentifier;
@property (nonatomic) BOOL useCourseForHeading;
@property (readonly, nonatomic) CLHeading *heading;
@property (retain, nonatomic) CLHeading *throttledHeading;
@property (readonly, nonatomic) double currentVehicleHeading;
@property (readonly, nonatomic) double currentVehicleSpeed;
@property (readonly, nonatomic) double vehicleHeadingOrCourse;
@property (copy, nonatomic) id /* block */ networkActivity;
@property (retain, nonatomic) NSObject<MNLocationRecorder> *locationRecorder;
@property (readonly, nonatomic) double navigationCourse;
@property (nonatomic) double minimumLocationUpdateInterval;
@property (nonatomic) BOOL continuesWhileInactive;
@property (readonly, nonatomic) BOOL lastLocationPushed;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)setCanMonitorWiFiStatus:(BOOL)status;
+ (id)sharedLocationManager;
+ (id)timeoutError;

/* instance methods */
- (void)_useDefaultCoreLocationProvider;
- (id)init;
- (id)initWithCLLocationManager:(id)manager;
- (void)dealloc;
- (void)resourceManifestManager:(id)manager didChangeActiveTileGroup:(id)group fromOldTileGroup:(id)group;
- (BOOL)isLocationServicesAuthorizationNeeded;
- (BOOL)isLocationServicesPreferencesDialogEnabled;
- (void)requestWhenInUseAuthorization;
- (void)requestWhenInUseAuthorizationWithPrompt;
- (void)requestTemporaryPreciseLocationAuthorizationWithPurposeKey:(id)key completion:(id /* block */)completion;
- (BOOL)_isTimeToResetOnResume;
- (void)resetAfterResumeIfNecessary;
- (void)applicationDidBecomeActive:(id)active;
- (void)applicationWillResignActive:(id)active;
- (void)_suspend;
- (void)_reportLocationStatus:(SEL)status;
- (void)_reportLocationFailureWithError:(id)error;
- (void)_reportLocationSuccess;
- (void)_reportLocationReset;
- (void)_reportHeadingSuccess;
- (void)_reportHeadingFailureWithError:(id)error;
- (void)reset;
- (void)_syncLocationProviderWithTracking;
- (void)_setTrackingLocation:(BOOL)location;
- (BOOL)isLocationServicesPossiblyAvailable:(id *)available;
- (void)dampenGPSLocationAccuracy:(id *)accuracy;
- (void)dismissHeadingCalibrationDisplay;
- (BOOL)_shouldAllowLocationUpdateInterval:(double)interval;
- (void)pushLocation:(id)location;
- (void)locationProvider:(id)provider didUpdateLocation:(id)location;
- (void)locationProvider:(id)provider didUpdateLocation:(id)location lastKnownNavCourse:(double)course;
- (void)_locationProvider:(id)provider didUpdateLocation:(id)location lastKnownNavCourse:(double)course;
- (void)_setIsReceivingAccurateLocations:(BOOL)locations;
- (void)locationProvider:(id)provider didReceiveError:(id)error;
- (void)locationProvider:(id)provider didUpdateHeading:(id)heading;
- (void)locationProviderDidChangeAuthorizationStatus:(id)status;
- (BOOL)locationProviderShouldPauseLocationUpdates:(id)updates;
- (void)locationProviderDidPauseLocationUpdates:(id)updates;
- (void)locationProviderDidResumeLocationUpdates:(id)updates;
- (void)locationProvider:(id)provider didUpdateVehicleSpeed:(double)speed timestamp:(id)timestamp;
- (void)locationProvider:(id)provider didUpdateVehicleHeading:(double)heading timestamp:(id)timestamp;
- (void)listenForLocationUpdates:(id)updates;
- (void)stopListeningForLocationUpdates:(id)updates;
- (void)_initializeAuthStatusIfNecessary;
- (void)_startLocationUpdateWithObserver:(id)observer desiredAccuracy:(double)accuracy;
- (void)startLocationUpdateWithObserver:(id)observer;
- (void)stopLocationUpdateWithObserver:(id)observer;
- (id)observersDescription;
- (void)waitForAccurateLocationWithTimeout:(double)timeout handler:(id /* block */)handler;
- (void)_waitForAccurateLocationsTimerFired:(id)fired;
- (id)singleLocationUpdateWithHandler:(id /* block */)handler;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)accuracy handler:(id /* block */)handler;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)accuracy handler:(id /* block */)handler timeout:(double)timeout;
- (id)singleLocationUpdateWithDesiredAccuracy:(double)accuracy handler:(id /* block */)handler timeout:(double)timeout maxLocationAge:(double)age;
- (void)_setTrackingHeading:(BOOL)heading;
- (void)startHeadingUpdateWithObserver:(id)observer;
- (void)stopHeadingUpdateWithObserver:(id)observer;
- (void)startVehicleSpeedUpdate;
- (void)stopVehicleSpeedUpdate;
- (void)startVehicleHeadingUpdate;
- (void)stopVehicleHeadingUpdate;
- (BOOL)isEnabled;
- (BOOL)wasLastLocationPushed;
@end

#endif /* MKLocationManager_h */
