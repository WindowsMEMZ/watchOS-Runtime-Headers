//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2417.42.9.28.9
//
#ifndef MKMapView_h
#define MKMapView_h
@import Foundation;

#include "UIView.h"
#include "GEOConfigChangeListenerDelegate-Protocol.h"
#include "GEOLogContextDelegate-Protocol.h"
#include "GEOOfflineServiceViewportReporter-Protocol.h"
#include "GEOResourceManifestTileGroupObserver-Protocol.h"
#include "MKAnnotationContainerView.h"
#include "MKAnnotationContainerViewDelegate-Protocol.h"
#include "MKAnnotationManager.h"
#include "MKAnnotationManagerDelegate-Protocol.h"
#include "MKAnnotationMarkerContainer-Protocol.h"
#include "MKAnnotationView.h"
#include "MKAttributionLabel.h"
#include "MKBasicMapView.h"
#include "MKDebugLocationConsole.h"
#include "MKLocationManager.h"
#include "MKLocationManagerObserver-Protocol.h"
#include "MKMapCamera.h"
#include "MKMapCameraBoundary.h"
#include "MKMapCameraZoomRange.h"
#include "MKMapConfiguration.h"
#include "MKMapGestureController.h"
#include "MKMapGestureControllerDelegate-Protocol.h"
#include "MKMapViewDelegate-Protocol.h"
#include "MKMapViewInternal.h"
#include "MKMapViewLabelMarkerState.h"
#include "MKMapViewRouteContextUpdates-Protocol.h"
#include "MKOverlayContainerView.h"
#include "MKOverlayContainerViewDelegate-Protocol.h"
#include "MKPointOfInterestFilter.h"
#include "MKRotationFilter.h"
#include "MKRotationFilterDelegate-Protocol.h"
#include "MKScaleView.h"
#include "MKUsageCounter.h"
#include "MKUserLocation.h"
#include "MKUserTrackingButton.h"
#include "MKVariableDelayTapRecognizerDelegate-Protocol.h"
#include "MKWalkingRadiusContainerView.h"
#include "NSCoding-Protocol.h"
#include "UIGestureRecognizerDelegate-Protocol.h"
#include "VKMapViewCameraDelegate-Protocol.h"
#include "VKMapViewDelegate-Protocol.h"
#include "_MKCustomFeatureStore.h"
#include "_MKEnvironmentLabel.h"
#include "_MKLocompassView.h"

@class CLLocation, GEOMapRegion, MKPitchButton, NSArray, NSDictionary, NSLayoutConstraint, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, NSTimer, UIGestureRecognizer, UIImageView, UILayoutGuide, UILongPressGestureRecognizer, UIPanGestureRecognizer, UIPinchGestureRecognizer, UIRotationGestureRecognizer, UIStackView, UITapGestureRecognizer, UITextView, UITraitCollection, UIView, VKLabelMarker, VKMapView, VKNavContext, VKRouteContext, VKVenueBuildingFeatureMarker, VKVenueFeatureMarker;
@protocol MKMapViewDelegate><MKMapViewDelegatePrivate, OS_dispatch_group, OS_dispatch_queue, UIView<MKCompassView;

@interface MKMapView : UIView<MKLocationManagerObserver, MKOverlayContainerViewDelegate, MKMapGestureControllerDelegate, UIGestureRecognizerDelegate, MKVariableDelayTapRecognizerDelegate, MKMapViewRouteContextUpdates, VKMapViewDelegate, VKMapViewCameraDelegate, MKAnnotationMarkerContainer, MKAnnotationManagerDelegate, GEOLogContextDelegate, MKRotationFilterDelegate, GEOConfigChangeListenerDelegate, GEOResourceManifestTileGroupObserver, MKAnnotationContainerViewDelegate, GEOOfflineServiceViewportReporter, NSCoding> {
  /* instance variables */
  NSMutableArray *_whenSizedBlocks;
  NSMutableSet *_annotationViewEventSet;
  NSMutableDictionary *_overlayRendererEventDictionary;
  MKUsageCounter *_usageCounter;
  MKMapViewInternal *_internal;
  UIView *_contentView;
  MKAnnotationManager *_annotationManager;
  MKAnnotationContainerView *_annotationContainer;
  MKAttributionLabel *_attributionLabel;
  id /* block */ _annotationRectTest;
  id /* block */ _annotationCoordinateTest;
  UIImageView *_attributionBadgeView;
  NSTimer *_startEffectsTimer;
  NSObject<MKMapViewDelegate><MKMapViewDelegatePrivate> *_safeDelegate;
  NSObject<MKMapViewDelegate><MKMapViewDelegatePrivate> *_unsafeDelegate;
  unsigned long long _suspendedEffectsCount;
  unsigned long long _userInteractionDisabledCount;
  MKDebugLocationConsole *_debugLocationConsole;
  _MKEnvironmentLabel *_debugCurrentEnvironmentLabel;
  double _heading;
  UIGestureRecognizer *_locationConsoleGesture;
  MKMapGestureController *_gestureController;
  MKOverlayContainerView *_overlayContainer;
  BOOL _userTrackingModeShouldAnimate;
  MKBasicMapView *_basicMapView;
  VKMapView *_mapView;
  VKLabelMarker *_pressedLabelMarker;
  MKScaleView *_scaleView;
  UIView<MKCompassView> *_compassView;
  _MKLocompassView *_locompassView;
  BOOL _locompassVisible;
  MKUserTrackingButton *_trackingButton;
  MKPitchButton *_pitchButton;
  UIStackView *_controlStackView;
  NSLayoutConstraint *_controlStackHorizontalPositionConstraint;
  NSLayoutConstraint *_controlStackVerticalPositionConstraint;
  NSLayoutConstraint *_controlStackWidthConstraint;
  BOOL _scaleVisible;
  BOOL _compassVisible;
  BOOL _userTrackingVisible;
  BOOL _pitchSliderVisible;
  BOOL _pitchButtonVisible;
  UIView *_scrollContainerView;
  VKRouteContext *_routeContext;
  VKNavContext *_navContext;
  id /* block */ _showCalloutAfterRegionChangeBlock;
  id /* block */ _selectAnnotationViewAfterRedrawBlock;
  UITextView *_vectorKitDebugView;
  UIPanGestureRecognizer *_vectorKitStyleDebugGestureRecognizer;
  double _verticalYawOverride;
  long long _originalLoopRate;
  long long _preGesturingLoopRate;
  struct { BOOL shouldZoomToFit; double idealCenterCoordinateDistance; BOOL shouldPreserveUserSpecifiedZoomLevel; BOOL resetAfterTracking; } _annotationTrackingBehavior;
  id _topLayoutGuide;
  id _bottomLayoutGuide;
  NSObject<OS_dispatch_queue> *_lastEffectiveTraitCollectionIsolationQueue;
  UITraitCollection *_lastTraitCollection;
  MKRotationFilter *_rotationFilter;
  MKAnnotationView *_longPressedAnnotationView;
  struct { unsigned int x :1 changingRegion; unsigned int x :1 debugViewHeading; unsigned int x :1 draggingInterrupted; unsigned int x :1 didStartSmoothScrolling; unsigned int x :1 hasRenderedSomething; unsigned int x :1 hasSignaledWillStartRendering; unsigned int x :1 ignoreHeadingUpdates; unsigned int x :1 ignoreLocationUpdates; unsigned int x :1 isSuspended; unsigned int x :1 longPressing; unsigned int x :1 persistFixedUserLocation; unsigned int x :1 regionChangeIsAnimated; unsigned int x :1 rotationSupported; unsigned int x :1 scrollEnabled; unsigned int x :1 scrolling; unsigned int x :1 showHeadingIndicator; unsigned int x :1 alwaysShowHeadingIndicator; unsigned int x :1 showHeadingIndicatorForStepping; unsigned int x :1 useVehicleHeading; unsigned int x :1 showsUserLocation; unsigned int x :1 zoomEnabled; unsigned int x :1 zoomIsAnimated; unsigned int x :1 zooming; unsigned int x :1 isChangingViewSize; unsigned int x :1 isChangingEdgeInsets; unsigned int x :1 showsAttribution; unsigned int x :1 canShowAttributionBadge; unsigned int x :1 showsVenues; unsigned int x :1 rotating; unsigned int x :1 pitching; unsigned int x :1 rotateEnabled; unsigned int x :1 pitchEnabled; unsigned int x :1 showsBuildings; unsigned int x :1 hasPendingCameraChange; unsigned int x :1 currentRegionChangeShouldUpdateAnnotationsMidstream; unsigned int x :1 backdropViewQualityChangingDisabled; unsigned int x :1 canSelectPOIs; unsigned int x :1 canSelectAllLabels; unsigned int x :1 vectorKitConsoleEnabled; unsigned int x :1 edgeInsetsAreExplicit; unsigned int x :1 locationPropagationEnabled; unsigned int x :1 userInteractionPausesLocationUpdates; unsigned int x :1 locationPulseEnabled; unsigned int x :1 shouldSplitRouteLine; unsigned int x :1 shouldAnimatePositionWithRouteMatch; unsigned int x :1 clearUserLocationOnLocationReset; unsigned int x :1 showsCurrentEnvironmentName; unsigned int x :1 processingUserLocationUpdate; unsigned int x :1 changingMapType; unsigned int x :1 userRotatedAwayFromVerticalYaw; unsigned int x :1 goingToDefaultLocation; unsigned int x :1 isDraggingAnnotationView; unsigned int x :1 showsPressedLabelMarkerEffect; unsigned int x :1 shouldLoadFallbackTiles; unsigned int x :1 iconPixelAlignmentExplicitlyDisabled; unsigned int x :1 userDidRotateDuringCurrentRegionChange; unsigned int x :1 isTwoFingerLongPressing; unsigned int x :1 useTopBottomLayoutGuides; unsigned int x :1 useLayoutMargins; unsigned int x :1 delegateShouldReceiveTouch; unsigned int x :1 delegateShouldDelayTapResponse; unsigned int x :1 delegateDidUpdateUserLocation; unsigned int x :1 delegateWillChangeRegion; unsigned int x :1 delegateDidChangeUserTrackingModeButton; unsigned int x :1 delegateDidChangeUserTrackingMode; unsigned int x :1 hapticFeedbackEnabled; unsigned int x :1 walkingRadiusEnabled; } _flags;
  BOOL _hasSetLayoutMargins;
  UILayoutGuide *_edgeInsetsGuide;
  NSLayoutConstraint *_edgeInsetsTopConstraint;
  NSLayoutConstraint *_edgeInsetsLeftConstraint;
  NSLayoutConstraint *_edgeInsetsRightConstraint;
  NSLayoutConstraint *_edgeInsetsBottomConstraint;
  unsigned long long _suspendPropagatingEdgeInsetsCount;
  BOOL _forceLayoutOnBoundsChange;
  BOOL _hasPendingEdgeInsetsChange;
  id _shelbyvilleListener;
  _MKCustomFeatureStore *_annotationsCustomFeatureStore;
  double _lastYaw;
  BOOL _lastPossiblyVisible;
  unsigned long long _cachedVenueIDWithFocus;
  short _cachedDisplayedFloorOrdinalForVenueWithFocus;
  struct CLLocationCoordinate2D { double latitude; double longitude; } _oldCenterCoordinate;
  double _oldHeading;
  double _oldPitch;
  double _oldAltitude;
  BOOL _explicitCompassInsetEdges;
  MKMapViewLabelMarkerState *_selectedLabelMarkerState;
  unsigned long long _compassUpdateNotificationObserversCount;
  unsigned long long _scaleUpdateNotificationObserversCount;
  double _lastNotifiedZoomSize;
  unsigned long long _zoomUpdateNotificationObserversCount;
  unsigned long long _mapViewDidFinishRenderingSignpostID;
  MKWalkingRadiusContainerView *_walkingRadiusContainerView;
  NSArray *_screenLabels;
  BOOL _canRenderWalkingRadiusView;
  UIView *_walkingRadiusHostingTextView;
}

@property (nonatomic) unsigned long long selectedFeatureID;
@property (nonatomic) BOOL scaleEnabled;
@property (retain, nonatomic) CLLocation *predictedUserLocation;
@property (nonatomic) BOOL ignoreLocationUpdates;
@property (readonly, retain, nonatomic) MKAnnotationView *userLocationView;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) BOOL showHeadingIndicator;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSArray *overlays;
@property (readonly, nonatomic) BOOL changingRegionForGesture;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSArray *visibleTileSets;
@property (readonly, nonatomic) NSString *detailedDescription;
@property (readonly, nonatomic) NSDictionary *detailedDescriptionDictionaryRepresentation;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSArray *transitLineMarkersInCurrentViewport;
@property (readonly, nonatomic) MKLocationManager *locationManager;
@property (readonly, nonatomic) long long _interfaceOrientation;
@property (readonly, nonatomic) BOOL canShowControls;
@property (readonly, nonatomic) struct { double x0; double x1; } _centerMapPoint;
@property (readonly, nonatomic) BOOL canRotateForHeading;
@property (readonly, nonatomic) BOOL hasRenderedSomething;
@property (readonly, nonatomic) BOOL effectsEnabled;
@property (nonatomic) BOOL suspended;
@property (retain, nonatomic) NSTimer *_startEffectsTimer;
@property (weak, nonatomic) NSObject<MKMapViewDelegate> *_safeDelegate;
@property (copy, nonatomic) MKMapConfiguration *configuration;
@property (nonatomic) BOOL attributionBadgeClickable;
@property (readonly, nonatomic) NSObject<OS_dispatch_group> *calloutShowAnimationGroup;
@property (nonatomic) unsigned long long currentFlyoverAnimationID;
@property (nonatomic) struct { long long x0; long long x1; long long x2; long long x3; long long x4; long long x5; BOOL x6; } cartographicConfiguration;
@property (readonly, nonatomic) double _zoomScale;
@property (readonly, nonatomic) double _zoomLevel;
@property (nonatomic) BOOL showsLocompass;
@property (nonatomic) unsigned long long userTrackingButtonBackgroundStyle;
@property (nonatomic) unsigned long long pitchButtonBackgroundStyle;
@property (nonatomic) unsigned long long userTrackingControlSize;
@property (nonatomic) unsigned long long pitchButtonControlSize;
@property (nonatomic) unsigned long long scaleControlSize;
@property (nonatomic) unsigned long long controlBackgroundStyle;
@property (nonatomic) unsigned long long controlSize;
@property (readonly, nonatomic) double minimumZoomLevel;
@property (readonly, nonatomic) double maximumZoomLevel;
@property (nonatomic) BOOL showsScaleDuringZoom;
@property (nonatomic) long long scaleVisibility;
@property (nonatomic) BOOL showsRoadLabels;
@property (nonatomic) BOOL showsRoadShields;
@property (nonatomic) BOOL showsPointLabels;
@property (nonatomic) BOOL showsVenues;
@property (nonatomic) long long interactionMode;
@property (readonly, nonatomic) BOOL regionChanging;
@property (nonatomic) BOOL _annotationViewsAreAddedImmediately;
@property (nonatomic) BOOL allowsPopoverWhenNotInWindow;
@property (readonly, nonatomic) BOOL hasUserLocation;
@property (readonly, nonatomic) GEOMapRegion *mapRegion;
@property (nonatomic) int attributionCorner;
@property (nonatomic) BOOL shouldCenterAlignAttributionBadge;
@property (nonatomic) BOOL showsAttribution;
@property (nonatomic) BOOL canShowAttributionBadge;
@property (readonly, nonatomic) BOOL showingAttributionBadge;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } attributionBadgeBounds;
@property (nonatomic) long long attributionLinkDisplayStyle;
@property (readonly, nonatomic) BOOL canShowCompass;
@property (readonly, nonatomic) BOOL canShowPitch;
@property (readonly, nonatomic) BOOL canShowZoom;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } attributionInsets;
@property (nonatomic) BOOL compassEnabled;
@property (nonatomic) BOOL compassSuppressedForFloorPicker;
@property (readonly, nonatomic) double presentationYaw;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } compassInsets;
@property (nonatomic) unsigned long long compassInsetEdges;
@property (nonatomic) long long compassViewSize;
@property (readonly, nonatomic) long long compassViewStyle;
@property (readonly, nonatomic) double compassDiameter;
@property (nonatomic) BOOL showsTrafficIncidents;
@property (nonatomic) BOOL canSelectPOIs;
@property (nonatomic) BOOL useBalloonCalloutsForLabels;
@property (nonatomic) BOOL canSelectAllLabels;
@property (readonly, nonatomic) VKLabelMarker *selectedLabelMarker;
@property (readonly, nonatomic) BOOL showingFlyover;
@property (readonly, nonatomic) BOOL canShowFlyover;
@property (nonatomic) BOOL showHeadingIndicatorForStepping;
@property (nonatomic) BOOL alwaysShowHeadingIndicator;
@property (copy, nonatomic) id /* block */ debugConsoleAdditionalInfoProvider;
@property (readonly, nonatomic) MKDebugLocationConsole *debugConsole;
@property (nonatomic) BOOL vectorKitConsoleEnabled;
@property (nonatomic) BOOL automaticallySnapsToNorth;
@property (readonly, nonatomic) BOOL pitched;
@property (readonly, nonatomic) BOOL canEnter3DMode;
@property (readonly, nonatomic) BOOL canEnter3DModeFlyover;
@property (readonly, nonatomic) BOOL canEnterNightMode;
@property (nonatomic) struct { BOOL x0; double x1; BOOL x2; BOOL x3; } userTrackingBehavior;
@property (nonatomic) int applicationState;
@property (nonatomic) long long displayedSearchResultsType;
@property (readonly, nonatomic) BOOL showingCuratedElevatedGround;
@property (readonly, nonatomic) VKMapView *mapLayer;
@property (readonly, nonatomic) NSArray *annotationViews;
@property (nonatomic) BOOL localizeLabels;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } edgeInsets;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } labelEdgeInsets;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } labelEdgeWidths;
@property (nonatomic) BOOL userInteractionPausesLocationUpdates;
@property (nonatomic) BOOL panWithMomentum;
@property (nonatomic) BOOL locationPulseEnabled;
@property (nonatomic) BOOL shouldSplitRouteLine;
@property (nonatomic) BOOL shouldAnimatePositionWithRouteMatch;
@property (nonatomic) BOOL shouldLoadFallbackTiles;
@property (readonly, nonatomic) UIPanGestureRecognizer *panningGestureRecognizer;
@property (readonly, nonatomic) UIPinchGestureRecognizer *pinchGestureRecognizer;
@property (readonly, nonatomic) UIRotationGestureRecognizer *rotationGestureRecognizer;
@property (readonly, nonatomic) UITapGestureRecognizer *selectingTapGestureRecognizer;
@property (readonly, nonatomic) UITapGestureRecognizer *nonselectingTapGestureRecognizer;
@property (readonly, nonatomic) UILongPressGestureRecognizer *longPressGestureRecognizer;
@property (readonly, nonatomic) UITapGestureRecognizer *doubleTapGestureRecognizer;
@property (readonly, nonatomic) UITapGestureRecognizer *twoFingerTapGestureRecognizer;
@property (readonly, nonatomic) UIGestureRecognizer *oneHandedZoomGestureRecognizer;
@property (readonly, nonatomic) BOOL handlingNonselectingTap;
@property (nonatomic) BOOL hapticFeedbackEnabled;
@property (nonatomic) BOOL walkingRadiusEnabled;
@property (nonatomic) BOOL rendersInBackground;
@property (nonatomic) BOOL showsNightMode;
@property (nonatomic) BOOL showsCurrentEnvironmentName;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } currentEnvironmentLabelFrame;
@property (nonatomic) long long labelTextSize;
@property (nonatomic) BOOL showsPressedLabelMarkerEffect;
@property (nonatomic) BOOL inactive;
@property (readonly, nonatomic) BOOL animating;
@property (readonly, nonatomic) UILayoutGuide *edgeInsetsLayoutGuide;
@property (readonly, nonatomic) VKVenueFeatureMarker *venueWithFocus;
@property (readonly, nonatomic) VKVenueBuildingFeatureMarker *venueBuildingWithFocus;
@property (nonatomic) BOOL dimmingOutsideVenueWithFocus;
@property (readonly, nonatomic) BOOL isHybridMap;
@property (copy, nonatomic) id /* block */ labelsDidLayoutCallback;
@property (nonatomic) long long offlineRegionVisibility;
@property (readonly, nonatomic) BOOL isWithinHikingBoundary;
@property (readonly, nonatomic) BOOL isWithinHikingBufferRegion;
@property (weak, @dynamic, nonatomic) NSObject<MKMapViewDelegate> *delegate;
@property (nonatomic) unsigned long long mapType;
@property (copy, nonatomic) MKMapConfiguration *preferredConfiguration;
@property (nonatomic) struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; } region;
@property (nonatomic) struct CLLocationCoordinate2D { double x0; double x1; } centerCoordinate;
@property (nonatomic) struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; } visibleMapRect;
@property (copy, nonatomic) MKMapCamera *camera;
@property (copy, nonatomic) MKMapCameraZoomRange *cameraZoomRange;
@property (copy, nonatomic) MKMapCameraBoundary *cameraBoundary;
@property (nonatomic) BOOL zoomEnabled;
@property (nonatomic) BOOL scrollEnabled;
@property (nonatomic) BOOL rotateEnabled;
@property (nonatomic) BOOL pitchEnabled;
@property (nonatomic) BOOL showsUserTrackingButton;
@property (nonatomic) long long pitchButtonVisibility;
@property (nonatomic) BOOL showsPitchControl;
@property (nonatomic) BOOL showsZoomControls;
@property (nonatomic) BOOL showsCompass;
@property (nonatomic) BOOL showsScale;
@property (copy, nonatomic) MKPointOfInterestFilter *pointOfInterestFilter;
@property (nonatomic) BOOL showsPointsOfInterest;
@property (nonatomic) BOOL showsBuildings;
@property (nonatomic) BOOL showsTraffic;
@property (nonatomic) BOOL showsUserLocation;
@property (readonly, nonatomic) MKUserLocation *userLocation;
@property (nonatomic) long long userTrackingMode;
@property (readonly, nonatomic) BOOL userLocationVisible;
@property (readonly, nonatomic) NSArray *annotations;
@property (copy, nonatomic) NSArray *selectedAnnotations;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } annotationVisibleRect;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })_regionThatFitsMapType:(unsigned long long)type viewSize:(struct CGSize { double x0; double x1; })size viewInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets edgePadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })padding region:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })region minZoomLevel:(double)level maxZoomLevel:(double)level snapToZoomLevel:(BOOL)level;
+ (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })_mapRectThatFitsViewBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds mapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect viewInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets edgePadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })padding minZoomLevel:(double)level maxZoomLevel:(double)level snapToZoomLevel:(BOOL)level;
+ (unsigned long long)minZoomLevelForMapType:(unsigned long long)type viewSize:(struct CGSize { double x0; double x1; })size;
+ (struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })regionThatFitsMapType:(unsigned long long)type viewSize:(struct CGSize { double x0; double x1; })size edgeInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets region:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })region;
+ (struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })regionThatFitsMapType:(unsigned long long)type viewSize:(struct CGSize { double x0; double x1; })size region:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })region;
+ (void)setRendersInBackgroundByDefault:(BOOL)default;
+ (long long)_defaultOverlayLevel;

/* instance methods */
- (struct CGPoint { double x0; double x1; })_convertCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate toPointToView:(id)view;
- (struct CLLocationCoordinate2D { double x0; double x1; })_convertPoint:(struct CGPoint { double x0; double x1; })point toCoordinateFromView:(id)view;
- (struct CGPoint { double x0; double x1; })_convertMapPoint:(struct { double x0; double x1; })point toPointToView:(id)view;
- (struct { double x0; double x1; })_convertPoint:(struct CGPoint { double x0; double x1; })point toMapPointFromView:(id)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertRegion:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })region toRectToView:(id)view;
- (struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })_convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toRegionFromView:(id)view;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })_convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toMapRectFromView:(id)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_convertMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect toRectToView:(id)view;
- (double)_distanceFromPoint:(struct CGPoint { double x0; double x1; })point toPoint:(struct CGPoint { double x0; double x1; })point fromView:(id)view withPrecision:(long long)precision;
- (id)_flattenedAnnotationsForAnnotationViews:(id)views maxDisplayPriority:(float *)priority;
- (id)_transitLineMarkersInCurrentViewport;
- (id)_transitLineMarkerForIdentifier:(id)identifier;
- (void)_selectTransitLineMarker:(id)marker;
- (void)_selectTransitLineMarkerWithIdentifier:(id)identifier;
- (void)_deselectTransitLineMarker;
- (BOOL)_hasSelectedTransitLines;
- (id)_selectedTransitLineIDs;
- (void)_addSetRegionBlock:(id /* block */)block;
- (void)_addSetRegionBlock:(id /* block */)block completion:(id /* block */)completion;
- (void)_addDependentSetRegionBlock:(id /* block */)block;
- (void)_addDependentSetRegionBlock:(id /* block */)block completion:(id /* block */)completion;
- (void)_addDependentAuxiliaryBlock:(id /* block */)block;
- (void)_performWhenSizedBlocks;
- (void)_setRouteContextForRoute:(id)route;
- (void)_setRouteContextForRoutes:(id)routes selectedRouteIndex:(unsigned long long)index;
- (BOOL)_shouldUpdateSelectedRouteFromRoutes:(id)routes selectedRouteIndex:(unsigned long long)index;
- (void)_setRouteContext:(id)context;
- (void)_clearRouteContext;
- (id)_routeInfoForRoute:(id)route;
- (void)_setRouteContextInspectedSegmentIndex:(unsigned long long)index inspectedStepIndex:(unsigned long long)index;
- (void)_setRouteContextAnnotationText:(id)text etaType:(long long)type tollCurrency:(unsigned char)currency advisoryStyleAttributes:(id)attributes forRoute:(id)route;
- (void)_setRouteContextAnnotationTexts:(id)texts forLegsInRoute:(id)route;
- (void)_setRouteContextAnnotationFocus:(BOOL)focus forRoute:(id)route;
- (void)_setAlternateRouteContextAnnotationETAComparison:(unsigned char)etacomparison forRoute:(id)route;
- (void)_updateWaypointCaptions;
- (id)_visibleTileSets;
- (id)_detailedDescription;
- (id)_detailedDescriptionDictionaryRepresentation;
- (id)_transitLineMarkersForSelectionAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_configureGestureRecognizers:(id)recognizers;
- (void)_addDebugGesture;
- (BOOL)gestureRecognizerShouldBegin:(id)begin;
- (BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
- (void)_handleLongPressGesture:(id)gesture;
- (void)_handleSelectGestureToSelect:(id)select;
- (void)_handleSelectGestureToDeselect:(id)deselect;
- (BOOL)_isChangingRegionForGesture;
- (void)gestureControllerWillStartUserInteraction:(id)interaction;
- (void)gestureControllerDidStopUserInteraction:(id)interaction;
- (void)gestureControllerWillStartPanning:(id)panning;
- (void)gestureControllerDidStopPanning:(id)panning willDecelerate:(BOOL)decelerate;
- (void)gestureControllerDidStopPanningDecelerating:(id)decelerating;
- (void)gestureControllerWillStartZooming:(id)zooming animated:(BOOL)animated;
- (void)gestureControllerDidStopZooming:(id)zooming direction:(long long)direction willDecelerate:(BOOL)decelerate;
- (void)gestureControllerDidStopZooming:(id)zooming direction:(long long)direction type:(long long)type willDecelerate:(BOOL)decelerate;
- (void)gestureControllerDidStopZoomingDecelerating:(id)decelerating direction:(long long)direction;
- (void)gestureControllerDidStopZoomingDecelerating:(id)decelerating direction:(long long)direction type:(long long)type;
- (void)_gestureControllerDidStopZoomingProvidHapticFeedbackIfNeeded:(id)needed direction:(long long)direction type:(long long)type;
- (void)gestureControllerWillStartTwoFingerLongPress:(id)press;
- (void)gestureControllerDidStopTwoFingerLongPress:(id)press;
- (void)gestureControllerWillStartRotating:(id)rotating;
- (void)gestureControllerDidStopRotating:(id)rotating willDecelerate:(BOOL)decelerate;
- (void)gestureControllerWillStartTilting:(id)tilting;
- (void)gestureControllerDidStopTilting:(id)tilting willDecelerate:(BOOL)decelerate tiltDirection:(long long)direction;
- (void)gestureControllerDidStopTiltingDecelerating:(id)decelerating;
- (void)gestureControllerDidStopRotatingDecelerating:(id)decelerating;
- (BOOL)gestureController:(id)controller shouldReceiveTouch:(id)touch;
- (double)gestureController:(id)controller shouldWaitForNextTapForDuration:(double)duration afterTouch:(id)touch;
- (struct CGPoint { double x0; double x1; })gestureController:(id)controller focusPointForPoint:(struct CGPoint { double x0; double x1; })point gestureKind:(long long)kind;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })gestureControllerSignificantViewFrame:(id)frame;
- (void)addOverlay:(id)overlay;
- (void)addOverlays:(id)overlays;
- (void)addOverlay:(id)overlay level:(long long)level;
- (void)addOverlays:(id)overlays level:(long long)level;
- (void)insertOverlay:(id)overlay atIndex:(unsigned long long)index level:(long long)level;
- (void)removeOverlay:(id)overlay;
- (void)removeOverlays:(id)overlays;
- (void)insertOverlay:(id)overlay atIndex:(unsigned long long)index;
- (void)exchangeOverlayAtIndex:(unsigned long long)index withOverlayAtIndex:(unsigned long long)index;
- (void)exchangeOverlay:(id)overlay withOverlay:(id)overlay;
- (void)insertOverlay:(id)overlay aboveOverlay:(id)overlay;
- (void)insertOverlay:(id)overlay belowOverlay:(id)overlay;
- (id)rendererForOverlay:(id)overlay;
- (id)overlaysInLevel:(long long)level;
- (id)overlayContainer;
- (id)createDrawableForOverlay:(id)overlay;
- (void)overlayContainerAddedDrawables:(id)drawables;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })overlayContainerVisibleMapRect:(id)rect;
- (id)vk_mapLayer;
- (void)_invalidateAllOverlayRendererColors;
- (id)_camera;
- (void)_setCamera:(id)camera;
- (void)_setCamera:(id)camera completionHandler:(id /* block */)handler;
- (double)_durationForCamera:(id)camera;
- (double)_cameraAltitudeClampedToZoomRange:(id)range;
- (void)_setCamera:(id)camera animated:(BOOL)animated;
- (void)_setCamera:(id)camera animated:(BOOL)animated completionHandler:(id /* block */)handler;
- (id /* block */)_vkTimingFunctionForUIViewAnimationCurve:(long long)curve;
- (void)_setCamera:(id)camera duration:(double)duration timingCurve:(long long)curve completionHandler:(id /* block */)handler;
- (void)_setCamera:(id)camera duration:(double)duration timing:(id /* block */)timing completionHandler:(id /* block */)handler;
- (void)_setCamera:(id)camera springMass:(float)mass springStiffness:(float)stiffness springDamping:(float)damping springVelocity:(float)velocity;
- (void)_setCamera:(id)camera duration:(double)duration springMass:(float)mass springStiffness:(float)stiffness springDamping:(float)damping springVelocity:(float)velocity completionHandler:(id /* block */)handler;
- (void)_setCameraZoomRange:(id)range animated:(BOOL)animated;
- (void)_setCameraBoundary:(id)boundary animated:(BOOL)animated;
- (double)_animationDurationWhenSettingCameraBoundary:(id)boundary;
- (void)_updateFromCamera:(id)camera duration:(double)duration timing:(id /* block */)timing completionHandler:(id /* block */)handler;
- (void)_updateFromCamera:(id)camera;
- (void)_updateCameraState;
- (void)_snapToNorthIfNecessary;
- (BOOL)_showHeadingIndicator;
- (void)_setShowHeadingIndicator:(BOOL)indicator;
- (BOOL)_useVehicleHeading;
- (void)_setUseVehicleHeading:(BOOL)heading;
- (void)pauseUserHeadingUpdates;
- (void)resumeUserHeadingUpdates;
- (void)_startTrackingHeading;
- (void)_stopTrackingHeading;
- (BOOL)_rotationPossible;
- (BOOL)_updateRotationSupported;
- (void)_updateHeading:(id)heading animated:(BOOL)animated;
- (void)_updateHeadingIndicatorAnimated:(BOOL)animated;
- (void)_updateCourseForMapViewHeading:(id)heading;
- (void)locationManagerUpdatedHeading:(id)heading;
- (void)locationManagerFailedToUpdateHeading:(id)heading withError:(id)error;
- (void)_locationManager:(id)manager didUpdateVehicleHeading:(double)heading timestamp:(id)timestamp;
- (void)startUpdatingUserLocation;
- (void)stopUpdatingUserLocation;
- (BOOL)isLocationConsoleEnabled;
- (void)setLocationConsoleEnabled:(BOOL)enabled;
- (void)_updateLocationConsole;
- (BOOL)_isLocationPropagationEnabled;
- (void)_setLocationPropagationEnabled:(BOOL)enabled;
- (BOOL)_clearUserLocationOnLocationReset;
- (void)_setClearUserLocationOnLocationReset:(BOOL)reset;
- (BOOL)_isUserLocationInView:(BOOL)view;
- (BOOL)_isUserLocationViewCentered:(double)centered;
- (BOOL)_isPoint:(struct CGPoint { double x0; double x1; })point nearUserLocationView:(double)view;
- (BOOL)_userLocationWithinVisibleMapBounds;
- (void)removeUserLocation;
- (void)_pauseUserLocationUpdates;
- (void)_resumeUserLocationUpdates:(BOOL)updates;
- (void)_updateUserLocation:(id)location routeMatch:(id)match;
- (void)_updateUserLocationViewWithLocation:(id)location hadUserLocation:(BOOL)location;
- (void)locationManagerUpdatedLocation:(id)location;
- (void)locationManagerFailedToUpdateLocation:(id)location withError:(id)error;
- (void)locationManagerDidReset:(id)reset;
- (BOOL)locationManagerShouldPauseLocationUpdates:(id)updates;
- (void)locationManagerDidPauseLocationUpdates:(id)updates;
- (void)locationManagerDidResumeLocationUpdates:(id)updates;
- (void)locationManager:(id)manager didUpdateVehicleSpeed:(double)speed timestamp:(id)timestamp;
- (void)locationManager:(id)manager didUpdateVehicleHeading:(double)heading timestamp:(id)timestamp;
- (void)locationManagerApprovalDidChange:(id)change;
- (BOOL)isScaleEnabled;
- (unsigned long long)_selectedFeatureID;
- (void)_setSelectedFeatureID:(unsigned long long)id;
- (void)_createAnnotationViewSetIfNeeded;
- (void)_createOverlayRendererDictionaryIfNeeded;
- (void)_countUsageForAnnotationViewsIfNeeded:(id)needed;
- (void)_countUsageOfTypeIfNeeded:(unsigned long long)needed forAnnotationView:(id)view countedEventTypes:(id)types;
- (void)_countUsageForRendererIfNeeded:(id)needed;
- (void)_setUseBalloonCalloutsForLabels:(BOOL)labels;
- (BOOL)_useBalloonCalloutsForLabels;
- (BOOL)_isHapticFeedbackEnabled;
- (void)_setHapticFeedbackEnabled:(BOOL)enabled;
- (BOOL)_isWalkingRadiusEnabled;
- (void)_setWalkingRadiusEnabled:(BOOL)enabled;
- (void)_setupWalkingRadiusContainerViewIfNeeded;
- (void)_setWalkingRadiusHostingView:(id)view;
- (void)_updateWalkingRadiusIfNecessary;
- (BOOL)_shouldAnimatePropertyWithKey:(id)key;
- (id)_commonInitFromIB:(BOOL)ib gestureRecognizerHostView:(id)view locationManager:(id)manager showsAttribution:(BOOL)attribution showsAppleLogo:(BOOL)logo allowsAntialiasing:(BOOL)antialiasing carDisplayType:(long long)type;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame gestureRecognizerHostView:(id)view showsAttribution:(BOOL)attribution showsAppleLogo:(BOOL)logo allowsAntialiasing:(BOOL)antialiasing carDisplayType:(long long)type;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame allowsAntialiasing:(BOOL)antialiasing;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame locationManager:(id)manager;
- (id)initFromIBWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (void)dealloc;
- (void)_setSafeDelegate:(id)delegate;
- (void)willMoveToWindow:(id)window;
- (void)setBackdropViewQualityChangingDisabled:(BOOL)disabled;
- (void)_registerTraitCollectionObservation;
- (void)_traitEnvironment:(id)environment didChangeTraitCollection:(id)collection;
- (void)_withEffectiveTraitCollection:(id /* block */)collection;
- (void)_updateAppearanceIfNeeded;
- (void)_forceManifestUpdateIfNecessary;
- (id)_mapLayer;
- (BOOL)_isShowingAttributionBadge;
- (void)_setAttributionLinkDisplayStyle:(long long)style;
- (void)_setAttributionInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (void)_layoutAttribution;
- (unsigned long long)_compassInsetEdges;
- (void)_setCompassViewSize:(long long)size style:(long long)style;
- (void)_setCompassInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (void)_setCompassInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets animated:(BOOL)animated;
- (void)_setCompassInsetEdges:(unsigned long long)edges;
- (void)_setShouldCenterAlignAttributionBadge:(BOOL)badge;
- (void)_updateAttribution;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })attributionFrame;
- (id)urlForMapAttribution;
- (id)mapAttributionWithStringAttributes:(id)attributes;
- (id)mapAttributionWithStringAttributes:(id)attributes allowMultiLine:(BOOL)line;
- (id)mapAttributionWithStringAttributes:(id)attributes underlineText:(BOOL)text linkAttribution:(BOOL)attribution;
- (id)mapAttributionWithStringAttributes:(id)attributes underlineText:(BOOL)text;
- (BOOL)_isVectorKitConsoleEnabled;
- (void)_setVectorKitConsoleEnabled:(BOOL)enabled;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)group;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)group;
- (void)valueChangedForGEOConfigKey:(struct { unsigned int x0; void * x1; })key;
- (void)deviceOrientationDidChange:(id)change;
- (void)_updateShowsTraffic;
- (void)_updateShowsHiking;
- (void)_addCustomFeatureDataSource:(id)source;
- (void)_removeCustomFeatureDataSource:(id)source;
- (BOOL)_showsTrafficIncidents;
- (void)_setShowsTrafficIncidents:(BOOL)incidents;
- (void)_addInternalOverlay:(id)overlay level:(long long)level provider:(id)provider;
- (BOOL)_localizeLabels;
- (void)_setLocalizeLabels:(BOOL)labels;
- (BOOL)_showsPointsOfInterest;
- (void)_updatePointOfInterestFilter;
- (BOOL)_showsRoadLabels;
- (void)_setShowsRoadLabels:(BOOL)labels;
- (BOOL)_showsRoadShields;
- (void)_setShowsRoadShields:(BOOL)shields;
- (BOOL)_showsPointLabels;
- (void)_setShowsPointLabels:(BOOL)labels;
- (BOOL)_showsVenues;
- (void)_setShowsVenues:(BOOL)venues;
- (BOOL)isShowingNoDataPlaceholders;
- (BOOL)showsLiveEVData;
- (void)setShowsLiveEVData:(BOOL)evdata;
- (void)setSupportedEVConnectorTypes:(id)types;
- (BOOL)_showsPressedLabelMarkerEffect;
- (void)_setShowsPressedLabelMarkerEffect:(BOOL)effect;
- (id)_panningGestureRecognizer;
- (id)_pinchGestureRecognizer;
- (id)_rotationGestureRecognizer;
- (id)_selectingTapGestureRecognizer;
- (id)_nonselectingTapGestureRecognizer;
- (id)_longPressGestureRecognizer;
- (id)_doubleTapGestureRecognizer;
- (id)_twoFingerTapGestureRecognizer;
- (id)_oneHandedZoomGestureRecognizer;
- (BOOL)_isHandlingNonselectingTap;
- (void)_updateHeadingOrientation;
- (BOOL)_isShowingFlyover;
- (BOOL)_canShowFlyover;
- (BOOL)_supportsVKMapType:(int)type;
- (void)_setMapType:(unsigned long long)type animated:(BOOL)animated;
- (void)_setCartographicConfiguration:(struct { long long x0; long long x1; long long x2; long long x3; long long x4; long long x5; BOOL x6; })configuration onInit:(BOOL)init animated:(BOOL)animated;
- (void)_setCartographicConfiguration:(struct { long long x0; long long x1; long long x2; long long x3; long long x4; long long x5; BOOL x6; })configuration;
- (void)_setCartographicConfiguration:(struct { long long x0; long long x1; long long x2; long long x3; long long x4; long long x5; BOOL x6; })configuration animated:(BOOL)animated;
- (void)_updateCartographicConfiguration;
- (void)_updateCartographicConfigurationOnInit:(BOOL)init;
- (void)_setPreferredConfiguration:(id)configuration onInit:(BOOL)init;
- (void)_registerConfigurationObservers;
- (void)_unregisterConfigurationObservers;
- (BOOL)_showsNightMode;
- (void)_setShowsNightMode:(BOOL)mode;
- (struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })_mapDisplayStyle;
- (void)_setMapDisplayStyle:(struct { unsigned char x0; unsigned char x1; unsigned char x2; unsigned char x3; BOOL x4; })style;
- (void)_suspendUserInteraction;
- (void)_resumeUserInteraction;
- (BOOL)isSuspended;
- (BOOL)_isInactive;
- (void)_setInactive:(BOOL)inactive;
- (BOOL)isRegionChanging;
- (struct CGPoint { double x0; double x1; })_centerPoint;
- (BOOL)_isHandlingUserEvent;
- (void)_updateVectorKitConsoleFrameWithEdgeInsets;
- (long long)_roundedZoomLevel;
- (double)_mapKitZoomLevelForVectorKitTileZoomLevel:(double)level;
- (double)_vectorKitTileZoomLevelForMapKitZoomLevel:(double)level;
- (double)_minimumZoomLevel;
- (double)_maximumZoomLevel;
- (BOOL)_canZoomIn;
- (BOOL)_canZoomOut;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)setCenter:(struct CGPoint { double x0; double x1; })center;
- (BOOL)isScrollEnabled;
- (BOOL)isZoomEnabled;
- (BOOL)isRotateEnabled;
- (BOOL)isPitchEnabled;
- (BOOL)_panWithMomentum;
- (void)_setPanWithMomentum:(BOOL)momentum;
- (void)_setTracePlaybackSpeedMultiplier:(double)multiplier;
- (BOOL)isUserLocationVisible;
- (BOOL)isCurrentlyRotated;
- (void)setUserTrackingMode:(long long)mode animated:(BOOL)animated;
- (void)_setUserTrackingMode:(long long)mode animated:(BOOL)animated fromTrackingButton:(BOOL)button;
- (BOOL)postsMapViewInitialRenderingNotification;
- (BOOL)_showHeadingIndicatorForStepping;
- (void)_setShowHeadingIndicatorForStepping:(BOOL)stepping;
- (BOOL)_shouldSupportAlwaysShowHeadingIndicator;
- (void)_setAlwaysShowHeadingIndicatorIfSupported:(BOOL)supported;
- (BOOL)_alwaysShowHeadingIndicator;
- (void)_updateShowHeadingIndicator;
- (BOOL)canBecomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)_wheelChangedWithEvent:(id)event;
- (id)_annotationAtPoint:(struct CGPoint { double x0; double x1; })point avoidCurrent:(BOOL)current;
- (void)_dropDraggingAnnotationView:(BOOL)view;
- (void)_clearGestureRecognizers;
- (void)_updateScrollingAndGestures;
- (BOOL)calloutViewContainsPoint:(struct CGPoint { double x0; double x1; })point;
- (id)_findViewController:(id)controller;
- (void)_handleSelectionAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id /* block */)_debugConsoleAdditionalInfoProvider;
- (id)_debugConsole;
- (void)_setDebugConsoleAdditionalInfoProvider:(id /* block */)provider;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_currentEnvironmentNameFrame;
- (void)_updateEnvironmentLabelText;
- (BOOL)_isUsingDevResourceStyleSheet;
- (BOOL)_showsCurrentEnvironmentName;
- (void)_setShowsCurrentEnvironmentName:(BOOL)name;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_currentEnvironmentLabelFrame;
- (void)toggleLocationConsole:(id)console;
- (BOOL)_isAnimating;
- (BOOL)_iconsShouldAlignToPixels;
- (void)_updateIconsShouldAlignToPixels;
- (void)_willChangeRegionAnimated:(BOOL)animated;
- (void)_didChangeRegionMidstream:(BOOL)midstream;
- (void)_willStartZoom:(BOOL)zoom;
- (void)_didEndZoom;
- (BOOL)_isZooming;
- (BOOL)_userInteractionPausesLocationUpdates;
- (void)_setUserInteractionPausesLocationUpdates:(BOOL)updates;
- (BOOL)_isLocationPulseEnabled;
- (void)_setLocationPulseEnabled:(BOOL)enabled;
- (BOOL)_shouldSplitRouteLine;
- (void)_setShouldSplitRouteLine:(BOOL)line;
- (BOOL)_shouldAnimatePositionWithRouteMatch;
- (void)_setShouldAnimatePositionWithRouteMatch:(BOOL)match;
- (BOOL)_shouldLoadFallbackTiles;
- (void)_setShouldLoadFallbackTiles:(BOOL)tiles;
- (void)_annotationViewDragStateChanged:(id)changed;
- (double)_boundedZoomLevel:(double)level;
- (void)_updateFallbackTileLoading;
- (void)_updateScrollContainerView:(BOOL)view forReason:(long long)reason;
- (void)_stopEffects;
- (id)beginStoppingEffects;
- (void)_startEffects;
- (void)_updateShouldDisplayEffects;
- (void)_updateEffects;
- (void)showAnnotations:(id)annotations animated:(BOOL)animated;
- (void)_clearFixedUserLocation;
- (void)_fixUserLocationFromPresentationValue;
- (int)_viewIndexForSubview:(id)subview;
- (void)_insertSubview:(id)subview;
- (void)_updateContentBounds;
- (void)_populateArchivedSubviews:(id)subviews;
- (void)pauseUserLocationUpdates;
- (void)resumeUserLocationUpdates;
- (void)_selectUserLocationTypeWithDeltaZoomLevel:(double)level;
- (void)_updateRotationAttributes;
- (void)_sizeWillChange;
- (void)_sizeDidChangeWithCenterCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate;
- (id)_labelMarkersInCurrentViewport;
- (id)_labelMarkersInCurrentViewportForType:(int)type;
- (void)_forceFrame;
- (BOOL)canPossiblyShowCompassForInternalControl:(BOOL)control;
- (BOOL)_showsScaleDuringZoom;
- (void)_setShowsScaleDuringZoom:(BOOL)zoom;
- (long long)_scaleVisibility;
- (void)_setScaleVisibility:(long long)visibility;
- (id)scaleView;
- (BOOL)_shouldDisplayScaleForCurrentRegion;
- (BOOL)_canShowControls;
- (void)_updateScale;
- (void)_showOrHideScaleIfNecessary:(BOOL)necessary;
- (void)_updateScalePosition;
- (BOOL)isCompassEnabled;
- (void)_setCompassSuppressedForFloorPicker:(BOOL)picker;
- (double)_compassDiameter;
- (BOOL)_roomForCompass;
- (id)_userTrackingButton;
- (void)_setUserTrackingButtonBackgroundStyle:(unsigned long long)style;
- (void)_setUserTrackingControlSize:(unsigned long long)size;
- (void)_setControlBackgroundStyle:(unsigned long long)style;
- (void)_setControlSize:(unsigned long long)size;
- (id)compassView;
- (id)_locompassView;
- (void)_setShowsLocompass:(BOOL)locompass;
- (void)_updateLocompassVisibility;
- (void)_setLocompassVisible:(BOOL)visible animationAllowed:(BOOL)allowed;
- (void)_updateTrackingVisibility;
- (void)_updatePitchButtonVisibility;
- (void)_postDidChangeZoomNotificationIfNeeded;
- (void)_updateCompassVisibility;
- (void)_postDidUpdateYawNotification;
- (void)_updateControlsPosition:(BOOL)position;
- (void)_updateCompassPositionClassic;
- (id)_controlStackView;
- (void)_updateStackViewPosition;
- (void)_handleCompassTap:(id)tap;
- (void)_setTrackingButtonVisible:(BOOL)visible animationAllowed:(BOOL)allowed;
- (void)_setCompassVisible:(BOOL)visible animationAllowed:(BOOL)allowed force:(BOOL)force;
- (BOOL)compassVisible;
- (id)_commonVisibilityAnimation:(BOOL)animation;
- (void)snapToNorth:(id)north;
- (void)_snapToTrueNorthAndCallBack:(BOOL)back;
- (BOOL)_automaticallySnapsToNorth;
- (void)_setAutomaticallySnapsToNorth:(BOOL)north;
- (void)mapLayerDidStartLoadingTiles:(id)tiles;
- (void)mapLayerDidFinishLoadingTiles:(id)tiles;
- (void)mapLayerDidFailLoadingTiles:(id)tiles withError:(id)error;
- (void)mapLayerDidChangeSceneState:(id)state withState:(unsigned long long)state;
- (void)mapLayerLabelsDidLayout:(id)layout;
- (void)mapLayer:(id)layer selectedLabelMarkerWillDisappear:(id)disappear;
- (void)mapLayer:(id)layer selectedLabelMarkerDidChangeState:(id)state;
- (void)mapLayer:(id)layer didUpdateVerticalYawTo:(double)to;
- (void)mapLayerWillStartFlyoverTour:(id)tour;
- (void)mapLayer:(id)layer didStopFlyoverTourCompleted:(BOOL)completed;
- (void)mapLayer:(id)layer flyoverTourLabelDidChange:(id)change;
- (BOOL)_mapViewHasUpdatedCamera;
- (void)mapLayerDidDraw:(id)draw;
- (void)mapLayer:(id)layer willTransitionTo:(long long)to;
- (void)mapLayer:(id)layer canShowFlyoverDidChange:(BOOL)change;
- (void)mapLayer:(id)layer showingFlyoverDidChange:(BOOL)change;
- (void)mapLayer:(id)layer flyoverModeDidChange:(int)change;
- (void)mapLayer:(id)layer flyoverModeWillChange:(int)change;
- (void)mapLayer:(id)layer venueWithFocusDidChange:(id)change building:(id)building;
- (void)mapLayer:(id)layer locationInHikingToolTipRegion:(unsigned long long)region;
- (void)mapLayerDidChangeVisibleRegion;
- (void)mapLayerWillChangeRegionAnimated:(BOOL)animated;
- (void)mapLayerDidChangeRegionAnimated:(BOOL)animated;
- (void)mapLayerDidFinishInitialTrackingAnimation;
- (id)mapLayerPresentationForAnnotation:(id)annotation;
- (void)mapLayerDidBecomePitched:(BOOL)pitched;
- (void)mapLayerCanEnter3DModeDidChange:(BOOL)change;
- (void)mapLayerCanZoomInDidChange:(BOOL)change;
- (void)mapLayerCanZoomOutDidChange:(BOOL)change;
- (void)mapLayerNavigationCameraHasStartedPanning;
- (void)mapLayerNavigationCameraHasStoppedPanning;
- (void)mapLayerNavigationCameraDidLeaveDefaultZoom;
- (void)mapLayerNavigationCameraDidReturnToDefaultZoom;
- (void)_issueDatasetCheckinCall;
- (void)applicationWillResignActive:(id)active;
- (void)applicationDidEnterBackground:(id)background;
- (void)applicationDidBecomeActive:(id)active;
- (void)applicationWillEnterForeground:(id)foreground;
- (void)applicationWillTerminate:(id)terminate;
- (void)_registerSceneLifecycleNotifications;
- (void)_unregisterSceneLifecycleNotifications;
- (void)_sceneWillEnterForeground:(id)foreground;
- (void)_sceneDidActivate:(id)activate;
- (void)_sceneDidEnterBackground:(id)background;
- (void)_sceneDidFinishSuspensionSnapshot:(id)snapshot;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleRectInView:(id)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })visibleCenteringRectInView:(id)view;
- (BOOL)annotationContainerIsRotated:(id)rotated;
- (BOOL)annotationContainerShouldAlignToPixels:(id)pixels;
- (void)annotationContainer:(id)container scrollToRevealCalloutWithOffset:(struct CGPoint { double x0; double x1; })offset annotationCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate completionHandler:(id /* block */)handler;
- (id)annotationContainer:(id)container requestAddingClusterForAnnotationViews:(id)views;
- (void)annotationContainer:(id)container requestRemovingClusterAnnotationView:(id)view updateVisible:(BOOL)visible;
- (void)annotationContainerWillAnimateBubble:(id)bubble;
- (void)annotationContainerDidAnimateBubble:(id)bubble;
- (void)annotationContainerDidFinishMapsTransitionExpanding:(id)expanding;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })annotationContainerVisibleRect:(id)rect;
- (BOOL)annotationContainer:(id)container isAnnotationView:(id)view validForDisplayAtPoint:(struct CGPoint { double x0; double x1; })point;
- (double)annotationContainer:(id)container pinDropDistanceForCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate maxDistance:(double *)distance;
- (void)annotationContainerWillDropPins:(id)pins;
- (void)annotationContainerDidDropPins:(id)pins;
- (void)annotationContainer:(id)container annotationView:(id)view calloutAccessoryControlTapped:(id)tapped;
- (void)annotationContainer:(id)container calloutPrimaryActionTriggeredForAnnotationView:(id)view;
- (void)calloutDidAppearForAnnotationView:(id)view inContainer:(id)container;
- (void)_displayWorld;
- (void)goToDefaultLocation;
- (void)_performActionAsIfGoingToDefaultLocation:(id /* block */)location;
- (void)_updateFramingUsingSetRegionBlock:(id /* block */)block;
- (id)annotationsInMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect;
- (id)_annotationViews;
- (BOOL)_canSelectPOIs;
- (void)_setCanSelectPOIs:(BOOL)pois;
- (BOOL)_canSelectAllLabels;
- (void)_setCanSelectAllLabels:(BOOL)labels;
- (id)_selectedLabelMarker;
- (void)_deselectLabelMarkerAnimated:(BOOL)animated;
- (void)_selectLabelMarker:(id)marker animated:(BOOL)animated;
- (BOOL)_isHybridMap;
- (id)_labelMarkerAtPoint:(struct CGPoint { double x0; double x1; })point;
- (id)_labelMarkerForCustomFeatureAnnotation:(id)annotation;
- (void)navigationCameraReturnToPuck;
- (void)_selectAnnotation:(id)annotation animated:(BOOL)animated;
- (void)selectAnnotation:(id)annotation animated:(BOOL)animated;
- (void)deselectAnnotation:(id)annotation animated:(BOOL)animated;
- (void)_addAnnotation:(id)annotation allowAnimation:(BOOL)animation;
- (void)addAnnotation:(id)annotation;
- (void)addAnnotations:(id)annotations;
- (void)_addAnnotations:(id)annotations allowAnimation:(BOOL)animation;
- (void)removeAnnotation:(id)annotation;
- (void)removeAnnotations:(id)annotations;
- (void)_replaceAnnotation:(id)annotation withAnnotation:(id)annotation;
- (void)_addViewsForAnnotations:(id)annotations;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)identifier;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)identifier forAnnotation:(id)annotation;
- (void)registerClass:(Class)class forAnnotationViewWithReuseIdentifier:(id)identifier;
- (id)viewForAnnotation:(id)annotation;
- (BOOL)_allowsPopoverWhenNotInWindow;
- (void)_setAllowsPopoverWhenNotInWindow:(BOOL)window;
- (struct CGPoint { double x0; double x1; })convertCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate toPointToView:(id)view;
- (struct CLLocationCoordinate2D { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toCoordinateFromView:(id)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertRegion:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })region toRectToView:(id)view;
- (struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toRegionFromView:(id)view;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })convertRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect toMapRectFromView:(id)view;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })convertMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect toRectToView:(id)view;
- (void)_enter3DMode;
- (void)_exit3DMode;
- (void)_enterARMode;
- (void)_enterARModeWithLocation:(id)location;
- (void)_exitARMode;
- (BOOL)_isPitched;
- (BOOL)_canEnter3DMode;
- (BOOL)_canEnter3DModeFlyover;
- (BOOL)_canEnterNightMode;
- (BOOL)_isShowingCuratedElevatedGround;
- (struct { BOOL x0; double x1; BOOL x2; BOOL x3; })_userTrackingBehavior;
- (void)_setUserTrackingBehavior:(struct { BOOL x0; double x1; BOOL x2; BOOL x3; })behavior;
- (int)_applicationState;
- (void)_setApplicationState:(int)state;
- (long long)_displayedSearchResultsType;
- (void)_setDisplayedSearchResultsType:(long long)type;
- (void)_addVectorOverlay:(id)overlay;
- (void)_removeVectorOverlay:(id)overlay;
- (void)_addPersistentVectorOverlay:(id)overlay;
- (void)_removePersistentVectorOverlay:(id)overlay;
- (void)_willChangeStatusBarFrame:(id)frame;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)didMoveToSuperview;
- (void)setHidden:(BOOL)hidden;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect forViewPrintFormatter:(id)formatter;
- (void)_startZoomForExternalGesture;
- (void)_endZoomForExternalGesture;
- (BOOL)_mustWaitUntilSized;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate animated:(BOOL)animated;
- (void)setRegion:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })region animated:(BOOL)animated;
- (struct { double x0; struct CLLocationCoordinate2D { double x0; double x1; } x1; })_zoomRegionForMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect edgePadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })padding maxZoomLevel:(long long)level minZoomLevel:(long long)level;
- (struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })regionThatFits:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })fits;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })mapRectThatFits:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })fits edgePadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })padding;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })mapRectThatFits:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })fits;
- (void)_setZoomScale:(double)scale centerMapPoint:(struct { double x0; double x1; })point duration:(double)duration animated:(BOOL)animated;
- (void)_setZoomScale:(double)scale centerMapPoint:(struct { double x0; double x1; })point duration:(double)duration timingFunction:(id)function animated:(BOOL)animated;
- (void)_setZoomScale:(double)scale centerCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate duration:(double)duration animated:(BOOL)animated;
- (void)_setZoomScale:(double)scale centerCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate duration:(double)duration timingFunction:(id)function animated:(BOOL)animated;
- (void)_goToMapRegion:(id)region duration:(double)duration animated:(BOOL)animated;
- (void)_goToMapRegion:(id)region duration:(double)duration animated:(BOOL)animated completionHandler:(id /* block */)handler;
- (void)_goToMapRegion:(id)region duration:(double)duration timingFunction:(id)function animated:(BOOL)animated completionHandler:(id /* block */)handler;
- (void)setVisibleMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect edgePadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })padding animated:(BOOL)animated;
- (void)_setVisibleMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect animated:(BOOL)animated completionHandler:(id /* block */)handler;
- (void)_setVisibleMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect duration:(double)duration completionHandler:(id /* block */)handler;
- (void)setVisibleMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect animated:(BOOL)animated;
- (double)_defaultAnimationDurationForMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect edgePadding:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })padding;
- (double)_panDurationFromPoint:(struct CGPoint { double x0; double x1; })point toPoint:(struct CGPoint { double x0; double x1; })point;
- (double)_zoomLevelForMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect includeAccessoryPadding:(BOOL)padding;
- (double)_zoomLevelForRegion:(struct { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct { double x0; double x1; } x1; })region includeAccessoryPadding:(BOOL)padding;
- (id)_mapRegionWithCenterCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate zoomScale:(double)scale;
- (double)_zoomScaleForMapRegion:(id)region;
- (double)_goToCenterCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate zoomLevel:(double)level animated:(BOOL)animated;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate zoomLevel:(double)level animated:(BOOL)animated;
- (void)_updateInsetsWithForce:(BOOL)force;
- (void)_updateInsets;
- (void)layoutMarginsDidChange;
- (void)setLayoutMargins:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })margins;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)safeAreaInsetsDidChange;
- (void)_clearLayoutGuides;
- (void)updateLayoutGuides;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_labelEdgeInsets;
- (void)_setLabelEdgeInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_labelEdgeWidths;
- (void)_setLabelEdgeWidths:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })widths;
- (id)_edgeInsetsLayoutGuide;
- (void)_suspendPropagatingEdgeInsets;
- (void)_resumePropagatingEdgeInsets;
- (void)_setEdgeInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets explicit:(BOOL)explicit;
- (void)_setEdgeInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (id)venueWithID:(unsigned long long)id;
- (BOOL)_isDimmingOutsideVenueWithFocus;
- (double)zoomToFocusVenue:(id)venue;
- (double)zoomToFocusVenueBuilding:(id)building;
- (void)setDisplayedFloorOrdinal:(short)ordinal forBuildingsInVenue:(id)venue;
- (void)resetDisplayedFloorOrdinalForAllVenues;
- (short)displayedFloorOrdinalForBuildingsInVenue:(id)venue;
- (BOOL)displayedFloorIsDefaultForBuildingsInVenue:(id)venue;
- (short)defaultFloorForBuildingsInVenue:(id)venue;
- (void)setSelectedVenuePoiFeatureId:(unsigned long long)id;
- (void)deselectVenuePoiFeatureId;
- (void)setSelectedTrailId:(unsigned long long)id;
- (void)setSelectedTrailWithId:(unsigned long long)id name:(id)name locale:(id)locale;
- (void)deselectTrails;
- (void)requestHikingToolTipRegionIDForLocation:(struct CLLocationCoordinate2D { double x0; double x1; })location;
- (void)_prepareFlyoverAnimation:(id)animation completion:(id /* block */)completion;
- (void)_performFlyoverAnimation:(id)animation;
- (void)_performFlyoverAnimation:(id)animation animateToStart:(BOOL)start;
- (void)_startFlyoverTourAnimation:(unsigned long long)animation duration:(double)duration completion:(id /* block */)completion;
- (void)_stopFlyoverAnimation;
- (void)_pauseFlyoverAnimation;
- (void)_resumeFlyoverAnimation;
- (void)setFlyoverMode:(int)mode;
- (void)mapLayerWillEnterAR:(id)ar;
- (void)mapLayerDidEnterAR:(id)ar;
- (void)mapLayerDidExitAR:(id)ar;
- (void)mapLayer:(id)layer didEncounterARError:(id)arerror;
- (void)mapLayer:(id)layer arTrackingStateDidChange:(unsigned long long)change reason:(unsigned long long)reason;
- (void)mapLayer:(id)layer arSessionWasInterrupted:(unsigned long long)interrupted;
- (void)mapLayer:(id)layer puckLocationTracingEvent:(id)event;
- (void)mapLayerARSessionInterruptionEnded:(id)ended;
- (void)_addAnnotationsCustomFeatureStoreIfNeeded;
- (void)addAnnotationRepresentation:(id)representation allowAnimation:(BOOL)animation;
- (void)removeAnnotationRepresentation:(id)representation;
- (void)selectAnnotationRepresentation:(id)representation animated:(BOOL)animated;
- (void)deselectAnnotationRepresentation:(id)representation animated:(BOOL)animated;
- (void)moveAnnotationRepresentation:(id)representation fromCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate animated:(BOOL)animated duration:(double)duration;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })_mapRectWithFraction:(double)fraction ofVisible:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })visible;
- (id /* block */)annotationRectTest;
- (id /* block */)annotationCoordinateTest;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (void)annotationManager:(id)manager didAddAnnotationRepresentations:(id)representations;
- (void)annotationManager:(id)manager didRemoveAnnotationRepresentations:(id)representations;
- (void)annotationManagerDidChangeVisibleAnnotationRepresentations:(id)representations;
- (id)annotationManager:(id)manager representationForAnnotation:(id)annotation;
- (void)annotationManager:(id)manager didSelectAnnotationRepresentation:(id)representation;
- (BOOL)annotationManager:(id)manager shouldAnimateDeselectionOfAnnotation:(id)annotation forSelectionOfAnnotation:(id)annotation;
- (BOOL)annotationManager:(id)manager canSelectAnnotationRepresentation:(id)representation;
- (void)annotationManager:(id)manager willDeselectAnnotationRepresentation:(id)representation;
- (void)annotationManager:(id)manager didDeselectAnnotationRepresentation:(id)representation;
- (void)setCamera:(id)camera animated:(BOOL)animated;
- (void)setCamera:(id)camera animated:(BOOL)animated completionHandler:(id /* block */)handler;
- (void)setCamera:(id)camera duration:(double)duration springMass:(float)mass springStiffness:(float)stiffness springDamping:(float)damping springVelocity:(float)velocity;
- (void)setCamera:(id)camera duration:(double)duration springMass:(float)mass springStiffness:(float)stiffness springDamping:(float)damping springVelocity:(float)velocity completionHandler:(id /* block */)handler;
- (void)setCamera:(id)camera springMass:(float)mass springStiffness:(float)stiffness springDamping:(float)damping springVelocity:(float)velocity;
- (void)setCameraZoomRange:(id)range animated:(BOOL)animated;
- (void)setCameraBoundary:(id)boundary animated:(BOOL)animated;
- (void)startLinearZoomIn:(BOOL)in;
- (void)stopZoomingWithInertia;
- (void)_zoomWithAmount:(double)amount;
- (void)_zoomWithAmount:(double)amount completionHandler:(id /* block */)handler;
- (void)_zoomIn;
- (void)_zoomInWithCompletionHandler:(id /* block */)handler;
- (void)_zoomOut;
- (void)_zoomOutWithCompletionHandler:(id /* block */)handler;
- (void)_startPanningAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)_updatePanWithTranslation:(struct CGPoint { double x0; double x1; })translation;
- (void)_stopPanningAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)rotationFilter:(id)filter didChangeSnapping:(BOOL)snapping;
- (void)setVehicleState:(struct { BOOL x0; })state;
- (void)_clearGesturesAndAnimations;
- (int)currentUITargetForAnalytics;
- (int)currentMapViewTargetForAnalytics;
- (void)_insertSubviewBelowAnnotationContainerView:(id)view;
- (id)_locationManager;
- (id)_calloutShowAnimationGroup;
- (struct { long long x0; long long x1; long long x2; long long x3; long long x4; long long x5; BOOL x6; })_cartographicConfiguration;
- (BOOL)_isAttributionBadgeClickable;
- (void)_setAttributionBadgeClickable:(BOOL)clickable;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_attributionInsets;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_compassInsets;
- (long long)_interactionMode;
- (void)_setInteractionMode:(long long)mode;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_edgeInsets;
- (unsigned long long)_currentFlyoverAnimationID;
- (void)_setCurrentFlyoverAnimationID:(unsigned long long)id;
- (BOOL)_showsLocompass;
- (unsigned long long)_userTrackingButtonBackgroundStyle;
- (unsigned long long)_pitchButtonBackgroundStyle;
- (void)_setPitchButtonBackgroundStyle:(unsigned long long)style;
- (unsigned long long)_userTrackingControlSize;
- (unsigned long long)_pitchButtonControlSize;
- (void)_setPitchButtonControlSize:(unsigned long long)size;
- (unsigned long long)_scaleControlSize;
- (void)_setScaleControlSize:(unsigned long long)size;
- (unsigned long long)_controlBackgroundStyle;
- (unsigned long long)_controlSize;
- (BOOL)_shouldCenterAlignAttributionBadge;
- (long long)_attributionLinkDisplayStyle;
- (BOOL)_isCompassSuppressedForFloorPicker;
- (id /* block */)_labelsDidLayoutCallback;
- (void)_setLabelsDidLayoutCallback:(id /* block */)callback;
- (long long)_offlineRegionVisibility;
- (void)_setOfflineRegionVisibility:(long long)visibility;
@end

#endif /* MKMapView_h */
