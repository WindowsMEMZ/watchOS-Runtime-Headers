//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2417.42.9.28.9
//
#ifndef MKStandardCalloutView_h
#define MKStandardCalloutView_h
@import Foundation;

#include "MKCalloutView.h"
#include "MKSmallCalloutView.h"
#include "_MKCalloutLayer.h"
#include "_MKStandardCalloutMaskView.h"

@class UIView, UIVisualEffectView;

@interface MKStandardCalloutView : MKCalloutView {
  /* instance variables */
  struct { struct CGPoint { double x; double y; } origin; struct CGPoint { double x; double y; } offset; long long position; struct CGPoint { double x; double y; } desiredPoint; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } desiredBounds; } _anchor;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } _frame;
  struct { unsigned int x :1 animated; unsigned int x :1 didMoveCalled; unsigned int x :1 hasPendingAnimatedLayout; unsigned int x :1 needsCalloutUpdate; unsigned int x :1 isObserving; unsigned int x :26 reserved; } _flags;
  BOOL _animatingMapToShow;
  BOOL _dismissed;
  _MKStandardCalloutMaskView *_maskView;
  _MKCalloutLayer *_maskLayer;
  _MKCalloutLayer *_contentStrokeLayer;
  UIView *_contentView;
  MKSmallCalloutView *_calloutView;
  UIVisualEffectView *_backdropView;
  long long _style;
  struct { double margin; double cornerRadius; double arrowBase; double arrowHeight; BOOL useRadialSmoothing; union { struct { double arrowBaseRadius; double arrowRadius; } radialSmoothing; struct { double arrowSmoothing; double arrowPointFactor; } nonRadialSmoothing; } x0; BOOL alignDetailViewBaseline; BOOL scaleVerticalPaddingForDynamicType; struct UIEdgeInsets { double top; double left; double bottom; double right; } padding; } _metrics;
}

@property (nonatomic) BOOL hideTitle;

/* class methods */
+ (Class)layerClass;
+ (double)defaultHeight;

/* instance methods */
- (void)dealloc;
- (void)setLeftView:(id)view backgroundColor:(id)color animated:(BOOL)animated;
- (void)setRightView:(id)view animated:(BOOL)animated;
- (void)setDetailView:(id)view animated:(BOOL)animated;
- (void)setSubtitle:(id)subtitle animated:(BOOL)animated;
- (id)initWithAnnotationView:(id)view;
- (void)setTitle:(id)title;
- (void)setSubtitle:(id)subtitle;
- (id)subtitle;
- (void)setOffset:(struct CGPoint { double x0; double x1; })offset;
- (struct CGPoint { double x0; double x1; })offset;
- (struct CGPoint { double x0; double x1; })anchorPoint;
- (void)_calculateActualAnchorPoint:(struct CGPoint { double x0; double x1; } *)point frame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)frame forDesiredAnchorPoint:(struct CGPoint { double x0; double x1; })point boundaryRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (struct CGPoint { double x0; double x1; })_originForScale:(double)scale;
- (void)_setOriginForScale:(double)scale;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)_frameDidChange;
- (void)forceAnchorPosition:(long long)position;
- (void)didMoveToWindow;
- (void)updateConstraints;
- (void)_layoutSubviews:(BOOL)subviews;
- (void)_runBounceAnimationWithCompletionBlock:(id /* block */)block;
- (long long)anchorPosition;
- (BOOL)isLeftAnchored;
- (void)annotationViewFrameDidChange;
- (void)_showFromAnchorPoint:(struct CGPoint { double x0; double x1; })point boundaryRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect animate:(BOOL)animate completionBlock:(id /* block */)block;
- (void)animationDidStop:(id)stop finished:(id)finished context:(void *)context;
- (void)_markDidMoveCalled;
- (void)completeBounceAnimation;
- (BOOL)hasPendingVisibility;
- (long long)_calculateAnchorPosition:(struct CGPoint { double x0; double x1; } *)position visibleRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)rect;
- (void)showAnimated:(BOOL)animated completionBlock:(id /* block */)block;
- (void)dismissAnimated:(BOOL)animated completionBlock:(id /* block */)block;
- (void)_calloutAccessoryControlTapped:(id)tapped;
- (void)_addAccessoryTargetForView:(id)view;
- (void)_removeAccessoryTargetForView:(id)view;
- (void)_updateCallout;
- (void)_updateCalloutAnimated:(BOOL)animated;
- (void)_setNeedsCalloutUpdate;
- (void)_startObservingAnnotationView:(id)view;
- (void)_stopObservingAnnotationView:(id)view;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)_adaptToUserInterfaceStyle;
- (void)traitEnvironment:(id)environment didChangeTraitCollection:(id)collection;
@end

#endif /* MKStandardCalloutView_h */
