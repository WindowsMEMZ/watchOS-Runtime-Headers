//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2417.42.9.28.9
//
#ifndef MKPolygon_h
#define MKPolygon_h
@import Foundation;

#include "MKMultiPoint.h"
#include "MKGeoJSONObject-Protocol.h"
#include "MKOverlay-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@class NSArray, NSString;

@interface MKPolygon : MKMultiPoint<MKGeoJSONObject, NSSecureCoding, MKOverlay> {
  /* instance variables */
  struct CLLocationCoordinate2D { double latitude; double longitude; } _centroid;
  BOOL _isDefinitelyConvex;
  struct GEOOnce_s { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; BOOL didRun; } _determinedSimple;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) BOOL _isDefinitelyConvex;
@property (readonly, nonatomic) BOOL simple;
@property (readonly) NSArray *interiorPolygons;
@property (readonly, nonatomic) struct CLLocationCoordinate2D { double x0; double x1; } coordinate;
@property (readonly, nonatomic) struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; } boundingMapRect;
@property (readonly, copy, nonatomic) NSString *title;
@property (readonly, copy, nonatomic) NSString *subtitle;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)polygonWithPoints:(const struct { double x0; double x1; } *)points count:(unsigned long long)count;
+ (id)polygonWithPoints:(const struct { double x0; double x1; } *)points count:(unsigned long long)count interiorPolygons:(id)polygons;
+ (id)polygonWithCoordinates:(const struct CLLocationCoordinate2D { double x0; double x1; } *)coordinates count:(unsigned long long)count;
+ (id)polygonWithCoordinates:(const struct CLLocationCoordinate2D { double x0; double x1; } *)coordinates count:(unsigned long long)count interiorPolygons:(id)polygons;
+ (id)polygonEnclosingMapPoints:(struct { double x0; double x1; } *)points count:(unsigned long long)count;
+ (id)_polygonWithMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)_initWithGeoJSONObject:(id)jsonobject error:(id *)error;
- (id)_initWithGeoJSONCoordinateArrays:(id)arrays error:(id *)error;
- (id)_initWithPointsNoCopy:(struct { double x0; double x1; } *)copy count:(unsigned long long)count interiorPolygons:(id)polygons;
- (BOOL)intersectsMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (void)_calculateBounds;
- (BOOL)_isSimple;
- (void)_determineSimple;
- (BOOL)_determineSelfIntersecting;
@end

#endif /* MKPolygon_h */
