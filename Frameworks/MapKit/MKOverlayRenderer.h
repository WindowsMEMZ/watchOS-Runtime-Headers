//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2417.42.9.28.9
//
#ifndef MKOverlayRenderer_h
#define MKOverlayRenderer_h
@import Foundation;

#include "MKMapView.h"
#include "MKOverlay-Protocol.h"

@class NSMutableDictionary, VKOverlay;
@protocol OS_dispatch_queue;

@interface MKOverlayRenderer : NSObject {
  /* instance variables */
  struct { struct { double x; double y; } origin; struct { double width; double height; } size; } _boundingMapRect;
  VKOverlay *_renderer;
  NSObject<OS_dispatch_queue> *_isolationQueue;
  MKMapView *_mapView;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _runningAnimationsLock;
  NSMutableDictionary *_runningAnimations;
}

@property (nonatomic) long long extendedBlendMode;
@property (readonly, nonatomic) NSObject<MKOverlay> *overlay;
@property double alpha;
@property (readonly) double contentScaleFactor;
@property (nonatomic) int blendMode;

/* instance methods */
- (void)dealloc;
- (id)init;
- (id)initWithOverlay:(id)overlay;
- (void)_setExtendedBlendMode:(long long)mode;
- (long long)_extendedBlendMode;
- (void)set_renderer:(id)set_renderer;
- (struct { double x0; double x1; })_originMapPoint;
- (id)_mk_overlayView;
- (id)_mk_overlayLayer;
- (void)_animateIfNecessaryForKey:(id)key withStepHandler:(id /* block */)handler;
- (void)_decodePropertiesWithCoder:(id)coder;
- (void)_encodePropertiesWithCoder:(id)coder;
- (id)_mapView;
- (void)_setMapView:(id)view;
- (struct CGPoint { double x0; double x1; })pointForMapPoint:(struct { double x0; double x1; })point;
- (struct { double x0; double x1; })mapPointForPoint:(struct CGPoint { double x0; double x1; })point;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rectForMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })mapRectForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect;
- (void)setNeedsDisplayInMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect zoomScale:(double)scale;
- (void)set_boundingMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect;
- (struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })_boundingMapRect;
- (id)_renderer;
- (BOOL)_mayExtendOutsideBounds;
- (void)_forEachMapRectForKey:(const struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; } *)key withContext:(struct CGContext *)context performBlock:(id /* block */)block;
- (BOOL)overlay:(id)overlay canPossiblyDrawKey:(const struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; } *)key;
- (BOOL)overlay:(id)overlay canDrawKey:(const struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; } *)key;
- (void)overlay:(id)overlay drawKey:(const struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; } *)key inContext:(struct CGContext *)context;
- (void)overlay:(id)overlay drawKey:(const struct { unsigned int x0; unsigned int x1; unsigned int x2; unsigned int x3; } *)key withData:(id)data inIOSurface:(struct __IOSurface *)iosurface;
- (BOOL)canDrawMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect zoomScale:(double)scale;
- (BOOL)_canPossiblyDrawMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect zoomScale:(double)scale;
- (void)drawMapRect:(struct { struct { double x0; double x1; } x0; struct { double x0; double x1; } x1; })rect zoomScale:(double)scale inContext:(struct CGContext *)context;
- (BOOL)overlayCanProvideVectorData:(id)data;
- (id)vectorDataForOverlay:(id)overlay;
- (BOOL)overlayCanProvideRasterTileData:(id)data;
- (id)rasterTileProviderForOverlay:(id)overlay;
- (BOOL)overlayCanProvideCustomTileData:(id)data;
- (BOOL)areOverlayResourcesRequired:(id)required;
- (BOOL)shouldUseMetalTexture:(id)texture;
- (id)customTileProviderForOverlay:(id)overlay;
- (void)_updateRenderColors;
@end

#endif /* MKOverlayRenderer_h */
