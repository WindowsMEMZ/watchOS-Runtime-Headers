//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2417.42.9.28.9
//
#ifndef MKBasicMapView_h
#define MKBasicMapView_h
@import Foundation;

#include "UIView.h"
#include "GEOResourceManifestTileGroupObserver-Protocol.h"

@class NSString, UIView, VKMapView;

@interface MKBasicMapView : UIView<GEOResourceManifestTileGroupObserver> {
  /* instance variables */
  UIView *_hostView;
  long long _changingViewSizeCount;
}

@property (readonly, nonatomic) VKMapView *mapView;
@property (readonly, nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } edgeInsets;
@property (readonly, nonatomic) BOOL inBackground;
@property (nonatomic) BOOL rendersInBackground;
@property (nonatomic) BOOL hasRenderedSomething;
@property (nonatomic) double mapModeStartTime;
@property (nonatomic) double trafficStartTime;
@property (readonly, nonatomic) BOOL changingViewSize;
@property (nonatomic) BOOL inactive;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (BOOL)isChangingViewSize;
- (void)_beginChangingViewSize;
- (void)_finishChangingViewSize;
- (void)_updateBackgroundState;
- (void)_updateBackgroundState:(long long)state;
- (void)_didEnterBackground;
- (void)_finishedSnapshot:(id)snapshot;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame andGlobe:(BOOL)globe shouldRasterize:(BOOL)rasterize;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame andGlobe:(BOOL)globe shouldRasterize:(BOOL)rasterize allowsAntialiasing:(BOOL)antialiasing;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame andGlobe:(BOOL)globe shouldRasterize:(BOOL)rasterize allowsAntialiasing:(BOOL)antialiasing carDisplayType:(long long)type;
- (void)dealloc;
- (void)addCalloutSubview:(id)subview;
- (struct CGSize { double x0; double x1; })calloutContainerCanvasSize;
- (double)calloutContainerCanvasScale;
- (void)_updateForCurrentLocale;
- (void)_animateCanvasForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })bounds;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (struct CLLocationCoordinate2D { double x0; double x1; })convertPoint:(struct CGPoint { double x0; double x1; })point toCoordinateFromView:(id)view;
- (struct CGPoint { double x0; double x1; })convertCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate toPointToView:(id)view;
- (struct CGPoint { double x0; double x1; })convertCoordinate:(struct CLLocationCoordinate2D { double x0; double x1; })coordinate toCameraModelPointToView:(id)view;
- (BOOL)isPointValidForGesturing:(struct CGPoint { double x0; double x1; })gesturing;
- (void)_updateMapViewHidden;
- (void)_updateForCurrentScreen;
- (void)_registerSceneNotifications;
- (void)_sceneWillEnterForeground:(id)foreground;
- (void)_sceneDidEnterBackground:(id)background;
- (void)_unregisterSceneNotifications;
- (void)willMoveToWindow:(id)window;
- (void)didMoveToWindow;
- (void)setHidden:(BOOL)hidden;
- (void)updateStatsForEnablingTraffic:(BOOL)traffic;
- (void)_updateStatsForTrafficEnabledTime:(BOOL)time;
- (void)updateStatsForTrafficEnabledTime;
- (void)updateStatsForSwitchingToMapType:(int)type;
- (void)updateStatsForTimeSpentInCurrentMapTypeIsShowingFlyover:(BOOL)flyover;
- (void)_updateStatsForTimeSpentInCurrentMapTypeIsShowingFlyover:(BOOL)flyover ignoreIfViewInWindow:(BOOL)window;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)group;
- (BOOL)isInBackground;
@end

#endif /* MKBasicMapView_h */
