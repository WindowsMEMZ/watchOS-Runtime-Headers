//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 617.1.17.12.4
//
#ifndef _SFBrowserContentViewController_h
#define _SFBrowserContentViewController_h
@import Foundation;

#include "UIViewController.h"
#include "SFBrowserDocumentTrackerInfo.h"
#include "SFBrowserKeyCommandSafariViewControllerMethods-Protocol.h"
#include "SFBrowserViewDelegate-Protocol.h"
#include "SFContentBlockerManager.h"
#include "SFNanoDomainContainerView.h"
#include "SFNanoMenuViewController.h"
#include "SFReaderContext-Protocol.h"
#include "SFReaderEnabledWebViewController.h"
#include "SFReaderEnabledWebViewControllerDelegate-Protocol.h"
#include "SFReaderViewController.h"
#include "SFReaderViewControllerDelegate-Protocol.h"
#include "SFSafariViewControllerConfiguration.h"
#include "UIGestureRecognizerDelegate-Protocol.h"
#include "UIScrollViewDelegate-Protocol.h"
#include "WBSFluidProgressControllerWindowDelegate-Protocol.h"
#include "WBSFluidProgressStateSource-Protocol.h"
#include "_SFApplicationExtensionActivity.h"
#include "_SFBarManager.h"
#include "_SFBarManagerDelegate-Protocol.h"
#include "_SFBrowserContentController-Protocol.h"
#include "_SFBrowserContentViewControllerDelegate-Protocol.h"
#include "_SFBrowserDocument-Protocol.h"
#include "_SFBrowserView.h"
#include "_SFBrowserViewProviding-Protocol.h"
#include "_SFCalendarEventDetector.h"
#include "_SFDownload.h"
#include "_SFDownloadDelegate-Protocol.h"
#include "_SFDynamicBarAnimator.h"
#include "_SFDynamicBarAnimatorDelegate-Protocol.h"
#include "_SFFindOnPageView.h"
#include "_SFFindOnPageViewDelegate-Protocol.h"
#include "_SFMailContentProvider.h"
#include "_SFMailContentProviderDataSource-Protocol.h"
#include "_SFNavigationBar.h"
#include "_SFNavigationBarDelegate-Protocol.h"
#include "_SFNavigationUtilitiesManager.h"
#include "_SFPageFormatMenuController.h"
#include "_SFPageLoadErrorController.h"
#include "_SFPageLoadErrorControllerDelegate-Protocol.h"
#include "_SFPerSitePreferencesVendor.h"
#include "_SFPrintController.h"
#include "_SFPrintControllerDelegate-Protocol.h"
#include "_SFReloadOptionsController.h"
#include "_SFSafariSharingExtensionController.h"
#include "_SFSecIdentityPreferencesController.h"
#include "_SFSingleBookmarkNavigationControllerDelegate-Protocol.h"
#include "_SFTelephonyNavigationMitigationPolicy.h"
#include "_SFToolbar.h"

@class NSArray, NSError, NSMutableArray, NSString, NSTimer, NSURL, NSUUID, SFNavigationBarItem, SFPinnableBanner, UIColor, UIPanGestureRecognizer, UITapGestureRecognizer, UIViewController, WBSAllowedLegacyTLSHostManager, WBSAutoFillQuirksManager, WBSFluidProgressController, WBSFluidProgressState, WBSURLSpoofingMitigator, WBSWellKnownURLResponseCodeReliabilityChecker, WKBackForwardListItem, WKPreferences, WKWebView, _WKActivatedElementInfo, _WKUserInitiatedAction;

@interface _SFBrowserContentViewController : UIViewController<SFBrowserViewDelegate, SFReaderEnabledWebViewControllerDelegate, SFReaderViewControllerDelegate, UIGestureRecognizerDelegate, UIScrollViewDelegate, WBSFluidProgressControllerWindowDelegate, WBSFluidProgressStateSource, _SFBarManagerDelegate, _SFDownloadDelegate, _SFDynamicBarAnimatorDelegate, _SFMailContentProviderDataSource, _SFNavigationBarDelegate, _SFPageLoadErrorControllerDelegate, _SFPrintControllerDelegate, _SFSingleBookmarkNavigationControllerDelegate, _SFFindOnPageViewDelegate, SFBrowserKeyCommandSafariViewControllerMethods, _SFBrowserContentController, _SFBrowserDocument, _SFBrowserViewProviding> {
  /* instance variables */
  SFNanoMenuViewController *_nanoMenuViewController;
  NSTimer *_unresponsiveWebProcessTimer;
  id /* block */ _unresponsiveWebProcessBlock;
  SFReaderViewController *_readerViewController;
  WKBackForwardListItem *_lastBackFowardListItemOnWhichReaderWasActivated;
  unsigned long long _lastReaderDeactivationMode;
  _SFNavigationBar *_navigationBar;
  _SFToolbar *_bottomToolbar;
  _SFMailContentProvider *_cachedMailContentProvider;
  _WKUserInitiatedAction *_lastUserInitiatedAction;
  BOOL _canOpenDownloadForInitialLoad;
  unsigned long long _externalAppRedirectState;
  _SFBarManager *_barManager;
  SFNanoDomainContainerView *_nanoDomainContainerView;
  NSTimer *_updateContinuityTimer;
  _SFDynamicBarAnimator *_dynamicBarAnimator;
  BOOL _scrollViewIsDragging;
  unsigned long long _cachedMediaStateIcon;
  BOOL _didSetUpInterface;
  SFNavigationBarItem *_navigationBarItem;
  WBSURLSpoofingMitigator *_URLSpoofingMitigator;
  WBSFluidProgressState *_fluidProgressState;
  WBSFluidProgressController *_fluidProgressController;
  UITapGestureRecognizer *_showBarsFromBottomBarRecognizer;
  BOOL _pageScrollsWithBottomBar;
  BOOL _interfaceFillsScreen;
  BOOL _usesNarrowLayout;
  _SFPageLoadErrorController *_pageLoadErrorController;
  _SFCalendarEventDetector *_calendarEventDetector;
  _SFDownload *_activeDownload;
  BOOL _showingCrashBanner;
  double _crashBannerDraggingOffset;
  BOOL _showingPinnableBanner;
  double _pinnableBannerDraggingOffset;
  SFPinnableBanner *_pinnableBannerPendingFirstPaint;
  BOOL _shouldDismissReaderInReponseToSameDocumentNavigation;
  BOOL _EVOrganizationNameIsValid;
  NSString *_EVOrganizationName;
  BOOL _isShowingHTTPAuthenticationDialog;
  BOOL _isSuppressingPreviewProgressAnimation;
  _SFSafariSharingExtensionController *_sharingExtensionController;
  BOOL _didReceivePolicyForInitialLoad;
  long long _customPreferredStatusBarStyle;
  BOOL _isDisplayingTelephonyPrompt;
  _SFTelephonyNavigationMitigationPolicy *_telephonyNavigationPolicy;
  _SFPrintController *_printController;
  _SFSecIdentityPreferencesController *_secIdentityPreferencesController;
  NSURL *_urlToReloadForcingContentBlockers;
  BOOL _disableContentBlockersWhenReloading;
  BOOL _previousURLWasLoadedWithContentBlockersEnabled;
  BOOL _isNavigatingViaNormalReload;
  NSMutableArray *_webViewControllers;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } _verticalScrollIndicatorBaseInsets;
  struct UIEdgeInsets { double top; double left; double bottom; double right; } _horizontalScrollIndicatorBaseInsets;
  BOOL _autoHidingHomeIndicatorPermitted;
  BOOL _prefersHomeIndicatorAutoHidden;
  BOOL _shouldAutoHideHomeIndicator;
  NSURL *_originalRequestURL;
  _SFDownload *_downloadToShowInQuickLook;
  NSString *_suggestedFilenameForNextCommit;
  BOOL _quickLookDocumentCheckCompleted;
  _SFApplicationExtensionActivity *_customButtonUIActivity;
  BOOL _customActivityButtonIsValid;
  double _nanoScrollDragStartOffset;
  _SFPageFormatMenuController *_pageFormatMenuController;
  UIPanGestureRecognizer *_hideNavigationBarGestureRecognizer;
  NSError *_lastLoadErrorForFormatMenu;
  long long _concurrentNavigationActionPolicyDecisions;
  BOOL _loadWasUserDriven;
  BOOL _webViewIsInFullScreen;
  id /* block */ _pendingNavigationActionDueToExternalSchemePromptHandler;
  BOOL _gestureRequiresGoingBackToOwnerWebView;
  WKBackForwardListItem *_backForwardListItemForCurrentAppLinkBannerCheck;
  WBSAllowedLegacyTLSHostManager *_cachedLegacyTLSHostManager;
  WBSAutoFillQuirksManager *_autoFillQuirksManager;
  WBSWellKnownURLResponseCodeReliabilityChecker *_wellKnownURLResponseCodeReliabilityChecker;
  struct CGSize { double width; double height; } _lastSizeUsedForBrowserViewLayout;
  unsigned long long _sizeTransitionCount;
  NSURL *_urlToReloadForAdvancedPrivateBrowsingPrivacyProtections;
  BOOL _disableAdvancedPrivateBrowsingPrivacyProtectionsWhenReloading;
  BOOL _previousURLWasLoadedWithAdvancedPrivateBrowsingPrivacyProtections;
  BOOL _browsingModeDidSupportAdvancedPrivacyProtectionsAtPreviousNavigation;
  NSURL *_urlForPendingNavigationToFallbackURLForWellKnownChangePasswordURL;
}

@property (readonly, nonatomic) SFReaderEnabledWebViewController *rootWebViewController;
@property (readonly, nonatomic) SFReaderEnabledWebViewController *webViewController;
@property (readonly, nonatomic) WKPreferences *wkPreferences;
@property (copy, nonatomic) NSArray *linkActions;
@property (retain, nonatomic) _WKActivatedElementInfo *activatedElementInfo;
@property (nonatomic) BOOL remoteSwipeGestureEnabled;
@property (retain, nonatomic) UIColor *preferredBarTintColor;
@property (retain, nonatomic) UIColor *preferredControlTintColor;
@property (nonatomic) long long hostAppModalPresentationStyle;
@property (nonatomic) long long dismissButtonStyle;
@property (copy, nonatomic) SFSafariViewControllerConfiguration *configuration;
@property (nonatomic) BOOL webViewLayoutUnderlapsStatusBar;
@property (readonly, nonatomic) BOOL canPrint;
@property (readonly, nonatomic) NSString *bundleIdentifierForProfileInstallation;
@property (readonly, nonatomic) BOOL _usesScrollToTopView;
@property (readonly, nonatomic) BOOL _isUsedForAuthentication;
@property (readonly, nonatomic) long long _persona;
@property (readonly, nonatomic) NSString *_hostAppBundleId;
@property (readonly, nonatomic) BOOL _shouldReloadImmediatelyAfterPageLoadError;
@property (nonatomic) long long safariDataSharingMode;
@property (readonly, nonatomic) BOOL didNotifyInitialLoadFinish;
@property (readonly, nonatomic) BOOL isShowingErrorPage;
@property (nonatomic) BOOL viewDidAppearInHostApp;
@property (retain, nonatomic) _SFNavigationUtilitiesManager *_navigationUtilitiesManager;
@property (weak, nonatomic) NSObject<_SFBrowserContentViewControllerDelegate> *delegate;
@property (nonatomic) long long displayMode;
@property (retain, nonatomic) _SFReloadOptionsController *reloadOptionsController;
@property (retain, nonatomic) _SFFindOnPageView *findOnPageView;
@property (readonly, nonatomic) WKWebView *webView;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSObject<_SFBrowserDocument> *activeDocument;
@property (readonly, nonatomic) BOOL showingReader;
@property (nonatomic) BOOL keepBarsMinimized;
@property (readonly, nonatomic) BOOL hasUnviewedDownloads;
@property (readonly, nonatomic) unsigned long long downloadsCount;
@property (readonly, nonatomic) UIViewController *viewControllerToPresentFrom;
@property (readonly, nonatomic) _SFPerSitePreferencesVendor *perSitePreferencesVendor;
@property (readonly, nonatomic) BOOL supportsPrivacyReport;
@property (readonly, nonatomic) BOOL hasDedicatedMediaStateButton;
@property (readonly, nonatomic) BOOL hasDedicatedDownloadsToolbarItem;
@property (readonly, nonatomic) _SFWebView *activeWebView;
@property (readonly, nonatomic) NSObject<SFReaderContext> *readerContext;
@property (readonly, nonatomic) NSURL *URLForPerSitePreferences;
@property (readonly, nonatomic) BOOL wasLoadedWithContentBlockersEnabled;
@property (readonly, nonatomic) BOOL privateBrowsingEnabled;
@property (readonly, nonatomic) BOOL wasLoadedWithAdvancedPrivateBrowsingPrivacyProtections;
@property (readonly, nonatomic) BOOL privacyReportShouldSeparateBlockedTrackers;
@property (readonly, nonatomic) BOOL canHideToolbar;
@property (readonly, nonatomic) unsigned long long mediaStateIcon;
@property (readonly, nonatomic) SFContentBlockerManager *contentBlockerManager;
@property (readonly, nonatomic) BOOL isBlockedByScreenTime;
@property (copy, nonatomic) NSUUID *uuid;
@property (readonly, nonatomic) BOOL isSecure;
@property (readonly, nonatomic) SFBrowserDocumentTrackerInfo *trackerInfo;
@property (readonly, nonatomic) _SFBrowserView *browserView;

/* class methods */
+ (id)watchWebsiteDataStoreConfiguration;
+ (void)createDefaultWebsiteDataStore;

/* instance methods */
- (id)initWithNibName:(id)name bundle:(id)bundle;
- (void)dealloc;
- (void)loadView;
- (BOOL)becomeFirstResponder;
- (BOOL)canBecomeFirstResponder;
- (BOOL)_currentlyEditingText;
- (BOOL)_onlyWantsWebAppShortcuts;
- (BOOL)canPerformAction:(SEL)action withSender:(id)sender;
- (void)presentViewController:(id)controller animated:(BOOL)animated completion:(id /* block */)completion;
- (void)_cleanUpWebViewController:(id)controller;
- (void)_setCurrentWebViewController:(id)controller;
- (void)_pushWebViewController:(id)controller;
- (void)_popWebViewController;
- (void)_invalidateWebViewControllers;
- (void)_setUpAnalyticsPersona;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)_updateBlockAllCookiesPreference;
- (id)processPoolConfiguration;
- (id)newProcessPool;
- (id)processPool;
- (id)websiteDataStoreConfiguration;
- (id)_createPersistentDataStoreWithConfiguration:(id)configuration;
- (id)websiteDataStore;
- (void)_setUpCookieStoragePolicyForDataStore:(id)store;
- (id)webViewConfiguration;
- (BOOL)isSafariRestricted;
- (void)_updateTrackerProtectionPreferences;
- (void)_initializeWebKitExperimentalFeatures;
- (void)_setUpWebViewControllerIfNeeded;
- (void)_setUpFindOnPageViewIfNeeded;
- (BOOL)_hideFindOnPage;
- (BOOL)_shouldGoBackToOwnerWebView;
- (void)_goBackToOwnerWebView;
- (void)_willBeginUserInitiatedNavigation;
- (void)_goBack;
- (void)_goForward;
- (void)_setUpReloadOptionsControllerIfNeeded;
- (void)_setUpCalendarEventDetectorIfNeeded;
- (void)_setUpTopBarAndBottomBar;
- (void)_showMenu;
- (void)didMoveToParentViewController:(id)controller;
- (void)_didLoadWebView;
- (void)viewWillAppear:(BOOL)appear;
- (void)viewDidAppear:(BOOL)appear;
- (void)viewDidDisappear:(BOOL)disappear;
- (BOOL)_isPreviewing;
- (void)decideDataSharingModeAndSetUpWebViewWithCompletionHandler:(id /* block */)handler;
- (void)_setUpInterfaceIfNeeded;
- (void)_getSafariDataSharingModeWithCompletion:(id /* block */)completion;
- (BOOL)_redirectToHostAppWithExpectedCallbackSchemeIfPossible:(id)possible;
- (void)_layOutBrowserViewForSizeTransition;
- (void)_didCompleteViewSizeTransition;
- (void)viewWillTransitionToSize:(struct CGSize { double x0; double x1; })size withTransitionCoordinator:(id)coordinator;
- (void)_updateHomeIndicatorAutoHideState;
- (BOOL)prefersHomeIndicatorAutoHidden;
- (BOOL)_safeAreaShouldAffectWebViewObscuredInsets;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })_effectiveWebViewSafeAreaInsets;
- (void)_updateWebViewLayoutSize;
- (BOOL)_isSplitScreen;
- (void)_updateWebViewShrinkToFit;
- (void)_updateCurrentScrollViewInsets;
- (void)_updateScrollIndicatorVerticalInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets horizontalInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
- (void)webViewControllerDidChangeSafeAreaInsets:(id)insets;
- (void)webViewControllerDidChangeSafeAreaShouldAffectObscuredInsets:(id)insets;
- (BOOL)_canScrollToTopInView:(id)view;
- (void)_scrollToTopFromScrollToTopView;
- (void)_updateScrollToTopView;
- (void)viewDidLayoutSubviews;
- (long long)preferredStatusBarStyle;
- (void)_updateStatusBarStyleForced:(BOOL)forced;
- (id)overrideTraitCollectionForChildViewController:(id)controller;
- (void)traitCollectionDidChange:(id)change;
- (void)_setUpToolbar;
- (BOOL)_effectiveBarCollapsingEnabled;
- (BOOL)_isPresentedAsSheet;
- (void)_updateBarTheme;
- (void)_updateUsesNarrowLayout;
- (void)_updateInterfaceFillsScreen;
- (id)_currentWebView;
- (double)_maximumHeightObscuredByBottomBar;
- (void)_updateDynamicBarGeometry;
- (double)_offsetForDynamicBarAnimator;
- (double)dynamicBarAnimator:(id)animator minimumTopBarHeightForOffset:(double)offset;
- (void)_setWebView:(id)view;
- (void)_hideReaderAnimated:(BOOL)animated deactivationMode:(unsigned long long)mode;
- (void)_showReaderAnimated:(BOOL)animated;
- (BOOL)_readerViewControllerNeedsSetUp;
- (void)_setUpReaderViewController;
- (void)_prepareForReuse;
- (void)_setShowingReader:(BOOL)reader deactivationMode:(unsigned long long)mode animated:(BOOL)animated;
- (id)_requestBySettingAdvancedPrivacyProtectionsFlag:(id)flag;
- (void)loadRequest:(id)request;
- (id)_EVOrganizationName;
- (void)_invalidateEVOrganizationName;
- (void)_updateNavigationBar;
- (void)didUpdateNavigationBarItem:(id)item;
- (BOOL)_canShowPageFormatMenu;
- (void)_updatePreviewLoadingUI;
- (void)_updateBarItems;
- (void)_updateUI;
- (void)_updateRemoteSwipeGestureState;
- (void)_showGenericDownloadAlert;
- (double)_crashBannerDraggingOffsetForContentOffset:(struct CGPoint { double x0; double x1; })offset;
- (void)_updateCrashBannerOffset;
- (void)_updatePinnableBannerOffset;
- (void)_hideCrashBanner;
- (void)_updatePinnableBannerFrame;
- (void)_setShowingPinnableBanner:(id)banner animated:(BOOL)animated;
- (void)_setShowingCrashBanner:(BOOL)banner animated:(BOOL)animated;
- (void)_showCrashBanner:(id)banner animated:(BOOL)animated;
- (BOOL)_notifyInitialLoadDidFinish:(BOOL)finish;
- (void)_initialLoadFinishedWithSuccess:(BOOL)success;
- (void)_fetchActivityViewControllerInfoForURL:(id)url title:(id)title completion:(id /* block */)completion;
- (id)_applicationPayloadForOpeningInSafari;
- (void)_openCurrentURLInSafari;
- (void)_invokeCustomActivity;
- (void)_showQuickLookDocumentView;
- (void)_hideQuickLookDocumentView;
- (void)webViewController:(id)controller didStartProvisionalNavigation:(id)navigation;
- (void)webViewController:(id)controller didReceiveServerRedirectForProvisionalNavigation:(id)navigation;
- (void)webViewController:(id)controller willPerformClientRedirectToURL:(id)url withDelay:(double)delay;
- (void)webViewControllerDidCancelClientRedirect:(id)redirect;
- (void)webViewController:(id)controller authenticationChallenge:(id)challenge shouldAllowLegacyTLS:(id /* block */)tls;
- (void)authenticationChallengeDidNegotiateModernTLS:(id)tls;
- (void)webViewController:(id)controller didCommitNavigation:(id)navigation;
- (void)webViewController:(id)controller didFinishNavigation:(id)navigation;
- (void)webViewController:(id)controller didFinishDocumentLoadForNavigation:(id)navigation;
- (void)webViewControllerDidFirstPaint:(id)paint;
- (void)webViewControllerDidDetermineReaderAvailability:(id)availability dueTo:(long long)to;
- (void)webViewController:(id)controller didClickLinkInReaderWithRequest:(id)request;
- (void)createReaderWebViewForWebViewController:(id)controller;
- (void)webViewControllerDidChangeLoadingState:(id)state;
- (void)webViewControllerDidChangeEstimatedProgress:(id)progress;
- (void)webViewController:(id)controller didFailNavigation:(id)navigation withError:(id)error;
- (void)webViewControllerDidFirstVisuallyNonEmptyLayout:(id)layout;
- (void)webViewControllerUpdateNavigationBar:(id)bar;
- (BOOL)_redirectToHostAppWithNavigationResult:(id)result options:(id)options;
- (void)_cleanUpAfterRedirectToExternalApp;
- (void)_completeRedirectToExternalNavigationResult:(id)result fromOriginalRequest:(id)request dialogResult:(long long)result;
- (void)_queueAlertForRedirectToExternalNavigationResult:(id)result fromOriginalRequest:(id)request isMainFrame:(BOOL)frame promptPolicy:(long long)policy userAction:(id)action;
- (BOOL)_willURLOpenHostApp:(id)app;
- (void)_redirectToExternalNavigationResult:(id)result fromOriginalRequest:(id)request promptPolicy:(long long)policy isMainFrame:(BOOL)frame userAction:(id)action;
- (void)_didResolveDestinationURL:(id)url pendingAppLinkCheck:(BOOL)check;
- (id)resultOfLoadingRequest:(id)request inMainFrame:(BOOL)frame disallowRedirectToExternalApps:(BOOL)apps;
- (void)_determineResultOfLoadingRequest:(id)request inMainFrame:(BOOL)frame disallowRedirectToExternalApps:(BOOL)apps completionHandler:(id /* block */)handler;
- (void)_redirectToNewsIfNeededForRequest:(id)request isMainFrame:(BOOL)frame userAction:(id)action decisionHandler:(id /* block */)handler;
- (void)webViewController:(id)controller decidePolicyForNavigationAction:(id)action decisionHandler:(id /* block */)handler;
- (void)_internalWebViewController:(id)controller decidePolicyForNavigationAction:(id)action decisionHandler:(id /* block */)handler;
- (void)_internalWebViewController:(id)controller decidePolicyForNavigationAction:(id)action withResult:(id)result decisionHandler:(id /* block */)handler;
- (id)_fallbackURLForWellKnownChangePasswordURL:(id)url;
- (id)_fallbackURLForWellKnownChangePasswordURLFromQuirks:(id)quirks;
- (id)_homePageForURL:(id)url;
- (void)_didDecideNavigationPolicy:(long long)policy forNavigationResponse:(id)response;
- (void)webViewController:(id)controller decidePolicyForNavigationResponse:(id)response decisionHandler:(id /* block */)handler;
- (void)webViewController:(id)controller didFailProvisionalNavigation:(id)navigation withError:(id)error;
- (void)webViewControllerDidChangeURL:(id)url;
- (void)webViewController:(id)controller didSameDocumentNavigation:(id)navigation ofType:(long long)type;
- (void)webViewController:(id)controller willEndNavigationGestureToBackForwardListItem:(id)item;
- (void)webViewController:(id)controller didEndNavigationGestureToBackForwardListItem:(id)item;
- (id)_openNewWebViewIfNeededWithConfiguration:(id)configuration forNavigationAction:(id)action;
- (void)webViewController:(id)controller createWebViewWithConfiguration:(id)configuration forNavigationAction:(id)action completionHandler:(id /* block */)handler;
- (void)webViewController:(id)controller webViewDidClose:(id)close;
- (void)webViewControllerWebProcessDidCrash:(id)crash;
- (void)webViewControllerWebProcessDidBecomeResponsive:(id)responsive;
- (void)webViewControllerWebProcessDidBecomeUnresponsive:(id)unresponsive;
- (void)webViewControllerDidChangeHasOnlySecureContent:(id)content;
- (void)webViewController:(id)controller didReceiveAuthenticationChallenge:(id)challenge completionHandler:(id /* block */)handler;
- (BOOL)webViewControllerCanPromptForAccountSecurityRecommendation:(id)recommendation;
- (void)webViewControllerWillPresentJavaScriptDialog:(id)dialog;
- (id)presentingViewControllerForWebViewController:(id)controller;
- (void)webViewController:(id)controller printFrame:(id)frame;
- (long long)browserPersonaForWebViewController:(id)controller;
- (void)webViewController:(id)controller didStartLoadForQuickLookDocumentInMainFrameWithFileName:(id)name uti:(id)uti;
- (void)webViewController:(id)controller didFinishLoadForQuickLookDocumentInMainFrame:(id)frame;
- (long long)webViewController:(id)controller presentationPolicyForDialog:(id)dialog;
- (void)webViewController:(id)controller didChangeFullScreen:(BOOL)screen;
- (id)webViewController:(id)controller didStartDownload:(id)download;
- (void)webViewController:(id)controller decidePolicyForSOAuthorizationLoadWithCurrentPolicy:(long long)policy forExtension:(id)extension completionHandler:(id /* block */)handler;
- (BOOL)printControllerShouldPrintReader:(id)reader;
- (BOOL)printControllerPageIsLoading:(id)loading;
- (BOOL)printControllerCanPresentPrintUI:(id)ui;
- (id)presentingViewControllerForPrintController:(id)controller;
- (void)printController:(id)controller didCreatePrintInfo:(id)info;
- (BOOL)isPageEligibileToShowNotSecureWarning;
- (void)updateBottombarOffset:(double)offset topBarHeight:(double)height;
- (void)_dismiss;
- (void)_showBarsFromBottomBarTap:(id)tap;
- (void)stopLoading;
- (BOOL)dynamicBarAnimator:(id)animator canTransitionToState:(long long)state byDraggingWithOffset:(double)offset;
- (void)dynamicBarAnimatorWillEnterSteadyState:(id)state;
- (void)dynamicBarAnimatorWillLeaveSteadyState:(id)state;
- (void)dynamicBarAnimatorStateDidChange:(id)change;
- (void)dynamicBarAnimatorOutputsDidChange:(id)change;
- (BOOL)scrollViewShouldScrollToTop:(id)top;
- (void)scrollViewWillBeginDragging:(id)dragging;
- (void)scrollViewDidScroll:(id)scroll;
- (void)scrollViewWillEndDragging:(id)dragging withVelocity:(struct CGPoint { double x0; double x1; })velocity targetContentOffset:(inout struct CGPoint { double x0; double x1; } *)offset;
- (void)scrollViewDidEndDragging:(id)dragging willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidEndDecelerating:(id)decelerating;
- (void)scrollViewDidEndScrollingAnimation:(id)animation;
- (void)scrollViewDidScrollToTop:(id)top;
- (void)_didCompleteScrolling;
- (void)scrollViewDidZoom:(id)zoom;
- (void)_updateModalInPresentation;
- (void)navigationBarMetricsDidChange:(id)change;
- (void)compressedNavigationBarWasTapped:(id)tapped;
- (void)_showBars;
- (id)pageFormatMenuController;
- (void)navigationBarFormatMenuButtonWasTapped:(id)tapped;
- (void)navigationBarFormatMenuButtonBecameUnavailable:(id)unavailable;
- (void)_hideNavigationBarGestureRecognized:(id)recognized;
- (void)navigationBarReaderButtonWasTapped:(id)tapped;
- (void)navigationBarFormatMenuButtonStartedInteraction:(id)interaction;
- (void)navigationBarCancelButtonWasTapped:(id)tapped;
- (void)navigationBarDoneButtonWasTapped:(id)tapped;
- (void)navigationBarReloadButtonWasTapped:(id)tapped;
- (void)_reloadFromOrigin:(BOOL)origin;
- (void)navigationBarStopLoadingButtonWasTapped:(id)tapped;
- (id)navigationBarURLForSharing:(id)sharing;
- (void)navigationBarMediaStateMuteButtonWasTapped:(id)tapped;
- (void)navigationBar:(id)bar didCreateLeadingToolbar:(id)toolbar trailingToolbar:(id)toolbar;
- (BOOL)createFluidProgressState;
- (void)clearFluidProgressState;
- (id)progressState;
- (void)_setSuppressingPreviewProgressAnimation:(BOOL)animation;
- (id)expectedOrCurrentURL;
- (double)estimatedProgress;
- (BOOL)hasFailedURL;
- (id)currentFluidProgressStateSource;
- (void)fluidProgressRocketAnimationDidComplete;
- (BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
- (BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizerShouldBegin:(id)begin;
- (void)addBookmarkNavController:(id)controller didFinishWithResult:(BOOL)result bookmark:(id)bookmark;
- (BOOL)addBookmarkNavControllerCanSaveBookmarkChanges:(id)changes;
- (BOOL)pageLoadErrorControllerShouldHandleCertificateError:(id)error;
- (void)pageLoadErrorController:(id)controller loadFailedRequestAfterError:(id)error;
- (id)pageLoadErrorControllerGetSecIdentityPreferencesController:(id)controller;
- (void)pageLoadErrorControllerClosePage:(id)page;
- (void)pageLoadErrorController:(id)controller presentViewController:(id)controller;
- (BOOL)pageLoadErrorControllerShouldPermanentlyAcceptCertificate:(id)certificate;
- (BOOL)pageLoadErrorControllerShouldReloadAfterError:(id)error;
- (BOOL)pageLoadErrorControllerIsInPreviewMode:(id)mode;
- (void)downloadDidStart:(id)start;
- (void)downloadDidFail:(id)fail;
- (void)downloadDidFinish:(id)finish;
- (BOOL)_canShowDownloadWithoutPrompting:(id)prompting;
- (void)_showDownload:(id)download;
- (void)_showPassBookControllerForPasses:(id)passes;
- (void)_fetchSharingURLWithCompletionHandler:(id /* block */)handler;
- (void)perSiteSettingsUIPresentSettings;
- (void)toggleMediaStateMuted;
- (void)reload;
- (void)reloadDisablingContentBlockers:(BOOL)blockers;
- (void)reloadDisablingAdvancedPrivateBrowsingPrivacyProtections:(BOOL)protections;
- (BOOL)isPrivateBrowsingEnabled;
- (BOOL)isShowingReader;
- (void)toggleShowingReaderForUserAction;
- (void)presentDownloadsViewController;
- (void)presentModalViewController:(id)controller completion:(id /* block */)completion;
- (void)_updateUserActivitySoon;
- (void)_updateUserActivityTimerFired;
- (void)_cancelPendingUpdateUserActivityTimer;
- (id)handoffURL;
- (void)_updateUserActivity;
- (void)_invalidateUserActivity;
- (id)webViewForFindOnPageView:(id)view;
- (void)visibilityWillChangeForFindOnPageView:(id)view;
- (void)_setUpMenu;
- (void)validateCommand:(id)command;
- (void)reloadKeyPressed;
- (void)reloadFromOriginKeyPressed;
- (void)navigateBackKeyPressed;
- (void)navigateForwardKeyPressed;
- (void)findKeyPressed;
- (void)takeFindStringKeyPressed;
- (void)nextFindResultKeyPressed;
- (void)previousFindResultKeyPressed;
- (void)toggleReaderKeyPressed;
- (void)cancelKeyPressed;
- (void)_keyboardWillHide:(id)hide;
- (BOOL)_dismissTransientUIAnimated:(BOOL)uianimated;
- (void)saveKeyPressed;
- (void)saveWebpageAlternativeKeyPressed;
- (void)autoFillFormKeyPressed;
- (void)emailCurrentPage;
- (void)_emailCurrentPageWithPreferredContentType:(long long)type;
- (void)increaseSize:(id)size;
- (void)decreaseSize:(id)size;
- (void)resetPageZoomLevelAndFontSize;
- (void)dismissSFSafariViewControllerKeyPressed;
- (id)_mailContentProvider;
- (id)readerControllerForMailContentProvider:(id)provider;
- (BOOL)readerViewIsVisibleForMailContentProvider:(id)provider;
- (id)webViewForMailContentProvider:(id)provider;
- (id)printControllerForContentProvider:(id)provider;
- (id)_committedDomainForPreferences;
- (BOOL)_shouldAllowAutomaticReader;
- (void)_perSiteAutomaticReaderActivationPreferenceDidChange:(id)change;
- (void)_updateDigitalHealthTracking;
- (void)beginDigitalHealthTracking;
- (void)stopDigitalHealthTrackingWithCompletionHandler:(id /* block */)handler;
- (void)barManager:(id)manager didReceiveTapForBarItem:(long long)item;
- (void)webViewController:(id)controller mediaCaptureStateDidChange:(unsigned long long)change;
- (void)_doAfterTerminatingUnrepsonsiveWebProcess:(id /* block */)process;
- (void)_terminateUnresponsiveWebProcess;
- (void)_executeUnresponsiveWebProcessBlock;
- (id)legacyTLSHostManager;
- (void)pageLoadErrorController:(id)controller allowLegacyTLSConnectionForURL:(id)url navigateToURL:(id)url;
- (BOOL)isPrivate;
- (BOOL)supportsAdvancedPrivacyProtectionsForURL:(id)url;
@end

#endif /* _SFBrowserContentViewController_h */
