//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1387.3.4.0.0
//
#ifndef STSController_h
#define STSController_h
@import Foundation;

@class BOOL *;
@protocol {stack<unsigned long, std::deque<unsigned long>>="c"{deque<unsigned long, std::allocator<unsigned long>>="__map_"{__split_buffer<unsigned long *, std::allocator<unsigned long *>>="__first_"^^Q"__begin_"^^Q"__end_"^^Q"__end_cap_"{__compressed_pair<unsigned long **, std::allocator<unsigned long *>>="__value_"^^Q}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::allocator<unsigned long>>="__value_"Q}}}, {unordered_map<std::string, STSPerLabelControllerState, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, STSPerLabelControllerState>>>="__table_"{__hash_table<std::__hash_value_type<std::string, STSPerLabelControllerState>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, STSPerLabelControllerState>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, STSPerLabelControllerState>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, STSPerLabelControllerState>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, STSPerLabelControllerState>, std::hash<std::string>, std::equal_to<std::string>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, STSPerLabelControllerState>, std::equal_to<std::string>, std::hash<std::string>>>="__value_"f}}};

@interface STSController : NSObject {
  /* instance variables */
  struct OpaqueFigSTS * _sts;
  struct unordered_map<std::string, STSPerLabelControllerState, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, STSPerLabelControllerState>>> { struct __hash_table<std::__hash_value_type<std::string, STSPerLabelControllerState>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, STSPerLabelControllerState>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, STSPerLabelControllerState>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, STSPerLabelControllerState>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, STSPerLabelControllerState>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, STSPerLabelControllerState>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } _perLabelState;
  struct stack<unsigned long, std::deque<unsigned long>> { struct deque<unsigned long, std::allocator<unsigned long>> { struct __split_buffer<unsigned long *, std::allocator<unsigned long *>> { unsigned long long * *__first_; unsigned long long * *__begin_; unsigned long long * *__end_; struct __compressed_pair<unsigned long **, std::allocator<unsigned long *>> { unsigned long long * *__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<unsigned long>> { unsigned long long __value_; } __size_; } c; } _availableIndicesWithinSharedStorage;
  struct STSActiveIndices { unsigned long long m_activeLabels; } _activeIndices;
  struct STSGlobalState { unsigned long long hostTime; struct { x[4] columns; } listenerTransform; } _globalState;
  unsigned long long _globalGeneration;
  void * _sharedStorage;
  struct semaphore { unsigned int mMachSem; BOOL mOwned; } _controlSemaphore;
  unsigned long long _shmemSize;
  BOOL _allowAutomaticHeadTracking;
}

/* class methods */
+ (long long)maxNumberOfPerLabelStates;
+ (unsigned long long)maxLabelLength;

/* instance methods */
- (id)initWithSTSObject:(struct OpaqueFigSTS *)stsobject error:(id *)error;
- (void)dealloc;
- (BOOL)signalChangeWithError:(id *)error;
- (BOOL)updateLabel:(struct __CFString *)label state:(struct STSPerLabelState { struct { x0[4] } x0; unsigned int x1; float x2; float x3; } *)state didChange:(BOOL *)change error:(id *)error;
- (BOOL)updateGlobalState:(struct STSGlobalState { unsigned long long x0; struct { x0[4] } x1; } *)state didChange:(BOOL *)change error:(id *)error;
- (void)cleanupLabel:(struct __CFString *)label;
- (void)cleanupAllLabels;
- (BOOL)updateGlobalState:(const struct STSGlobalState { unsigned long long x0; struct { x0[4] } x1; } *)state labelStates:(const void *)states error:(id *)error;
- (BOOL)updateGlobalState:(const struct STSGlobalState { unsigned long long x0; struct { x0[4] } x1; } *)state labelStates:(const void *)states additionalLabelInfo:(id)info error:(id *)error;
- (struct __hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *>> { struct __hash_iterator<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *> *> { void * x0; } x0; })ensureResourcesAllocatedForLabel:(struct __CFString *)label error:(id *)error;
- (BOOL)updateLabel:(struct __CFString *)label state:(const struct STSPerLabelState { struct { x0[4] } x0; unsigned int x1; float x2; float x3; } *)state didChange:(BOOL *)change additionalInfo:(id)info error:(id *)error;
- (BOOL)_updateGlobalState:(const struct STSGlobalState { unsigned long long x0; struct { x0[4] } x1; } *)state didChange:(BOOL *)change error:(id *)error;
@end

#endif /* STSController_h */
