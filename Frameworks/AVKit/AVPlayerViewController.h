//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1088.10.0.0.0
//
#ifndef AVPlayerViewController_h
#define AVPlayerViewController_h
@import Foundation;

#include "UIViewController.h"
#include "AVBehaviorStorage.h"
#include "AVNowPlayingInfoController.h"
#include "AVPlayerController.h"
#include "AVRemoteCommandController.h"
#include "AVTouchIgnoringView.h"
#include "AVUnsupportedContentIndicatorView.h"
#include "AVWatchPlaybackControlsViewController.h"
#include "NMUVolumeIndicatorControlDelegate-Protocol.h"
#include "__AVPlayerLayerView.h"

@class AVPlaybackSpeed, AVPlayer, AVPlayerViewControllerConfiguration, AVPlayerViewControllerCustomControlsView, NMUVolumeIndicatorControl, NSArray, NSDictionary, NSString, NSTimer, NSValue, UIAction, UIImage, UILayoutGuide, UIMenuElement, UIView, UIViewController, VKCImageAnalysis;
@protocol AVPlayerViewControllerDelegate, AVPlayerViewControllerDelegatePrivate, AVPlayerViewControllerPlaybackDelegate><NSObject;

@interface AVPlayerViewController : UIViewController<NMUVolumeIndicatorControlDelegate> {
  /* instance variables */
  BOOL _playerShouldAutoplay;
  AVNowPlayingInfoController *_nowPlayingInfoController;
  AVRemoteCommandController *_remoteCommandController;
  AVUnsupportedContentIndicatorView *_unsupportedContentIndicatorView;
  __AVPlayerLayerView *_playerLayerView;
  AVWatchPlaybackControlsViewController *_playbackControlsViewController;
  NMUVolumeIndicatorControl *_volumeControl;
  NSTimer *_volumeControlFadeOutTimer;
  BOOL _playbackControlsViewVisibilityNeedsUpdate;
  long long _playbackControlsViewVisibilityCounter;
  NSTimer *_playbackControlsViewVisibilityTimer;
  BOOL _isShowingPlaybackControlsViewForUserInteraction;
  BOOL _isShowingPlaybackControlsViewAfterUserInteraction;
  BOOL _isShowingPlaybackControlsViewForUnsupportedContent;
  BOOL _isShowingPlaybackControlsViewForAudioOnlyContent;
  BOOL _showsPlaybackControlsView;
  struct { BOOL playerViewControllerShouldHandleDoneButtonTap; } _delegateRespondsTo;
}

@property (readonly, nonatomic) NSArray *behaviors;
@property (readonly, nonatomic) AVBehaviorStorage *_behaviorStorage;
@property (retain, nonatomic) AVPlayerController *playerController;
@property (readonly, nonatomic) BOOL atLiveEdge;
@property (nonatomic) BOOL canHidePlaybackControls;
@property (nonatomic) BOOL allowsEnteringFullScreen;
@property (nonatomic) BOOL showsAnalysisButtonIfAvailable;
@property (retain, nonatomic) VKCImageAnalysis *imageAnalysis;
@property (readonly, nonatomic) BOOL analysisInteractionInProgress;
@property (nonatomic) BOOL showsMinimalPlaybackControlsWhenEmbeddedInline;
@property (nonatomic) BOOL canPausePlaybackWhenExitingFullScreen;
@property (nonatomic) BOOL canPausePlaybackWhenClosingPictureInPicture;
@property (readonly, nonatomic) AVPlayerViewControllerCustomControlsView *customControlsView;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } legibleContentInsets;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } videoDisplaySize;
@property (readonly, nonatomic) double videoDisplayScale;
@property (nonatomic) BOOL volumeControlsCanShowSlider;
@property (readonly, nonatomic) UIViewController *viewControllerForFullScreenPresentation;
@property (copy, nonatomic) NSArray *customControlItems;
@property (copy, nonatomic) NSString *overrideParentApplicationDisplayIdentifier;
@property (nonatomic) BOOL canIncludePlaybackControlsWhenInline;
@property (retain, nonatomic) NSValue *overrideLayoutMarginsWhenEmbeddedInline;
@property (readonly, nonatomic) BOOL pictureInPictureActive;
@property (copy, nonatomic) NSString *pictureInPictureActivitySessionIdentifier;
@property (retain, nonatomic) NSString *infoHint;
@property (nonatomic) BOOL allowInfoMetadataSubpanel;
@property (copy, nonatomic) id /* block */ playButtonHandlerForLazyPlayerLoading;
@property (nonatomic) BOOL wantsDetachedFullscreenPresentation;
@property (nonatomic) BOOL titleMetadataIncludesProResBadge;
@property (nonatomic) BOOL titleMetadataIncludesHDRBadge;
@property (retain, nonatomic) NSObject<AVPlayerViewControllerPlaybackDelegate><NSObject> *privateDelegate;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _clientLegibleContentInsets;
@property (copy, nonatomic) AVPlayerViewControllerConfiguration *configuration;
@property (nonatomic) BOOL showsAudioLanguageMenu;
@property (retain, nonatomic) UIMenuElement *transportBarCustomAudioMenu;
@property (retain, nonatomic) AVPlayer *player;
@property (nonatomic) BOOL showsPlaybackControls;
@property (nonatomic) BOOL showsTimecodes;
@property (copy, nonatomic) NSString *videoGravity;
@property (readonly, nonatomic) BOOL readyForDisplay;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } videoBounds;
@property (readonly, nonatomic) UIView *contentOverlayView;
@property (nonatomic) BOOL allowsPictureInPicturePlayback;
@property (nonatomic) BOOL allowsVideoFrameAnalysis;
@property (nonatomic) unsigned long long videoFrameAnalysisTypes;
@property (readonly, nonatomic) UIAction *toggleLookupAction;
@property (nonatomic) BOOL canStartPictureInPictureAutomaticallyFromInline;
@property (nonatomic) BOOL updatesNowPlayingInfoCenter;
@property (nonatomic) BOOL entersFullScreenWhenPlaybackBegins;
@property (nonatomic) BOOL exitsFullScreenWhenPlaybackEnds;
@property (nonatomic) BOOL requiresLinearPlayback;
@property (nonatomic) BOOL appliesPreferredDisplayCriteriaAutomatically;
@property (copy, nonatomic) NSDictionary *pixelBufferAttributes;
@property (weak, nonatomic) NSObject<AVPlayerViewControllerDelegate> *delegate;
@property (copy, nonatomic) NSArray *speeds;
@property (readonly, nonatomic) AVPlaybackSpeed *selectedSpeed;
@property (readonly, nonatomic) UILayoutGuide *unobscuredContentGuide;
@property (copy, nonatomic) NSArray *allowedSubtitleOptionLanguages;
@property (nonatomic) BOOL requiresFullSubtitles;
@property (nonatomic) long long skippingBehavior;
@property (nonatomic) BOOL skipForwardEnabled;
@property (nonatomic) BOOL skipBackwardEnabled;
@property (nonatomic) BOOL playbackControlsIncludeTransportBar;
@property (nonatomic) BOOL playbackControlsIncludeInfoViews;
@property (nonatomic) BOOL transportBarIncludesTitleView;
@property (retain, nonatomic) UIViewController *customOverlayViewController;
@property (copy, nonatomic) NSArray *transportBarCustomMenuItems;
@property (nonatomic) BOOL requiresMonoscopicViewingMode;
@property (copy, nonatomic) NSArray *contextualActions;
@property (readonly, nonatomic) UIView *contextualActionsInfoView;
@property (copy, nonatomic) UIImage *contextualActionsPreviewImage;
@property (copy, nonatomic) NSArray *customInfoViewControllers;
@property (copy, nonatomic) NSArray *infoViewActions;
@property (readonly) BOOL canBeginTrimming;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)keyPathsForValuesAffectingPlayer;
+ (id)keyPathsForValuesAffectingVideoGravity;
+ (id)keyPathsForValuesAffectingReadyForDisplay;

/* instance methods */
- (id)initWithPlayerLayerView:(id)view;
- (void)doneButtonTapped:(id)tapped;
- (void)togglePlayback:(id)playback;
- (void)showPlaybackControlsViewForTouchDown;
- (void)hidePlaybackControlsViewForTouchUp;
- (void)showPlaybackControlsViewForVolumeChange;
- (void)addBehavior:(id)behavior;
- (void)removeBehavior:(id)behavior;
- (id)initWithNibName:(id)name bundle:(id)bundle;
- (void)dealloc;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (BOOL)isReadyForDisplay;
- (void)_ensureBehaviorStorage;
- (void)volumeIndicatorDidBeginAdjustingVolume:(id)volume;
- (void)volumeIndicatorDidAdjustVolume:(id)volume;
- (void)volumeIndicatorDidEndAdjustingVolume:(id)volume;
- (void)flashVolumeControl:(id)control;
- (void)loadView;
- (void)viewWillAppear:(BOOL)appear;
- (void)viewDidAppear:(BOOL)appear;
- (void)viewDidDisappear:(BOOL)disappear;
- (id)childViewControllerForStatusBarHidden;
- (BOOL)canBecomeFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (BOOL)_isUnsupportedContent;
- (void)_updateUnsupportedContentIndicatorView;
- (BOOL)_isAudioOnlyContent;
- (void)_updatePlaybackControlsViewVisibilityForUnsupportedContent;
- (void)_updatePlaybackControlsViewVisibilityForAudioOnlyContent;
- (void)_handleDoubleTapGesture:(id)gesture;
- (void)_handleSingleTapGesture:(id)gesture;
- (void)_showPlaybackControlsViewIfNeeded;
- (void)_hidePlaybackControlsViewIfPossible;
- (void)_hidePlaybackControlsViewIfPossibleAfterDelayIfPlaying;
- (void)_hidePlaybackControlsViewIfPossibleAfterDelayIfPlayingWithDelay:(double)delay;
- (void)_showPlaybackControlsViewIfNeededAndHideIfPossibleAfterDelayIfPlaying;
- (void)_showPlaybackControlsViewIfNeededAndHideIfPossibleAfterDelayIfPlayingWithDelay:(double)delay;
- (void)_firePlaybackControlsViewVisibilityTimer:(id)timer;
- (void)_hidePlaybackControlsViewIfPossibleUntilFurtherUserInteraction;
- (void)_setPlaybackControlsViewVisibilityNeedsUpdate;
- (void)_updatePlaybackControlsViewVisibilityIfNeeded;
- (void)_showOrHidePlaybackControlsView;
- (BOOL)_showsPlaybackControlsView;
- (BOOL)isSkipForwardEnabled;
- (BOOL)isSkipBackwardEnabled;
- (BOOL)isAtLiveEdge;
- (BOOL)isPictureInPictureActive;
- (void)_setClientLegibleContentInsets:(struct UIEdgeInsets { double x0; double x1; double x2; double x3; })insets;
@end

#endif /* AVPlayerViewController_h */
