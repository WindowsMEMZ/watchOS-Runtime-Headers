//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 125.3.4.0.0
//
#ifndef MTRDeviceControllerFactory_h
#define MTRDeviceControllerFactory_h
@import Foundation;

#include "MTRDeviceController.h"

@class NSArray, NSMutableArray;
@protocol MTROTAProviderDelegate, OS_dispatch_queue;

@interface MTRDeviceControllerFactory : NSObject {
  /* instance variables */
  BOOL _usingPerControllerStorage;
  MTRDeviceController *_controllerBeingStarted;
  MTRDeviceController *_controllerBeingShutDown;
  unsigned char _nextAvailableFabricIndex;
}

@property (readonly) struct PersistentStorageDelegate { undefined * * x0; } * storageDelegate;
@property (readonly) struct GroupDataProvider { undefined * * x0; unsigned short x1; unsigned short x2; struct GroupListener * x3; } * groupData;
@property (readonly) NSObject<OS_dispatch_queue> *chipWorkQueue;
@property (readonly) struct DeviceControllerFactory { unsigned short x0; struct DeviceControllerSystemState * x1; struct PersistentStorageDelegate * x2; struct OperationalKeystore * x3; struct OperationalCertificateStore * x4; struct CertificateValidityPolicy * x5; struct SessionResumptionStorage * x6; BOOL x7; } * controllerFactory;
@property (readonly) struct PersistentStorageDelegate { undefined * * x0; } * persistentStorageDelegate;
@property (readonly) struct MTROTAProviderDelegateBridge { undefined * * x0; } * otaProviderDelegateBridge;
@property (readonly) struct RawKeySessionKeystore { undefined * * x0; } * sessionKeystore;
@property (readonly) void * groupStorageDelegate;
@property (readonly) void * groupDataProvider;
@property (readonly) NSMutableArray *controllers;
@property (readonly) struct PersistentStorageOperationalKeystore { undefined * * x0; struct PersistentStorageDelegate * x1; unsigned char x2; struct P256Keypair * x3; BOOL x4; BOOL x5; } * keystore;
@property (readonly) void * opCertStore;
@property (readonly) struct MTROperationalBrowser { id x0; id x1; struct _DNSServiceRef_t * x2; BOOL x3; BOOL x4; } * operationalBrowser;
@property (readonly) NSArray *productAttestationAuthorityCertificates;
@property (readonly) NSArray *certificationDeclarationCertificates;
@property (readonly) BOOL advertiseOperational;
@property (readonly, nonatomic) struct IgnoreCertificateValidityPeriodPolicy { undefined * * x0; } * certificateValidityPolicy;
@property (readonly) struct MTRSessionResumptionStorageBridge { undefined * * x0; id x1; } * sessionResumptionStorage;
@property (readonly, nonatomic) struct os_unfair_lock_s { unsigned int x0; } controllersLock;
@property (readonly, nonatomic) NSObject<MTROTAProviderDelegate> *otaProviderDelegate;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *otaProviderDelegateQueue;
@property (readonly, nonatomic) BOOL running;
@property (readonly, nonatomic) NSArray *knownFabrics;

/* class methods */
+ (void)initialize;
+ (id)sharedInstance;

/* instance methods */
- (void)controllerShuttingDown:(id)down;
- (id)getRunningControllers;
- (id)runningControllerForFabricIndex:(unsigned char)index includeControllerStartingUp:(BOOL)up includeControllerShuttingDown:(BOOL)down;
- (id)runningControllerForFabricIndex:(unsigned char)index;
- (void)operationalInstanceAdded:(struct PeerId { unsigned long long x0; unsigned long long x1; } *)added;
- (id)initializeController:(id)controller withParameters:(id)parameters error:(id *)error;
- (id)init;
- (void)dealloc;
- (void)_assertCurrentQueueIsNotMatterQueue;
- (BOOL)checkIsRunning:(id *)running;
- (BOOL)checkForInitError:(BOOL)error logMsg:(id)msg;
- (void)cleanupInitObjects;
- (void)cleanupStartupObjects;
- (struct ChipError { unsigned int x0; char * x1; unsigned int x2; })_initFabricTable:(void *)table;
- (BOOL)startControllerFactory:(id)factory error:(id *)error;
- (void)stopControllerFactory;
- (id)_startDeviceController:(id)controller startupParams:(id)params fabricChecker:(id /* block */)checker error:(id *)error;
- (id)createControllerOnExistingFabric:(id)fabric error:(id *)error;
- (id)createControllerOnNewFabric:(id)fabric error:(id *)error;
- (BOOL)findMatchingFabric:(void *)fabric params:(id)params fabric:(const struct FabricInfo * *)fabric;
- (id)maybeInitializeOTAProvider:(id)otaprovider;
- (BOOL)isRunning;
@end

#endif /* MTRDeviceControllerFactory_h */
