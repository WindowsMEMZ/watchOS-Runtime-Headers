//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 125.3.4.0.0
//
#ifndef MTRDeviceController_h
#define MTRDeviceController_h
@import Foundation;

#include "MTRCommissionableBrowser.h"
#include "MTRDeviceControllerDataStore.h"
#include "MTRDeviceControllerFactory.h"

@class NSMutableDictionary, NSNumber, NSUUID;
@protocol MTROTAProviderDelegate, OS_dispatch_queue, {MTRP256KeypairBridge="_vptr$ECPKeypair"^^?"mPublicKey"{P256PublicKey="_vptr$ECPKey"^^?"bytes"[65C]}"mKeypair"{P256KeypairContext="mBytes"[512C]}"mInitialized"B"mKeypair"@"<MTRKeypair>""mPubkey"{P256PublicKey="_vptr$ECPKey"^^?"bytes"[65C]}}, {atomic<unsigned char>="__a_"{__cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>>="__a_value"AC}};

@interface MTRDeviceController : NSObject {
  /* instance variables */
  struct atomic<unsigned char> { struct __cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>> { atomic  __a_value; unsigned char x0; } __a_; } _storedFabricIndex;
}

@property (readonly, nonatomic) NSNumber *controllerNodeId;
@property (readonly) NSObject<OS_dispatch_queue> *chipWorkQueue;
@property (readonly) void * cppCommissioner;
@property (readonly) void * partialDACVerifier;
@property (readonly) void * defaultDACVerifier;
@property (readonly) struct MTRDeviceControllerDelegateBridge { undefined * * x0; id x1; id x2; id x3; } * deviceControllerDelegateBridge;
@property (readonly) void * operationalCredentialsDelegate;
@property (readonly) struct MTRP256KeypairBridge { undefined * * x0; struct P256PublicKey { undefined * * x0; unsigned char x1[65] } x1; struct P256KeypairContext { unsigned char x0[512] } x2; BOOL x3; id x4; struct P256PublicKey { undefined * * x0; unsigned char x1[65] } x5; } signingKeypairBridge;
@property (readonly) struct MTRP256KeypairBridge { undefined * * x0; struct P256PublicKey { undefined * * x0; unsigned char x1[65] } x1; struct P256KeypairContext { unsigned char x0[512] } x2; BOOL x3; id x4; struct P256PublicKey { undefined * * x0; unsigned char x1[65] } x5; } operationalKeypairBridge;
@property (readonly) void * deviceAttestationDelegateBridge;
@property (readonly) MTRDeviceControllerFactory *factory;
@property (readonly) NSMutableDictionary *nodeIDToDeviceMap;
@property (readonly) struct os_unfair_lock_s { unsigned int x0; } deviceMapLock;
@property (readonly) MTRCommissionableBrowser *commissionableBrowser;
@property (readonly) struct MTRAttestationTrustStoreBridge { undefined * * x0; id x1; } * attestationTrustStoreBridge;
@property (readonly, nonatomic) NSUUID *uniqueIdentifier;
@property (readonly) unsigned char fabricIndex;
@property (readonly, nonatomic) NSNumber *compressedFabricID;
@property (readonly, nonatomic) MTRDeviceControllerDataStore *controllerDataStore;
@property (readonly, nonatomic) NSObject<MTROTAProviderDelegate> *otaProviderDelegate;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *otaProviderDelegateQueue;
@property (readonly, nonatomic) BOOL running;
@property (readonly, nonatomic) NSNumber *controllerNodeID;

/* class methods */
+ (id)sharedControllerWithId:(id)id xpcConnectBlock:(id /* block */)block;
+ (id)sharedControllerWithID:(id)id xpcConnectBlock:(id /* block */)block;
+ (id)encodeXPCResponseValues:(id)values;
+ (id)decodeXPCResponseValues:(id)values;
+ (id)encodeXPCReadParams:(id)params;
+ (id)decodeXPCReadParams:(id)params;
+ (id)encodeXPCSubscribeParams:(id)params;
+ (id)decodeXPCSubscribeParams:(id)params;
+ (id)xpcInterfaceForServerProtocol;
+ (id)xpcInterfaceForClientProtocol;
+ (id)computePASEVerifierForSetupPasscode:(id)passcode iterations:(id)iterations salt:(id)salt error:(id *)error;
+ (BOOL)checkForError:(struct ChipError { unsigned int x0; char * x1; unsigned int x2; })error logMsg:(id)msg error:(id *)error;

/* instance methods */
- (id)fetchAttestationChallengeForDeviceId:(unsigned long long)id;
- (BOOL)getBaseDevice:(unsigned long long)device queue:(id)queue completionHandler:(id /* block */)handler;
- (BOOL)pairDevice:(unsigned long long)device discriminator:(unsigned short)discriminator setupPINCode:(unsigned int)pincode error:(id *)error;
- (BOOL)pairDevice:(unsigned long long)device address:(id)address port:(unsigned short)port setupPINCode:(unsigned int)pincode error:(id *)error;
- (BOOL)pairDevice:(unsigned long long)device onboardingPayload:(id)payload error:(id *)error;
- (BOOL)commissionDevice:(unsigned long long)device commissioningParams:(id)params error:(id *)error;
- (BOOL)stopDevicePairing:(unsigned long long)pairing error:(id *)error;
- (id)getDeviceBeingCommissioned:(unsigned long long)commissioned error:(id *)error;
- (BOOL)openPairingWindow:(unsigned long long)window duration:(unsigned long long)duration error:(id *)error;
- (id)openPairingWindowWithPIN:(unsigned long long)pin duration:(unsigned long long)duration discriminator:(unsigned long long)discriminator setupPIN:(unsigned long long)pin error:(id *)error;
- (id)computePaseVerifier:(unsigned int)verifier iterations:(unsigned int)iterations salt:(id)salt;
- (void)setPairingDelegate:(id)delegate queue:(id)queue;
- (void)setNocChainIssuer:(id)issuer queue:(id)queue;
- (id)initWithParameters:(id)parameters error:(id *)error;
- (id)initWithFactory:(id)factory queue:(id)queue storageDelegate:(id)delegate storageDelegateQueue:(id)queue otaProviderDelegate:(id)delegate otaProviderDelegateQueue:(id)queue uniqueIdentifier:(id)identifier;
- (BOOL)isRunning;
- (void)shutdown;
- (void)cleanupAfterStartup;
- (void)shutDownCppController;
- (void)deinitFromFactory;
- (void)cleanup;
- (BOOL)startup:(id)startup;
- (BOOL)setupCommissioningSessionWithPayload:(id)payload newNodeID:(id)id error:(id *)error;
- (BOOL)setupCommissioningSessionWithDiscoveredDevice:(id)device payload:(id)payload newNodeID:(id)id error:(id *)error;
- (BOOL)commissionNodeWithID:(id)id commissioningParams:(id)params error:(id *)error;
- (BOOL)continueCommissioningDevice:(void *)device ignoreAttestationFailure:(BOOL)failure error:(id *)error;
- (BOOL)cancelCommissioningForNodeID:(id)id error:(id *)error;
- (BOOL)startBrowseForCommissionables:(id)commissionables queue:(id)queue;
- (BOOL)stopBrowseForCommissionables;
- (void)preWarmCommissioningSession;
- (id)deviceBeingCommissionedWithNodeID:(id)id error:(id *)error;
- (id)baseDeviceForNodeID:(id)id;
- (id)deviceForNodeID:(id)id;
- (void)removeDevice:(id)device;
- (void)setDeviceControllerDelegate:(id)delegate queue:(id)queue;
- (BOOL)setOperationalCertificateIssuer:(id)issuer queue:(id)queue;
- (id)attestationChallengeForDeviceID:(id)id;
- (BOOL)checkForInitError:(BOOL)error logMsg:(id)msg;
- (void)clearDeviceAttestationDelegateBridge;
- (BOOL)checkForStartError:(struct ChipError { unsigned int x0; char * x1; unsigned int x2; })error logMsg:(id)msg;
- (BOOL)checkIsRunning;
- (BOOL)checkIsRunning:(id *)running;
- (void)getSessionForNode:(unsigned long long)node completion:(id /* block */)completion;
- (void)getSessionForCommissioneeDevice:(unsigned long long)device completion:(id /* block */)completion;
- (unsigned char)sessionTransportTypeForDevice:(id)device;
- (void)asyncGetCommissionerOnMatterQueue:(id /* block */)queue errorHandler:(id /* block */)handler;
- (void)asyncDispatchToMatterQueue:(id /* block */)queue errorHandler:(id /* block */)handler;
- (void)syncRunOnWorkQueue:(id /* block */)queue error:(id *)error;
- (id)syncRunOnWorkQueueWithReturnValue:(id /* block */)value error:(id *)error;
- (BOOL)syncRunOnWorkQueueWithBoolReturnValue:(id /* block */)value error:(id *)error;
- (struct ChipError { unsigned int x0; char * x1; unsigned int x2; })isRunningOnFabric:(void *)fabric fabricIndex:(unsigned char)index isRunning:(BOOL *)running;
- (void)invalidateCASESessionForNode:(unsigned long long)node;
- (void)operationalInstanceAdded:(unsigned long long)added;
@end

#endif /* MTRDeviceController_h */
