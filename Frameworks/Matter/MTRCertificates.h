//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 125.3.4.0.0
//
#ifndef MTRCertificates_h
#define MTRCertificates_h
@import Foundation;

@interface MTRCertificates : NSObject
/* class methods */
+ (id)generateRootCertificate:(id)certificate issuerId:(id)id fabricId:(id)id error:(id *)error;
+ (id)generateIntermediateCertificate:(id)certificate rootCertificate:(id)certificate intermediatePublicKey:(struct __SecKey *)key issuerId:(id)id fabricId:(id)id error:(id *)error;
+ (id)generateOperationalCertificate:(id)certificate signingCertificate:(id)certificate operationalPublicKey:(struct __SecKey *)key fabricId:(id)id nodeId:(id)id caseAuthenticatedTags:(id)tags error:(id *)error;
+ (id)generateCertificateSigningRequest:(id)request error:(id *)error;
+ (void)initialize;
+ (id)createRootCertificate:(id)certificate issuerID:(id)id fabricID:(id)id validityPeriod:(id)period error:(id *)error;
+ (id)createRootCertificate:(id)certificate issuerID:(id)id fabricID:(id)id error:(id *)error;
+ (id)createIntermediateCertificate:(id)certificate rootCertificate:(id)certificate intermediatePublicKey:(struct __SecKey *)key issuerID:(id)id fabricID:(id)id validityPeriod:(id)period error:(id *)error;
+ (id)createIntermediateCertificate:(id)certificate rootCertificate:(id)certificate intermediatePublicKey:(struct __SecKey *)key issuerID:(id)id fabricID:(id)id error:(id *)error;
+ (id)createOperationalCertificate:(id)certificate signingCertificate:(id)certificate operationalPublicKey:(struct __SecKey *)key fabricID:(id)id nodeID:(id)id caseAuthenticatedTags:(id)tags validityPeriod:(id)period error:(id *)error;
+ (id)createOperationalCertificate:(id)certificate signingCertificate:(id)certificate operationalPublicKey:(struct __SecKey *)key fabricID:(id)id nodeID:(id)id caseAuthenticatedTags:(id)tags error:(id *)error;
+ (BOOL)keypair:(id)keypair matchesCertificate:(id)certificate;
+ (BOOL)isCertificate:(id)certificate equalTo:(id)to;
+ (id)createCertificateSigningRequest:(id)request error:(id *)error;
+ (id)convertX509Certificate:(id)certificate;
+ (id)convertMatterCertificate:(id)certificate;
+ (id)publicKeyFromCSR:(id)csr error:(id *)error;
@end

#endif /* MTRCertificates_h */
