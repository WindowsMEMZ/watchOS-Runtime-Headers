//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 125.3.4.0.0
//
#ifndef MTRDevice_h
#define MTRDevice_h
@import Foundation;

#include "MTRAsyncWorkQueue.h"
#include "MTRDeviceController.h"
#include "MTRWeakReference.h"

@class BOOL *, NSArray, NSDate, NSMutableDictionary, NSNumber;
@protocol OS_dispatch_queue;

@interface MTRDevice : NSObject

@property (readonly, nonatomic) struct os_unfair_lock_s { unsigned int x0; } lock;
@property (nonatomic) unsigned char fabricIndex;
@property (retain, nonatomic) MTRWeakReference *weakDelegate;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue;
@property (retain, nonatomic) NSArray *unreportedEvents;
@property (nonatomic) BOOL subscriptionActive;
@property (nonatomic) unsigned int lastSubscriptionAttemptWait;
@property (nonatomic) BOOL reattemptingSubscription;
@property (retain, nonatomic) NSMutableDictionary *readCache;
@property (retain, nonatomic) NSMutableDictionary *expectedValueCache;
@property (nonatomic) unsigned long long expectedValueNextID;
@property (nonatomic) BOOL expirationCheckScheduled;
@property (retain, nonatomic) NSDate *estimatedStartTimeFromGeneralDiagnosticsUpTime;
@property (nonatomic) void * currentReadClient;
@property (readonly, nonatomic) MTRDeviceController *deviceController;
@property (readonly, copy, nonatomic) NSNumber *nodeID;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (readonly, nonatomic) MTRAsyncWorkQueue *asyncWorkQueue;
@property (readonly, nonatomic) unsigned long long state;
@property (readonly, nonatomic) NSDate *estimatedStartTime;

/* class methods */
+ (id)deviceWithNodeID:(unsigned long long)id deviceController:(id)controller;
+ (id)deviceWithNodeID:(id)id controller:(id)controller;

/* instance methods */
- (void)invokeCommandWithEndpointID:(id)id clusterID:(id)id commandID:(id)id commandFields:(id)fields expectedValues:(id)values expectedValueInterval:(id)interval timedInvokeTimeout:(id)timeout clientQueue:(id)queue completion:(id /* block */)completion;
- (id)initWithNodeID:(id)id controller:(id)controller;
- (id)description;
- (void)setDelegate:(id)delegate queue:(id)queue;
- (void)invalidate;
- (void)nodeMayBeAdvertisingOperational;
- (BOOL)_subscriptionAbleToReport;
- (void)_changeState:(unsigned long long)state;
- (void)_handleSubscriptionEstablished;
- (void)_handleSubscriptionError:(id)error;
- (void)_handleResubscriptionNeeded;
- (void)_handleSubscriptionReset;
- (void)_reattemptSubscriptionNowIfNeeded;
- (void)_handleUnsolicitedMessageFromPublisher;
- (void)_handleReportBegin;
- (void)_handleReportEnd;
- (void)_reportAttributes:(id)attributes;
- (void)_handleAttributeReport:(id)report;
- (void)_handleEventReport:(id)report;
- (void)_setupSubscription;
- (id)readAttributeWithEndpointID:(id)id clusterID:(id)id attributeID:(id)id params:(id)params;
- (void)writeAttributeWithEndpointID:(id)id clusterID:(id)id attributeID:(id)id value:(id)value expectedValueInterval:(id)interval timedWriteTimeout:(id)timeout;
- (void)invokeCommandWithEndpointID:(id)id clusterID:(id)id commandID:(id)id commandFields:(id)fields expectedValues:(id)values expectedValueInterval:(id)interval timedInvokeTimeout:(id)timeout queue:(id)queue completion:(id /* block */)completion;
- (void)_invokeCommandWithEndpointID:(id)id clusterID:(id)id commandID:(id)id commandFields:(id)fields expectedValues:(id)values expectedValueInterval:(id)interval timedInvokeTimeout:(id)timeout serverSideProcessingTimeout:(id)timeout queue:(id)queue completion:(id /* block */)completion;
- (void)_invokeKnownCommandWithEndpointID:(id)id clusterID:(id)id commandID:(id)id commandPayload:(id)payload expectedValues:(id)values expectedValueInterval:(id)interval timedInvokeTimeout:(id)timeout serverSideProcessingTimeout:(id)timeout responseClass:(Class)class queue:(id)queue completion:(id /* block */)completion;
- (void)openCommissioningWindowWithSetupPasscode:(id)passcode discriminator:(id)discriminator duration:(id)duration queue:(id)queue completion:(id /* block */)completion;
- (void)openCommissioningWindowWithDiscriminator:(id)discriminator duration:(id)duration queue:(id)queue completion:(id /* block */)completion;
- (void)_checkExpiredExpectedValues;
- (void)_performScheduledExpirationCheck;
- (id)_attributeValueDictionaryForAttributePath:(id)path;
- (BOOL)_attributeDataValue:(id)value isEqualToDataValue:(id)value;
- (id)_getAttributesToReportWithReportedValues:(id)values;
- (void)_setExpectedValue:(id)value attributePath:(id)path expirationTime:(id)time shouldReportValue:(BOOL *)value attributeValueToReport:(id *)report expectedValueID:(unsigned long long)id;
- (id)_getAttributesToReportWithNewExpectedValues:(id)values expirationTime:(id)time expectedValueID:(unsigned long long *)id;
- (void)setExpectedValues:(id)values expectedValueInterval:(id)interval;
- (void)setExpectedValues:(id)values expectedValueInterval:(id)interval expectedValueID:(unsigned long long *)id;
- (void)removeExpectedValuesForAttributePaths:(id)paths expectedValueID:(unsigned long long)id;
- (void)removeExpectedValueForAttributePath:(id)path expectedValueID:(unsigned long long)id;
- (void)_removeExpectedValueForAttributePath:(id)path expectedValueID:(unsigned long long)id;
- (id)newBaseDevice;
@end

#endif /* MTRDevice_h */
