//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2202.0.0.0.0
//
#ifndef NSCalendar_h
#define NSCalendar_h
@import Foundation;

#include "NSArray.h"
#include "NSCopying-Protocol.h"
#include "NSLocale.h"
#include "NSSecureCoding-Protocol.h"
#include "NSTimeZone.h"

@class NSString;

@interface NSCalendar : NSObject<NSCopying, NSSecureCoding>

@property (readonly, copy) NSString *calendarIdentifier;
@property (copy) NSLocale *locale;
@property (copy) NSTimeZone *timeZone;
@property unsigned long long firstWeekday;
@property unsigned long long minimumDaysInFirstWeek;
@property (readonly, copy) NSArray *eraSymbols;
@property (readonly, copy) NSArray *longEraSymbols;
@property (readonly, copy) NSArray *monthSymbols;
@property (readonly, copy) NSArray *shortMonthSymbols;
@property (readonly, copy) NSArray *veryShortMonthSymbols;
@property (readonly, copy) NSArray *standaloneMonthSymbols;
@property (readonly, copy) NSArray *shortStandaloneMonthSymbols;
@property (readonly, copy) NSArray *veryShortStandaloneMonthSymbols;
@property (readonly, copy) NSArray *weekdaySymbols;
@property (readonly, copy) NSArray *shortWeekdaySymbols;
@property (readonly, copy) NSArray *veryShortWeekdaySymbols;
@property (readonly, copy) NSArray *standaloneWeekdaySymbols;
@property (readonly, copy) NSArray *shortStandaloneWeekdaySymbols;
@property (readonly, copy) NSArray *veryShortStandaloneWeekdaySymbols;
@property (readonly, copy) NSArray *quarterSymbols;
@property (readonly, copy) NSArray *shortQuarterSymbols;
@property (readonly, copy) NSArray *standaloneQuarterSymbols;
@property (readonly, copy) NSArray *shortStandaloneQuarterSymbols;
@property (readonly, copy) NSString *AMSymbol;
@property (readonly, copy) NSString *PMSymbol;

/* class methods */
+ (id)autoupdatingCurrentCalendar;
+ (id)allocWithZone:(struct _NSZone *)zone;
+ (BOOL)supportsSecureCoding;
+ (id)currentCalendar;
+ (id)calendarWithIdentifier:(id)identifier;

/* instance methods */
- (id)init;
- (unsigned long long)_cfTypeID;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)equal;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (void)getEra:(out long long *)era year:(out long long *)year month:(out long long *)month day:(out long long *)day fromDate:(id)date;
- (void)getEra:(out long long *)era yearForWeekOfYear:(out long long *)year weekOfYear:(out long long *)year weekday:(out long long *)weekday fromDate:(id)date;
- (void)getHour:(out long long *)hour minute:(out long long *)minute second:(out long long *)second nanosecond:(out long long *)nanosecond fromDate:(id)date;
- (long long)component:(unsigned long long)component fromDate:(id)date;
- (id)dateWithEra:(long long)era year:(long long)year month:(long long)month day:(long long)day hour:(long long)hour minute:(long long)minute second:(long long)second nanosecond:(long long)nanosecond;
- (id)dateWithEra:(long long)era yearForWeekOfYear:(long long)year weekOfYear:(long long)year weekday:(long long)weekday hour:(long long)hour minute:(long long)minute second:(long long)second nanosecond:(long long)nanosecond;
- (id)startOfDayForDate:(id)date;
- (id)componentsInTimeZone:(id)zone fromDate:(id)date;
- (long long)compareDate:(id)date toDate:(id)date toUnitGranularity:(unsigned long long)granularity;
- (BOOL)isDate:(id)date equalToDate:(id)date toUnitGranularity:(unsigned long long)granularity;
- (BOOL)isDate:(id)date inSameDayAsDate:(id)date;
- (BOOL)isDateInToday:(id)today;
- (BOOL)isDateInYesterday:(id)yesterday;
- (BOOL)isDateInTomorrow:(id)tomorrow;
- (BOOL)rangeOfWeekendStartDate:(out id *)date interval:(out double *)interval containingDate:(id)date;
- (id)components:(unsigned long long)components fromDateComponents:(id)components toDateComponents:(id)components options:(unsigned long long)options;
- (id)dateByAddingUnit:(unsigned long long)unit value:(long long)value toDate:(id)date options:(unsigned long long)options;
- (id)nextDateAfterDate:(id)date matchingComponents:(id)components options:(unsigned long long)options;
- (id)nextDateAfterDate:(id)date matchingUnit:(unsigned long long)unit value:(long long)value options:(unsigned long long)options;
- (id)nextDateAfterDate:(id)date matchingHour:(long long)hour minute:(long long)minute second:(long long)second options:(unsigned long long)options;
- (id)dateBySettingUnit:(unsigned long long)unit value:(long long)value ofDate:(id)date options:(unsigned long long)options;
- (id)dateBySettingHour:(long long)hour minute:(long long)minute second:(long long)second ofDate:(id)date options:(unsigned long long)options;
- (BOOL)date:(id)date matchesComponents:(id)components;
- (BOOL)isDateInWeekend:(id)weekend;
- (BOOL)nextWeekendStartDate:(out id *)date interval:(out double *)interval options:(unsigned long long)options afterDate:(id)date;
- (void)enumerateDatesStartingAfterDate:(id)date matchingComponents:(id)components options:(unsigned long long)options usingBlock:(id /* block */)block;
- (id)initWithCalendarIdentifier:(id)identifier;
- (void)setGregorianStartDate:(id)date;
- (id)gregorianStartDate;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })minimumRangeOfUnit:(unsigned long long)unit;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })maximumRangeOfUnit:(unsigned long long)unit;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfUnit:(unsigned long long)unit inUnit:(unsigned long long)unit forDate:(id)date;
- (unsigned long long)ordinalityOfUnit:(unsigned long long)unit inUnit:(unsigned long long)unit forDate:(id)date;
- (BOOL)rangeOfUnit:(unsigned long long)unit startDate:(id *)date interval:(double *)interval forDate:(id)date;
- (id)dateFromComponents:(id)components;
- (id)components:(unsigned long long)components fromDate:(id)date;
- (id)dateByAddingComponents:(id)components toDate:(id)date options:(unsigned long long)options;
- (id)components:(unsigned long long)components fromDate:(id)date toDate:(id)date options:(unsigned long long)options;
@end

#endif /* NSCalendar_h */
