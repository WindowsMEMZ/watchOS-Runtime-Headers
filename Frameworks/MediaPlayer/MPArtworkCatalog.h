//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.3.0.0
//
#ifndef MPArtworkCatalog_h
#define MPArtworkCatalog_h
@import Foundation;

#include "MPArtworkDataSource-Protocol.h"
#include "MPArtworkDataSourceVisualIdenticality-Protocol.h"
#include "MPArtworkImageAttachments.h"
#include "MPArtworkRepresentationCollection.h"
#include "NSCopying-Protocol.h"

@class NSCache, NSString, NSUUID;
@protocol _MPArtworkCatalogOverlayDelegate;

@interface MPArtworkCatalog : NSObject {
  /* instance variables */
  long long _modelRevisionID;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
}

@property (readonly, nonatomic) long long MP_artworkType;
@property (readonly, weak, nonatomic) id destination;
@property (readonly, nonatomic) BOOL mainThreadBound;
@property (copy, nonatomic) id /* block */ configurationBlock;
@property (nonatomic) unsigned long long representationKinds;
@property (retain, nonatomic) MPArtworkRepresentationCollection *bestAvailableRepresentationCollection;
@property BOOL loadingRepresentation;
@property (copy, nonatomic) NSString *cacheIdentifier;
@property (weak, nonatomic) id requestingContext;
@property (copy, nonatomic) NSObject<NSCopying> *loadingKey;
@property (readonly, nonatomic) NSUUID *UUID;
@property (readonly, nonatomic) id token;
@property (readonly, weak, nonatomic) NSObject<MPArtworkDataSource> *dataSource;
@property (readonly, nonatomic) NSCache *cache;
@property (readonly, nonatomic) NSCache *videoCache;
@property (readonly, nonatomic) NSObject<MPArtworkDataSourceVisualIdenticality> *visualIdenticalityIdentifier;
@property (nonatomic) unsigned long long renderHint;
@property (nonatomic) unsigned long long videoCacheStoragePolicy;
@property (weak, nonatomic) NSObject<_MPArtworkCatalogOverlayDelegate> *overlayDelegate;
@property (retain, nonatomic) id overlayToken;
@property (retain, nonatomic) id overlayStorage;
@property (nonatomic) double destinationScale;
@property (nonatomic) struct CGSize { double x0; double x1; } fittingSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } scaledFittingSize;
@property (readonly, nonatomic) BOOL hasImageOnDisk;
@property (nonatomic) BOOL allowsVideoConstrainedNetworkAccess;
@property (nonatomic) long long preferredVideoFormat;
@property (readonly, nonatomic) MPArtworkImageAttachments *imageAttachments;
@property (readonly, nonatomic) BOOL hasExportableArtworkProperties;

/* class methods */
+ (id)staticArtworkCatalogWithImage:(id)image;
+ (id)staticArtworkCatalogWithRepresentationCollection:(id)collection;
+ (id)placeholderCatalogWithSymbolName:(id)name;
+ (void)setCacheLimit:(long long)limit forCacheIdentifier:(id)identifier cacheReference:(id)reference;
+ (void)setCachePurgesWhenEnteringBackground:(BOOL)background forCacheIdentifier:(id)identifier cacheReference:(id)reference;
+ (void)setCacheLimit:(long long)limit forCacheIdentifier:(id)identifier cacheReference:(id)reference representationKind:(long long)kind;
+ (void)setCachePurgesWhenEnteringBackground:(BOOL)background forCacheIdentifier:(id)identifier cacheReference:(id)reference representationKind:(long long)kind;
+ (id)artworkCacheForIdentifier:(id)identifier requestingContext:(id)context representationKind:(long long)kind;
+ (id)_registeredIdentifiableDataSourceAndTokenClasses;
+ (id)artworkCatalogWithDataSourceShortDescription:(id)description dataSourceIdentifier:(id)identifier tokenParameters:(id)parameters;
+ (id)_artworkCacheForIdentifier:(id)identifier requestingContext:(id)context representationKind:(long long)kind;
+ (id)_artworkLoadQueue;
+ (void)_setCacheLimit:(long long)limit forCacheIdentifier:(id)identifier requestingContext:(id)context;
+ (void)_setCachePurgesWhenEnteringBackground:(BOOL)background forCacheIdentifier:(id)identifier requestingContext:(id)context;
+ (void)_setCacheLimit:(long long)limit forCacheIdentifier:(id)identifier requestingContext:(id)context representationKind:(long long)kind;
+ (void)_setCachePurgesWhenEnteringBackground:(BOOL)background forCacheIdentifier:(id)identifier requestingContext:(id)context representationKind:(long long)kind;
+ (void)setCacheLimit:(long long)limit forCacheIdentifier:(id)identifier requestingContext:(id)context;
+ (void)setCachePurgesWhenEnteringBackground:(BOOL)background forCacheIdentifier:(id)identifier requestingContext:(id)context;
+ (void)setCacheLimit:(long long)limit forCacheIdentifier:(id)identifier requestingContext:(id)context representationKind:(long long)kind;
+ (void)setCachePurgesWhenEnteringBackground:(BOOL)background forCacheIdentifier:(id)identifier requestingContext:(id)context representationKind:(long long)kind;

/* instance methods */
- (id)initWithToken:(id)token dataSource:(id)source;
- (void)dealloc;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)equal;
- (id)description;
- (void)requestImageWithCompletionHandler:(id /* block */)handler;
- (void)requestImageWithCompletion:(id /* block */)completion;
- (id)bestImageFromDisk;
- (void)_clearDestination;
- (void)_setDestination:(id)destination isMainThreadBound:(BOOL)bound;
- (void)setDestination:(id)destination configurationBlock:(id /* block */)block;
- (void)requestVideoWithCompletionHandler:(id /* block */)handler;
- (void)setPreferredVideoKind:(long long)kind;
- (void)setDestination:(id)destination forRepresentationKinds:(unsigned long long)kinds configurationBlock:(id /* block */)block;
- (void)setMainThreadBoundDestination:(id)destination forRepresentationKinds:(unsigned long long)kinds configurationBlock:(id /* block */)block;
- (void)_setDestination:(id)destination isMainThreadBound:(BOOL)bound forRepresentationKinds:(unsigned long long)kinds configurationBlock:(id /* block */)block;
- (void)_callConfigurationWithRevisionID:(long long)id;
- (BOOL)isArtworkVisuallyIdenticalToCatalog:(id)catalog;
- (id)existingColorAnalysisWithAlgorithm:(long long)algorithm;
- (void)requestColorAnalysisWithAlgorithm:(long long)algorithm completionHandler:(id /* block */)handler;
- (void)requestColorAnalysisWithAlgorithm:(long long)algorithm completion:(id /* block */)completion;
- (void)requestRadiosityImageWithCompletionHandler:(id /* block */)handler;
- (void)requestExportableArtworkPropertiesWithCompletion:(id /* block */)completion;
- (void)setCacheIdentifier:(id)identifier forCacheReference:(id)reference;
- (void)_loadBestRepresentationIfNeededOfKind:(long long)kind;
- (void)_loadRepresentationOfKind:(long long)kind completionHandler:(id /* block */)handler;
- (id)_existingRepresentationOfKind:(long long)kind;
- (void)_updateRepresentations;
- (void)_updateRepresentationOfKind:(long long)kind;
- (void)_updateWithRepresentation:(id)representation isBestRepresentation:(BOOL)representation modelRevisionID:(long long)id;
- (void)_requestBestRepresentationOfKind:(long long)kind completionHandler:(id /* block */)handler;
- (void)_setCacheIdentifier:(id)identifier forRequestingContext:(id)context;
- (void)setDestination:(id)destination progressiveConfigurationBlock:(id /* block */)block;
- (void)setCacheIdentifier:(id)identifier forRequestingContext:(id)context;
- (BOOL)isMainThreadBound;
- (BOOL)isLoadingRepresentation;
@end

#endif /* MPArtworkCatalog_h */
