//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.3.0.0
//
#ifndef MPAVItem_h
#define MPAVItem_h
@import Foundation;

#include "MPMediaItem.h"
#include "MPMediaLibraryPrivacyContext.h"
#include "MPModelGenericObject.h"
#include "MPModelPlayEvent.h"
#include "MPNowPlayingContentItem.h"
#include "MPQueueFeeder.h"

@class AVAsset, AVPlayerItem, AVPlayerItemAccessLog, AVPlayerItemMetadataOutput, ICMusicSubscriptionLeaseStatus, NSArray, NSDictionary, NSError, NSMutableArray, NSMutableSet, NSNumber, NSString;
@protocol MPAVItemObserver, OS_dispatch_queue;

@interface MPAVItem : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_assetQueue;
  AVPlayerItem *_avPlayerItem;
  double _cachedDuration;
  double _cachedPlayableDuration;
  NSArray *_cachedSeekableTimeRanges;
  double _seekableTimeRangesCacheTime;
  unsigned int x :2 _isStreamable;
  unsigned int x :1 _watchingAttributes;
  unsigned int x :1 _lyricsAvailable;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
  BOOL _hasLoadedHasProtectedContent;
  BOOL _hasLoadedPlaybackMode;
  BOOL _hasValidPlayerItemDuration;
  double _lastLoggedTotalDuration;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _playerItemDuration;
  long long _exportableArtworkRevision;
  MPMediaLibraryPrivacyContext *_privacyContext;
  AVPlayerItemMetadataOutput *_metadataOutput;
  NSMutableSet *_pendingContentItemUpdates;
  float _currentPlaybackRate;
}

@property (nonatomic) BOOL isAssetLoaded;
@property (nonatomic) long long nowPlayingInfoQueueIndex;
@property (nonatomic) long long nowPlayingInfoQueueCount;
@property (readonly, nonatomic) BOOL placeholder;
@property (nonatomic) long long lastChangeDirection;
@property (readonly, nonatomic) BOOL shouldPreventPlayback;
@property (nonatomic) BOOL isStartItem;
@property (nonatomic) BOOL isHostingSharedSession;
@property (copy, nonatomic) NSString *associatedParticipantIdentifier;
@property (readonly, nonatomic) MPModelGenericObject *modelGenericObject;
@property (retain, nonatomic) MPModelPlayEvent *modelPlayEvent;
@property (readonly, copy, nonatomic) NSNumber *bookmarkTime;
@property (readonly, copy, nonatomic) NSNumber *initialPlaybackStartTime;
@property (copy, nonatomic) NSNumber *initialPlaybackStartTimeOverride;
@property (readonly, copy, nonatomic) NSNumber *playbackInfoStartTime;
@property (copy, nonatomic) NSNumber *lastMetadataChangeTime;
@property (readonly, copy, nonatomic) NSString *rtcReportingServiceIdentifier;
@property (readonly, nonatomic) BOOL allowsAirPlayFromCloud;
@property (readonly, nonatomic) BOOL allowsExternalPlayback;
@property (readonly, nonatomic) BOOL requiresLoadedAssetForAirPlayProperties;
@property (nonatomic) float _currentPlaybackRate;
@property (readonly, nonatomic) BOOL hasFinishedDownloading;
@property (nonatomic) BOOL hasPerformedErrorResolution;
@property (copy, nonatomic) NSDictionary *playbackInfo;
@property (retain, nonatomic) AVPlayerItem *playerItem;
@property (readonly, nonatomic) struct OpaqueCMTimebase * timebase;
@property (nonatomic) BOOL activeItem;
@property (readonly, copy, nonatomic) NSString *storeFrontIdentifier;
@property (nonatomic) BOOL externalDisplay;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } _playerItemDurationIfAvailable;
@property (readonly, nonatomic) NSNumber *storeAccountID;
@property (readonly, nonatomic) long long leasePlaybackPreventionState;
@property (readonly, copy, nonatomic) ICMusicSubscriptionLeaseStatus *leaseStatus;
@property (copy, nonatomic) NSString *explicitBadge;
@property (readonly, nonatomic) BOOL didReachEnd;
@property (readonly, nonatomic) BOOL canUseLoadedAsset;
@property (nonatomic) BOOL inOverlappedTransition;
@property (nonatomic) double overlappedTransitionDuration;
@property (readonly, nonatomic) BOOL supportsFastForward;
@property (readonly, nonatomic) BOOL supportsRewind;
@property (readonly, nonatomic) BOOL supportsRateChange;
@property (readonly, copy, nonatomic) NSString *contentItemID;
@property (readonly, copy, nonatomic) NSString *queueSectionID;
@property (readonly, copy, nonatomic) NSString *queueItemID;
@property (nonatomic) BOOL autoPlayItem;
@property (nonatomic) BOOL sharedListeningItem;
@property (nonatomic) long long explicitContentState;
@property (readonly, nonatomic) MPNowPlayingContentItem *contentItem;
@property (readonly, nonatomic) BOOL supportsVocalAttenuation;
@property (nonatomic) BOOL configuredForVocalAttenuation;
@property (readonly, nonatomic) NSArray *adjunctErrors;
@property (weak, nonatomic) NSObject<MPAVItemObserver> *observer;
@property (readonly, nonatomic) BOOL assetLoaded;
@property (readonly, nonatomic) BOOL assetURLValid;
@property (readonly, nonatomic) BOOL didAttemptToLoadAsset;
@property (readonly, nonatomic) AVAsset *asset;
@property (readonly, nonatomic) BOOL canReusePlayerItem;
@property (readonly, copy, nonatomic) NSError *playbackError;
@property (retain, nonatomic) NSError *itemError;
@property (readonly, nonatomic) long long status;
@property (retain, nonatomic) NSString *queueIdentifier;
@property (readonly, nonatomic) BOOL alwaysLive;
@property (readonly, nonatomic) BOOL usesBookmarking;
@property (weak, nonatomic) MPQueueFeeder *feeder;
@property (readonly, nonatomic) long long playbackMode;
@property (readonly, nonatomic) AVPlayerItemAccessLog *accessLog;
@property (readonly, nonatomic) double currentTimeDisplayOverride;
@property (nonatomic) float defaultPlaybackRate;
@property (readonly, nonatomic) NSArray *chapterTimeMarkers;
@property (readonly, nonatomic) NSArray *artworkTimeMarkers;
@property (readonly, nonatomic) NSArray *urlTimeMarkers;
@property (retain, nonatomic) NSArray *closedCaptionTimeMarkers;
@property (readonly, nonatomic) BOOL useEmbeddedChapterData;
@property (readonly, nonatomic) long long type;
@property (readonly, nonatomic) long long customAVEQPreset;
@property (readonly, nonatomic) BOOL allowsEQ;
@property (readonly, nonatomic) NSString *displayableText;
@property (readonly, nonatomic) BOOL displayableTextLoaded;
@property (readonly, nonatomic) NSString *album;
@property (readonly, nonatomic) long long albumStoreID;
@property (readonly, nonatomic) NSString *artist;
@property (readonly, nonatomic) BOOL artistUploadedContent;
@property (readonly, nonatomic) NSString *albumArtist;
@property (readonly, nonatomic) long long storeAlbumArtistID;
@property (readonly, nonatomic) long long artistStoreID;
@property (readonly, nonatomic) unsigned long long albumTrackNumber;
@property (readonly, nonatomic) unsigned long long albumTrackCount;
@property (readonly, nonatomic) NSString *composer;
@property (readonly, copy, nonatomic) NSString *copyrightText;
@property (readonly, nonatomic) unsigned long long discNumber;
@property (readonly, nonatomic) unsigned long long discCount;
@property (readonly, nonatomic) BOOL explicitTrack;
@property (readonly, copy, nonatomic) NSString *externalContentIdentifier;
@property (readonly, nonatomic) NSString *genre;
@property (readonly, nonatomic) unsigned long long mediaType;
@property (nonatomic) long long likedState;
@property (readonly, nonatomic) BOOL likedStateEnabled;
@property (readonly, nonatomic) BOOL supportsLikedState;
@property (readonly, nonatomic) NSString *lyrics;
@property (readonly, nonatomic) NSString *libraryLyrics;
@property (readonly, nonatomic) BOOL hasStoreLyrics;
@property (readonly, nonatomic) BOOL hasTimeSyncedLyrics;
@property (readonly, nonatomic) NSString *itemDescription;
@property (readonly, copy, nonatomic) NSString *containerUniqueID;
@property (readonly, nonatomic) NSString *mainTitle;
@property (readonly, nonatomic) BOOL streamable;
@property (readonly, nonatomic) unsigned long long persistentID;
@property (readonly, nonatomic) NSString *databaseID;
@property (readonly, nonatomic) unsigned long long cloudID;
@property (readonly, nonatomic) NSString *personID;
@property (readonly, nonatomic) NSString *cloudUniversalLibraryID;
@property (readonly, nonatomic) NSString *cloudAlbumID;
@property (readonly, nonatomic) unsigned long long albumPersistentID;
@property (readonly, nonatomic) unsigned long long albumArtistPersistentID;
@property (readonly, nonatomic) unsigned long long artistPersistentID;
@property (readonly, nonatomic) unsigned long long genrePersistentID;
@property (readonly, nonatomic) unsigned long long composerPersistentID;
@property (readonly, nonatomic) BOOL shouldShowComposer;
@property (readonly, nonatomic) NSString *storeItemID;
@property (readonly, nonatomic) long long storeItemInt64ID;
@property (readonly, nonatomic) long long storePurchasedAdamID;
@property (readonly, nonatomic) long long storeSubscriptionAdamID;
@property (readonly, nonatomic) long long reportingAdamID;
@property (readonly, nonatomic) long long lyricsAdamID;
@property (readonly, nonatomic) float userRating;
@property (readonly, nonatomic) BOOL durationIsValid;
@property (readonly, nonatomic) double durationIfAvailable;
@property (readonly, nonatomic) double durationFromExternalMetadata;
@property (readonly, nonatomic) double playableDuration;
@property (readonly, nonatomic) double playableDurationIfAvailable;
@property (readonly, nonatomic) double timeOfSeekableStart;
@property (readonly, nonatomic) double timeOfSeekableEnd;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } naturalSize;
@property (readonly, nonatomic) NSArray *timedMetadataIfAvailable;
@property (readonly, nonatomic) BOOL usesSubscriptionLease;
@property (nonatomic) double lastPlayPerformanceTime;
@property (readonly, retain, nonatomic) MPMediaItem *mediaItem;
@property (readonly, nonatomic) BOOL mediaItemNeedsLoading;
@property (nonatomic) float loudnessInfoVolumeNormalization;
@property (nonatomic) float soundCheckVolumeNormalization;
@property (readonly, nonatomic) BOOL supportsRating;
@property (readonly, nonatomic) BOOL prefersSeekOverSkip;
@property (readonly, nonatomic) BOOL hasProtectedContent;
@property (readonly, nonatomic) BOOL radioItem;
@property (readonly, nonatomic) BOOL stationAllowsItemLiking;
@property (readonly, copy, nonatomic) NSString *stationHash;
@property (readonly, nonatomic) long long stationID;
@property (readonly, copy, nonatomic) NSString *stationName;
@property (readonly, copy, nonatomic) NSString *stationStringID;
@property (readonly, nonatomic) long long stationProviderID;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } duration;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } forwardPlaybackEndTime;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } presentationSize;

/* class methods */
+ (BOOL)isPlaceholder;
+ (id)URLFromPath:(id)path;

/* instance methods */
- (id)artworkCatalogForPlaybackTime:(double)time;
- (id /* block */)artworkCatalogBlock;
- (BOOL)isPlaceholder;
- (BOOL)isSupportedDefaultPlaybackSpeed:(long long)speed;
- (id)init;
- (id)initWithURL:(id)url;
- (id)initWithURL:(id)url options:(id)options;
- (id)initWithAsset:(id)asset;
- (id)initWithPlayerItem:(id)item;
- (void)dealloc;
- (id)description;
- (void)disableItemReuse;
- (void)loadAssetAndPlayerItem;
- (void)_loadAssetAndPlayerItem;
- (void)updatePlayerItemMetadata;
- (void)notePlaybackFinishedByHittingEnd;
- (void)copyPlayerItem;
- (void)setRating:(float)rating;
- (int)subtitleTrackID;
- (void)setSubtitleTrackID:(int)id;
- (double)durationInSeconds;
- (id)path;
- (id)url;
- (long long)albumYear;
- (BOOL)isArtistUploadedContent;
- (void)applyVolumeNormalizationWithSoundCheckEnabled:(BOOL)enabled;
- (BOOL)isValidPlayerSubstituteForItem:(id)item;
- (BOOL)isAssetURLValid;
- (BOOL)isExplicitTrack;
- (BOOL)isAlwaysLive;
- (BOOL)isStreamable;
- (void)prepareForRate:(float)rate completionHandler:(id /* block */)handler;
- (void)setLikedState:(long long)state forUserIdentity:(id)identity;
- (void)setContentItemID:(id)id queueSectionID:(id)id queueItemID:(id)id;
- (BOOL)isRadioItem;
- (id)_imageChapterTrackIDsForAsset:(id)asset;
- (double)_durationFromExternalMetadataIfAvailable;
- (void)_internalLikedStateDidChangeNotification:(id)notification;
- (void)_itemAttributeAvailableKey:(id)key;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)_addObservationsForAVPlayerItem:(id)item;
- (void)_removeObservationsForAVPlayerItem:(id)item;
- (void)_likedStateDidChange;
- (id)_initialPlaybackStartTimeForPlaybackInfo:(id)info;
- (id)_seekableTimeRanges;
- (double)_playableDurationForLoadedTimeRanges:(id)ranges;
- (void)_loadAssetProperties;
- (void)_updateSoundCheckVolumeNormalizationForPlayerItem;
- (BOOL)_shouldPublishArtworkURL;
- (void)_performContentItemUpdate:(id /* block */)update debounceWithIdentifier:(id)identifier;
- (void)_clearAsset;
- (void)_clearAssetNow;
- (void)_onAssetQueueClearAsset;
- (void)_pickupContentItemFrom:(id)from;
- (void)_updateContentItem;
- (void)_updateContentItemIncludingPlaybackState:(BOOL)state;
- (void)_updateAudioFormatInfoForContentItem:(id)item;
- (id)_contentItemUserInfo;
- (id)_contentItemDeviceSpecificUserInfo;
- (void)setupEQPresetWithDefaultPreset:(long long)preset;
- (void)setupWithPlaybackInfo;
- (void)_updateDurationSnapshotWithElapsedTime:(double)time playbackRate:(float)rate;
- (void)_currentPlaybackRateDidChange:(float)change;
- (void)_applyLoudnessInfo;
- (double)_expectedStartTimeWithPlaybackInfo:(id)info;
- (double)_expectedStopTimeWithPlaybackInfo:(id)info;
- (void)_handleUpdatedLikedState:(long long)state forUserIdentity:(id)identity completion:(id /* block */)completion;
- (long long)_persistedLikedState;
- (void)_setCurrentPlaybackRate:(float)rate;
- (void)_setNeedsPersistedLikedStateUpdate;
- (void)invalidateContentItemUserInfo;
- (void)invalidateContentItemDeviceSpecificUserInfo;
- (void)invalidateContentItemAudioFormatInfo;
- (void)reevaluateHasProtectedContent;
- (void)reevaluateType;
- (void)replacePlayerItemWithPlayerItem:(id)item;
- (void)resolvePlaybackError:(id)error withCompletion:(id /* block */)completion;
- (void)_updateHasFinishedDownloading;
- (void)_willBecomeActivePlayerItem;
- (void)_willResignActivePlayerItem;
- (void)_didResignActivePlayerItem;
- (void)_didBecomeActivePlayerItem;
- (id)analyticsContentType;
- (id)analyticsFormatType;
- (void)pauseContentKeySession;
- (void)resumeContentKeySession;
- (void)addAdjunctError:(id)error;
- (void)clearAdjunctErrors;
- (BOOL)isLikedStateEnabled;
- (BOOL)isActiveItem;
- (BOOL)hasExternalDisplay;
- (BOOL)isInOverlappedTransition;
- (BOOL)isAutoPlayItem;
- (BOOL)isSharedListeningItem;
- (BOOL)isConfiguredForVocalAttenuation;
@end

#endif /* MPAVItem_h */
