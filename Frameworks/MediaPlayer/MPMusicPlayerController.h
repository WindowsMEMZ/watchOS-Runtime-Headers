//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.3.0.0
//
#ifndef MPMusicPlayerController_h
#define MPMusicPlayerController_h
@import Foundation;

#include "MPArtworkDataSource-Protocol.h"
#include "MPMediaItem.h"
#include "MPMediaPlayback-Protocol.h"
#include "MPMusicPlayerControllerClient-Protocol.h"
#include "MPMusicPlayerControllerNowPlaying.h"
#include "MPMusicPlayerControllerNowPlayingTimeSnapshot.h"
#include "MPMusicPlayerQueueDescriptor.h"
#include "MPNowPlayingInfoAudioFormat.h"
#include "MPVolumeController.h"
#include "MPVolumeControllerDelegate-Protocol.h"

@class NSArray, NSString, NSXPCConnection;
@protocol OS_dispatch_queue;

@interface MPMusicPlayerController : NSObject<MPArtworkDataSource, MPVolumeControllerDelegate, MPMusicPlayerControllerClient, MPMediaPlayback> {
  /* instance variables */
  BOOL _serverValidated;
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _lock;
}

@property (readonly, copy, nonatomic) NSString *clientIdentifier;
@property (readonly, nonatomic) NSXPCConnection *connection;
@property (readonly, nonatomic) MPMusicPlayerControllerNowPlaying *serverNowPlaying;
@property (readonly, nonatomic) MPMusicPlayerControllerNowPlayingTimeSnapshot *serverTimeSnapshot;
@property (readonly, nonatomic) MPMusicPlayerQueueDescriptor *serverQueueDescriptor;
@property (readonly, nonatomic) MPMusicPlayerControllerNowPlayingTimeSnapshot *lastServerTimeSnapshot;
@property (readonly, nonatomic) MPMusicPlayerControllerNowPlaying *lastServerNowPlaying;
@property (readonly, nonatomic) NSArray *lastContentItemIDs;
@property (readonly, nonatomic) MPMusicPlayerQueueDescriptor *targetQueueDescriptor;
@property (readonly, nonatomic) long long notificationsCounter;
@property (readonly, nonatomic) MPVolumeController *volumeController;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic) long long playbackSpeed;
@property (readonly, nonatomic) BOOL isNowPlayingItemFromGeniusMix;
@property (nonatomic) unsigned long long currentChapterIndex;
@property (nonatomic) unsigned long long nowPlayingUID;
@property (nonatomic) BOOL userQueueModificationsDisabled;
@property (readonly, nonatomic) MPNowPlayingInfoAudioFormat *nowPlayingAudioFormat;
@property (nonatomic) BOOL prioritizeStartupOverQuality;
@property (readonly, nonatomic) long long playbackState;
@property (nonatomic) long long repeatMode;
@property (nonatomic) long long shuffleMode;
@property (nonatomic) float volume;
@property (copy, nonatomic) MPMediaItem *nowPlayingItem;
@property (readonly, nonatomic) unsigned long long indexOfNowPlayingItem;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) BOOL isPreparedToPlay;
@property (nonatomic) double currentPlaybackTime;
@property (nonatomic) float currentPlaybackRate;

/* class methods */
+ (id)systemMusicPlayer;
+ (id)applicationQueuePlayer;
+ (id)applicationMusicPlayer;
+ (id)alloc;
+ (id)iPodMusicPlayer;
+ (void)setRunLoopForNotifications:(id)notifications;

/* instance methods */
- (id)initWithClientIdentifier:(id)identifier;
- (id)initWithClientIdentifier:(id)identifier queue:(id)queue;
- (void)dealloc;
- (long long)_serverRepeatMode;
- (void)_setServerRepeatMode:(long long)mode;
- (long long)_serverShuffleMode;
- (void)_setServerShuffleMode:(long long)mode;
- (unsigned long long)nowPlayingUIDAtIndex:(unsigned long long)index;
- (void)_setNowPlayingItem:(id)item itemIdentifier:(id)identifier;
- (void)_setNowPlayingItemWithIdentifier:(id)identifier;
- (void)setQueueWithQuery:(id)query;
- (void)setQueueWithItemCollection:(id)collection;
- (void)setQueueWithStoreIDs:(id)ids;
- (void)setQueueWithDescriptor:(id)descriptor;
- (void)prependQueueDescriptor:(id)descriptor;
- (void)appendQueueDescriptor:(id)descriptor;
- (void)prepareToPlayWithCompletionHandler:(id /* block */)handler timeout:(double)timeout;
- (void)prepareToPlayWithCompletionHandler:(id /* block */)handler;
- (void)skipToNextItem;
- (void)skipToBeginning;
- (void)skipToPreviousItem;
- (void)beginGeneratingPlaybackNotifications;
- (void)endGeneratingPlaybackNotifications;
- (void)setQueueWithQuery:(id)query firstItem:(id)item;
- (void)setQueueWithRadioStation:(id)station;
- (id)queueAsQuery;
- (id)queueAsRadioStation;
- (id)nowPlayingAtIndex:(long long)index;
- (id)nowPlayingItemAtIndex:(unsigned long long)index;
- (void)shuffle;
- (void)pauseWithFadeoutDuration:(double)duration;
- (void)skipToBeginningOrPreviousItem;
- (void)prepareQueueForPlayback;
- (unsigned long long)numberOfItems;
- (void)prepareToPlay;
- (void)play;
- (void)pause;
- (void)stop;
- (void)beginSeekingForward;
- (void)beginSeekingBackward;
- (void)endSeeking;
- (void)setVolumePrivate:(float)private;
- (BOOL)isGeniusAvailable;
- (BOOL)isGeniusAvailableForSeedItems:(id)items;
- (BOOL)setQueueWithSeedItems:(id)items;
- (void)setQueueWithGeniusMixPlaylist:(id)playlist;
- (void)adjustLoadedQueueRangeToReverseCount:(long long)count forwardCount:(long long)count;
- (void)applyServerStateUpdateRecord:(id)record;
- (void)_onQueue_applyServerStateUpdateRecord:(id)record;
- (void)serverPlaybackModeDidChangeAffectingQueue:(BOOL)queue;
- (void)serverItemDidEnd;
- (void)serverQueueDidEnd;
- (BOOL)areRepresentationsAvailableForCatalog:(id)catalog;
- (void)cancelLoadingRepresentationForArtworkCatalog:(id)catalog;
- (id)existingRepresentationForArtworkCatalog:(id)catalog;
- (BOOL)isRepresentation:(id)representation bestRepresentationForArtworkCatalog:(id)catalog;
- (void)loadRepresentationForArtworkCatalog:(id)catalog completionHandler:(id /* block */)handler;
- (id)visualIdenticalityIdentifierForCatalog:(id)catalog;
- (void)volumeController:(id)controller volumeValueDidChange:(float)change;
- (void)volumeController:(id)controller mutedStateDidChange:(BOOL)change;
- (void)_clearConnection;
- (void)_establishConnectionIfNeeded;
- (void)_validateServer;
- (void)onServer:(id /* block */)server;
- (void)onServerAsync:(id /* block */)async errorHandler:(id /* block */)handler;
- (void)onServerAsync:(id /* block */)async errorHandler:(id /* block */)handler timeout:(double)timeout retryEnabled:(BOOL)enabled;
- (id)_queueDescriptor;
- (id)_nowPlaying;
- (id)_snapshot;
- (id)_mediaItemFromNowPlaying:(id)playing;
- (void)_postPrivateQueueDidChangeNotificationWithContentItemIDs:(id)ids;
@end

#endif /* MPMusicPlayerController_h */
