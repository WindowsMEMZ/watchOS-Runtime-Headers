//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.3.0.0
//
#ifndef MPPlaybackContext_h
#define MPPlaybackContext_h
@import Foundation;

#include "MPAVItem.h"
#include "MPMusicPlayerQueueDescriptor.h"
#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@class ICUserIdentity, NSData, NSDictionary, NSNumber, NSString;

@interface MPPlaybackContext : NSObject<NSSecureCoding, NSCopying> {
  /* instance variables */
  MPAVItem *_playerCurrentItem;
}

@property (copy, nonatomic) ICUserIdentity *userIdentity;
@property (copy, nonatomic) NSNumber *privateListeningOverride;
@property (nonatomic) long long actionAfterQueueLoad;
@property (readonly, nonatomic) BOOL containsRestorableContent;
@property (readonly, nonatomic) BOOL shouldBecomeActive;
@property (nonatomic) long long shuffleType;
@property (nonatomic) long long repeatType;
@property (nonatomic) long long queueEndAction;
@property (readonly, nonatomic) BOOL supported;
@property (copy, nonatomic) NSString *associatedParticipantIdentifier;
@property (copy, nonatomic) NSString *playActivityQueueGroupingID;
@property (copy, nonatomic) NSString *playActivityFeatureName;
@property (copy, nonatomic) NSData *playActivityRecommendationData;
@property (copy, nonatomic) MPMusicPlayerQueueDescriptor *queueDescriptor;
@property (copy, nonatomic) NSString *siriAssetInfo;
@property (copy, nonatomic) NSString *siriReferenceIdentifier;
@property (copy, nonatomic) NSDictionary *siriWHAMetricsInfo;
@property (copy, nonatomic) NSString *sessionIdentifier;
@property (copy, nonatomic) NSString *overrideSILSectionID;

/* class methods */
+ (Class)queueFeederClass;
+ (BOOL)supportsAutoPlay;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)init;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)descriptionComponents;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)zone;
- (BOOL)isSupported;
- (void)clearStartItem;
- (BOOL)isReusableForPlaybackContext:(id)context;
@end

#endif /* MPPlaybackContext_h */
