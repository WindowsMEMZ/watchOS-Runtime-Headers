//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.3.0.0
//
#ifndef MPAbstractNetworkArtworkDataSource_h
#define MPAbstractNetworkArtworkDataSource_h
@import Foundation;

#include "AVAssetResourceLoaderDelegate-Protocol.h"
#include "MPArtworkDataSource-Protocol.h"
#include "NSURLSessionDataDelegate-Protocol.h"

@class NSCache, NSMapTable, NSMutableDictionary, NSString, NSURL, NSURLCache, NSURLSession, NSURLSessionConfiguration;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface MPAbstractNetworkArtworkDataSource : NSObject<NSURLSessionDataDelegate, AVAssetResourceLoaderDelegate, MPArtworkDataSource>

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *imageAccessQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *videoAccessQueue;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue;
@property (retain, nonatomic) NSCache *fallbackImageArtworkRepresentationCache;
@property (retain, nonatomic) NSMutableDictionary *loadingContexts;
@property (retain, nonatomic) NSMapTable *resourceLoaderStoragePolicyMap;
@property (retain, nonatomic) NSMutableDictionary *videoTaskToCacheStoragePolicy;
@property (retain, nonatomic) NSMutableDictionary *videoTaskToResourceLoadingRequest;
@property (retain, nonatomic) NSMutableDictionary *videoTaskToData;
@property (retain, nonatomic) NSURLSession *imageURLSession;
@property (retain, nonatomic) NSURLSession *videoURLSession;
@property (weak, nonatomic) NSURLCache *videoURLCache;
@property (weak, nonatomic) NSObject<NSURLSessionDataDelegate> *URLSessionDataDelegateProxy;
@property (retain, nonatomic) NSObject<OS_dispatch_source> *memoryPressureNotificationSource;
@property (readonly, nonatomic) NSURLSessionConfiguration *URLSessionConfiguration;
@property (nonatomic) BOOL usesFallbackCache;
@property (retain, nonatomic) NSURL *videoArtworkCacheURL;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)_applyImageURLCachePolicy:(unsigned long long)policy cacheDiskPath:(id)path toConfiguration:(id)configuration;
+ (void)_applyVideoCacheURL:(id)url toConfiguration:(id)configuration;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)updateURLSessionWithCachePolicy:(unsigned long long)policy cachePath:(id)path;
- (BOOL)areRepresentationsAvailableForCatalog:(id)catalog;
- (id)supportedSizesForCatalog:(id)catalog;
- (id)requestForCatalog:(id)catalog size:(struct CGSize { double x0; double x1; })size;
- (id)cacheKeyForCatalog:(id)catalog size:(struct CGSize { double x0; double x1; })size;
- (id)sortedSupportedSizesForCatalog:(id)catalog;
- (BOOL)shouldLookForLargerImageRepresentationsWhenBestRepresentationIsUnavailable;
- (BOOL)wantsBackgroundImageDecompression;
- (BOOL)areRepresentationsOfKind:(long long)kind availableForCatalog:(id)catalog;
- (id)requestForCatalog:(id)catalog kind:(long long)kind size:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })bestAvailableSizeForCatalog:(id)catalog;
- (id)cacheKeyForCatalog:(id)catalog kind:(long long)kind size:(struct CGSize { double x0; double x1; })size;
- (BOOL)isRepresentation:(id)representation bestRepresentationForArtworkCatalog:(id)catalog;
- (id)existingRepresentationForArtworkCatalog:(id)catalog;
- (void)loadRepresentationForArtworkCatalog:(id)catalog completionHandler:(id /* block */)handler;
- (void)cancelLoadingRepresentationForArtworkCatalog:(id)catalog;
- (id)visualIdenticalityIdentifierForCatalog:(id)catalog;
- (id)existingArtworkEffectResultForEffectType:(long long)type catalog:(id)catalog options:(id)options;
- (void)loadArtworkEffectResultForEffectType:(long long)type catalog:(id)catalog options:(id)options systemEffectHandler:(id /* block */)handler completionHandler:(id /* block */)handler;
- (id)existingRepresentationOfKind:(long long)kind forArtworkCatalog:(id)catalog;
- (void)loadRepresentationOfKind:(long long)kind forArtworkCatalog:(id)catalog completionHandler:(id /* block */)handler;
- (BOOL)respondsToSelector:(SEL)selector;
- (void)URLSession:(id)urlsession dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession dataTask:(id)task didReceiveData:(id)data;
- (void)URLSession:(id)urlsession dataTask:(id)task willCacheResponse:(id)response completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession task:(id)task didCompleteWithError:(id)error;
- (BOOL)resourceLoader:(id)loader shouldWaitForLoadingOfRequestedResource:(id)resource;
- (void)resourceLoader:(id)loader didCancelLoadingRequest:(id)request;
- (id)_artworkRepresentationWithImageFromData:(id)data forURLResponse:(id)urlresponse catalog:(id)catalog size:(struct CGSize { double x0; double x1; })size immediateImageDecompressionAllowed:(BOOL)allowed;
- (void)_onImageAccessQueue_cancelLoadingContextForCatalogUUID:(id)uuid withLoadingURL:(id)url;
- (id)_existingRepresentationFromURLCacheForArtworkCatalog:(id)catalog immediateImageDecompressionAllowed:(BOOL)allowed;
- (BOOL)_isRepresentationSize:(struct CGSize { double x0; double x1; })size validForCatalog:(id)catalog;
- (id)_existingRepresentativeObjectForArtworkCatalog:(id)catalog kind:(long long)kind handler:(id /* block */)handler;
- (id)_requestForCatalog:(id)catalog kind:(long long)kind size:(struct CGSize { double x0; double x1; })size;
- (void)_performAsyncBarrierBlockOnQueue:(id)queue block:(id /* block */)block;
- (void)_performSyncBlockOnQueue:(id)queue block:(id /* block */)block;
- (id)_bestVideoArtworkRepresentationForCatalog:(id)catalog;
- (id)_cacheKeyForCatalog:(id)catalog kind:(long long)kind size:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })_bestAvailableSizeForCatalog:(id)catalog kind:(long long)kind;
- (BOOL)_subclassImplementsSelector:(SEL)selector;
- (void)_didReceiveMemoryWarningNotification:(id)notification;
- (void)_disableVideoCache;
- (void)_didReceiveWillEnterForegroundNotification:(id)notification;
- (void)_reEnableVideoCache;
- (void)startListeningForMemoryPressureNotifications;
- (void)stopListeningForMemoryPressureNotifications;
@end

#endif /* MPAbstractNetworkArtworkDataSource_h */
