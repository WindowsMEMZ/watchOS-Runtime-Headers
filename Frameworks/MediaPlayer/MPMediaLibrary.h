//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4023.330.3.0.0
//
#ifndef MPMediaLibrary_h
#define MPMediaLibrary_h
@import Foundation;

#include "MPMediaLibraryDataProviderPrivate-Protocol.h"
#include "MPMediaLibraryPrivacyContext.h"
#include "NSSecureCoding-Protocol.h"
#include "QueryCriteriaResultsCache.h"
#include "_MPActiveUserChangeMonitor.h"
#include "_MPActiveUserChangeMonitorDelegate-Protocol.h"

@class BOOL *, ICUserIdentity, ML3MusicLibrary, MSVSQLDatabase, NSArray, NSDate, NSMutableArray, NSMutableDictionary, NSNumber, NSPointerArray, NSString, NSURL;
@protocol OS_dispatch_queue, struct shared_ptr<mlcore::DeviceLibrary> { struct DeviceLibrary * x0; struct __shared_weak_count * x1; };

@interface MPMediaLibrary : NSObject<_MPActiveUserChangeMonitorDelegate, NSSecureCoding> {
  /* instance variables */
  MPMediaLibraryPrivacyContext *_privacyContext;
  NSObject<MPMediaLibraryDataProviderPrivate> *_libraryDataProvider;
  NSObject<OS_dispatch_queue> *_entityCacheQueue;
  NSObject<OS_dispatch_queue> *_fixedQueue;
  NSArray *_notificationObservers;
  QueryCriteriaResultsCache *_itemsForCriteriaCache;
  QueryCriteriaResultsCache *_hasItemsForCriteriaCache;
  QueryCriteriaResultsCache *_countOfItemsForCriteriaCache;
  QueryCriteriaResultsCache *_itemResultSetsForCriteriaCache;
  QueryCriteriaResultsCache *_collectionsForCriteriaCache;
  QueryCriteriaResultsCache *_hasCollectionsForCriteriaCache;
  QueryCriteriaResultsCache *_countOfCollectionsForCriteriaCache;
  QueryCriteriaResultsCache *_collectionsResultSetsForCriteriaCache;
  NSMutableDictionary *_hasItemsDidLoadForCriteria;
  NSMutableDictionary *_hasCollectionsDidLoadForCriteria;
  NSMutableDictionary *_countOfCollectionsDidLoadForCriteria;
  NSMutableDictionary *_countOfItemsDidLoadForCriteria;
  NSMutableArray *_additionalLibraryFilterPredicates;
  NSObject<OS_dispatch_queue> *_additionalLibraryFilterPredicatesAccessQueue;
  NSPointerArray *_connectionAssertions;
  NSObject<OS_dispatch_queue> *_connectionAssertionsQueue;
  BOOL _disconnectAfterReleasingAssertions;
  float _connectionProgress;
  unsigned int x :1 _determinedHasMedia;
  unsigned int x :1 _hasMedia;
  unsigned int x :1 _determinedHasSongs;
  unsigned int x :1 _hasSongs;
  unsigned int x :1 _determinedHasGeniusMixes;
  unsigned int x :1 _hasGeniusMixes;
  unsigned int x :1 _determinedHasPlaylists;
  unsigned int x :1 _hasPlaylists;
  unsigned int x :1 _determinedHasComposers;
  unsigned int x :1 _hasComposers;
  unsigned int x :1 _determinedHasPodcasts;
  unsigned int x :1 _hasPodcasts;
  unsigned int x :1 _determinedHasUbiquitousBookmarkableItems;
  unsigned int x :1 _hasUbiquitousBookmarkableContent;
  unsigned int x :1 _determinedHasAudiobooks;
  unsigned int x :1 _hasAudiobooks;
  long long _cloudFilteringType;
  BOOL _filteringDisabled;
  BOOL _hasVideos;
  BOOL _determinedHasVideos;
  BOOL _hasMusicVideos;
  BOOL _determinedHasMusicVideos;
  BOOL _hasAudibleAudioBooks;
  BOOL _determinedHasAudibleAudioBooks;
  BOOL _hasMovies;
  BOOL _determinedHasMovies;
  BOOL _hasCompilations;
  BOOL _determinedHasCompilations;
  BOOL _hasITunesU;
  BOOL _determinedHasITunesU;
  BOOL _hasVideoITunesU;
  BOOL _determinedHasVideoITunesU;
  BOOL _hasMovieRentals;
  BOOL _determinedHasMovieRentals;
  BOOL _hasTVShows;
  BOOL _determinedHasTVShows;
  BOOL _hasHomeVideos;
  BOOL _determinedHasHomeVideos;
  BOOL _hasVideoPodcasts;
  BOOL _determinedHasVideoPodcasts;
  unsigned char _originalCellNetworkFlags;
  unsigned char _originalWiFiNetworkFlags;
}

@property (readonly, nonatomic) struct shared_ptr<mlcore::DeviceLibrary> { struct DeviceLibrary * x0; struct __shared_weak_count * x1; } _MediaLibrary_coreLibrary;
@property (readonly, nonatomic) NSURL *protectedContentSupportStorageURL;
@property (readonly, nonatomic) NSString *_syncValidity;
@property (copy, nonatomic) NSNumber *sagaAccountID;
@property (copy, nonatomic) NSDate *sagaLastItemPlayDataUploadDate;
@property (copy, nonatomic) NSDate *sagaLastPlaylistPlayDataUploadDate;
@property (nonatomic) long long sagaDatabaseUserVersion;
@property (copy, nonatomic) NSString *storefrontIdentifier;
@property (copy, nonatomic) NSDate *sagaLastLibraryUpdateTime;
@property (copy, nonatomic) NSDate *sagaLastSubscribedContainersUpdateTime;
@property (nonatomic) long long sagaOnDiskDatabaseRevision;
@property (readonly, nonatomic) long long libraryChangeObservers;
@property (nonatomic) long long removalReason;
@property (readonly, nonatomic) struct os_unfair_lock_s { unsigned int x0; } _MLCoreStorageLock;
@property (retain, nonatomic) _MPActiveUserChangeMonitor *activeUserChangeMonitor;
@property (retain, nonatomic) id _MLCoreStorage;
@property (readonly, nonatomic) struct os_unfair_lock_s { unsigned int x0; } * _MLCoreStorageLockPointer;
@property (readonly, nonatomic) ML3MusicLibrary *ml3Library;
@property (readonly, nonatomic) MSVSQLDatabase *msvDatabase;
@property (readonly, copy, nonatomic) ICUserIdentity *userIdentity;
@property (readonly, nonatomic) NSDate *lastModifiedDate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)initialize;
+ (id)defaultMediaLibrary;
+ (void)setDefaultMediaLibrary:(id)library;
+ (id)deviceMediaLibrary;
+ (id)deviceMediaLibraryWithUserIdentity:(id)identity;
+ (id)_deviceMediaLibraryWithUserIdentity:(id)identity createIfRequired:(BOOL)required;
+ (BOOL)supportsSecureCoding;
+ (id)_mediaLibraryWithUniqueIdentifier:(id)identifier userDSID:(id)dsid;
+ (void)_postNotificationName:(id)name library:(id)library;
+ (void)_postNotificationName:(id)name library:(id)library userInfo:(id)info;
+ (void)beginDiscoveringMediaLibraries;
+ (void)endDiscoveringMediaLibraries;
+ (id)_sharedCloudServiceStatusMonitor;
+ (long long)_mediaLibraryAuthorizationStatusFromCloudServiceAuthorizationStatus:(long long)status;
+ (long long)authorizationStatus;
+ (void)requestAuthorization:(id /* block */)authorization;
+ (void)setGlobalPrivacyClientWithAuditToken:(struct { unsigned int x0[8] })token;
+ (void)logDatabaseAccess;
+ (BOOL)isLibraryServerDisabled;
+ (void)setLibraryServerDisabled:(BOOL)disabled;
+ (void)setRunLoopForNotifications:(id)notifications;
+ (void)_endDiscoveringMediaLibrariesIfAllowed;
+ (id)_mediaLibraries;
+ (id)mediaLibraries;
+ (id)sharedMediaLibraries;
+ (id)mediaLibraryWithUniqueIdentifier:(id)identifier;
+ (id)mediaLibraryWithUniqueIdentifier:(id)identifier allowsLoadingFromDisk:(BOOL)disk;
+ (id)_libraryForDataProvider:(id)provider;
+ (id)_libraryDataProviders;
+ (id)libraryDataProviders;
+ (void)addLibraryDataProvider:(id)provider;
+ (void)removeLibraryDataProvider:(id)provider removalReason:(long long)reason;
+ (void)reloadLibraryDataProvider:(id)provider;
+ (void)postEntitiesAddedOrRemovedNotificationForLibraryDataProvider:(id)provider;
+ (void)reloadDynamicPropertiesForLibraryDataProvider:(id)provider;
+ (void)reloadInvisiblePropertiesForLibraryDataProvider:(id)provider;
+ (void)reloadDisplayValuesForLibraryDataProvider:(id)provider;
+ (void)syncGenerationDidChangeForLibraryDataProvider:(id)provider;
+ (void)uniqueIdentifierDidChangeForLibraryDataProvider:(id)provider;
+ (void)libraryPathDidChangeForDataProvider:(id)provider;

/* instance methods */
- (unsigned long long)filterAvailableContentGroups:(unsigned long long)groups withOptions:(unsigned long long)options;
- (void)clearSagaCloudAccountID;
- (void)clearSagaLastItemPlayDataUploadDate;
- (void)clearSagaLastPlaylistPlayDataUploadDate;
- (id)errorResolverForItem:(id)item;
- (void)enumerateEntityChangesAfterSyncAnchor:(id)anchor maximumRevisionType:(long long)type inUsersLibrary:(BOOL)library usingBlock:(id /* block */)block;
- (void)enumerateEntityChangesAfterSyncAnchor:(id)anchor maximumRevisionType:(long long)type usingBlock:(id /* block */)block;
- (void)enumerateEntityChangesAfterSyncAnchor:(id)anchor usingBlock:(id /* block */)block;
- (void)_updateDeviceLibrary:(struct shared_ptr<mlcore::DeviceLibrary> { struct DeviceLibrary * x0; struct __shared_weak_count * x1; })library expectedEntityCountForEntityClass:(void *)class count:(unsigned long long)count;
- (id)init;
- (id)_initWithUserIdentity:(id)identity;
- (id)initWithDatabasePath:(id)path;
- (id)initWithClientIdentity:(id)identity userIdentity:(id)identity;
- (void)dealloc;
- (BOOL)isEqual:(id)equal;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (void)_clearCountCriteriaCaches;
- (void)_clearCachedEntitiesIncludingResultSets:(BOOL)sets;
- (void)_clearCachedContentDataAndResultSets:(BOOL)sets;
- (void)_scheduleLibraryChangeNotificationPostingBlock:(id /* block */)block;
- (void)_reloadLibraryForRestrictionsChange;
- (void)_reloadLibraryForContentsChangeWithNotificationInfo:(id)info;
- (void)_reloadLibraryForDynamicPropertyChangeWithNotificationInfo:(id)info;
- (void)_reloadLibraryForInvisiblePropertyChangeWithNotificationInfo:(id)info;
- (void)_reloadLibraryForPathChange;
- (void)_activeUserDidChangeNotification:(id)notification;
- (void)_canShowCloudTracksDidChangeNotification:(id)notification;
- (void)_didReceiveMemoryWarning:(id)warning;
- (void)_displayValuesDidChangeNotification:(id)notification;
- (void)beginGeneratingLibraryChangeNotifications;
- (void)endGeneratingLibraryChangeNotifications;
- (void)connectWithCompletionHandler:(id /* block */)handler;
- (void)disconnect;
- (void)addItemWithProductID:(id)id completionHandler:(id /* block */)handler;
- (unsigned long long)currentEntityRevision;
- (unsigned long long)syncGenerationID;
- (long long)playlistGeneration;
- (BOOL)isDeviceLibrary;
- (BOOL)isHomeSharingLibrary;
- (BOOL)writable;
- (long long)status;
- (void)logDatabaseAccess;
- (void)setClientIdentity:(id)identity;
- (id)additionalLibraryFilterPredicates;
- (void)addLibraryFilterPredicate:(id)predicate;
- (void)removeLibraryFilterPredicate:(id)predicate;
- (id)name;
- (id)uniqueIdentifier;
- (id)databasePath;
- (BOOL)hasMediaOfType:(unsigned long long)type;
- (BOOL)hasMedia;
- (BOOL)hasGeniusMixes;
- (BOOL)hasPlaylists;
- (BOOL)hasArtists;
- (BOOL)hasAlbums;
- (BOOL)hasSongs;
- (BOOL)hasPodcasts;
- (BOOL)hasUbiquitousBookmarkableItems;
- (BOOL)hasGenres;
- (BOOL)hasComposers;
- (BOOL)hasAudiobooks;
- (BOOL)_checkHasContent:(BOOL *)content determined:(BOOL *)determined queryHasEntitiesBlock:(id /* block */)block;
- (BOOL)_checkHasContent:(BOOL *)content determined:(BOOL *)determined mediaType:(unsigned long long)type queryHasEntitiesBlock:(id /* block */)block;
- (BOOL)hasVideos;
- (BOOL)hasMusicVideos;
- (BOOL)hasAudibleAudioBooks;
- (BOOL)hasMovies;
- (BOOL)hasCompilations;
- (BOOL)hasITunesUContent;
- (BOOL)hasAudioITunesUContent;
- (BOOL)hasVideoITunesUContent;
- (BOOL)hasMovieRentals;
- (BOOL)hasTVShows;
- (BOOL)hasHomeVideos;
- (BOOL)hasVideoPodcasts;
- (BOOL)hasUserPlaylists;
- (BOOL)hasAddedToLibraryAppleMusicContent;
- (BOOL)hasUserPlaylistsContainingAppleMusicContent;
- (BOOL)itemExistsWithPersistentID:(unsigned long long)id;
- (BOOL)itemExistsInDatabaseWithPersistentID:(unsigned long long)id;
- (BOOL)playlistExistsWithPersistentID:(unsigned long long)id;
- (BOOL)collectionExistsWithPersistentID:(unsigned long long)id groupingType:(long long)type;
- (id)collectionWithPersistentID:(unsigned long long)id groupingType:(long long)type;
- (id)collectionWithPersistentID:(unsigned long long)id groupingType:(long long)type verifyExistence:(BOOL)existence;
- (id)itemWithPersistentID:(unsigned long long)id;
- (id)itemWithPersistentID:(unsigned long long)id verifyExistence:(BOOL)existence;
- (id)itemWithStoreID:(unsigned long long)id;
- (id)decodeItemWithCoder:(id)coder;
- (id)newPlaylistWithPersistentID:(unsigned long long)id;
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)index;
- (id)localizedSectionIndexTitles;
- (id)playbackHistoryPlaylist;
- (id)favoriteSongsPlaylist;
- (id)photosMemoriesPlaylist;
- (id)playlistWithPersistentID:(unsigned long long)id;
- (id)addPlaylistWithName:(id)name;
- (id)addPlaylistWithName:(id)name activeGeniusPlaylist:(BOOL)playlist;
- (id)_addPlaylistWithName:(id)name externalVendorIdentifier:(id)identifier;
- (id)_addPlaylistWithName:(id)name activeGeniusPlaylist:(BOOL)playlist externalVendorIdentifier:(id)identifier;
- (void)setSyncPlaylistId:(unsigned long long)id;
- (unsigned long long)syncPlaylistId;
- (unsigned int)homeSharingDatabaseID;
- (id)URLForHomeSharingRequest:(id)request;
- (BOOL)deleteItems:(id)items;
- (BOOL)removeItems:(id)items;
- (BOOL)removePlaylist:(id)playlist;
- (void)populateLocationPropertiesOfItem:(id)item withPath:(id)path assetProtectionType:(long long)type;
- (void)populateLocationPropertiesOfItem:(id)item withPath:(id)path assetProtectionType:(long long)type completionBlock:(id /* block */)block;
- (void)clearLocationPropertiesOfItem:(id)item;
- (void)setValues:(id)values forProperties:(id)properties forItemPersistentIDs:(id)ids;
- (void)geniusItemsForSeedItem:(id)item completion:(id /* block */)completion;
- (BOOL)isGeniusEnabled;
- (id)preferredAudioLanguages;
- (id)preferredSubtitleLanguages;
- (BOOL)requiresAuthentication;
- (void)connectWithAuthenticationData:(id)data completionBlock:(id /* block */)block;
- (id)connectionAssertionWithIdentifier:(id)identifier;
- (BOOL)performTransactionWithBlock:(id /* block */)block;
- (void)performReadTransactionWithBlock:(id /* block */)block;
- (BOOL)isCurrentThreadInTransaction;
- (float)connectionProgress;
- (id)syncValidity;
- (id)entityCache;
- (id)valueForDatabaseProperty:(id)property;
- (BOOL)setValue:(id)value forDatabaseProperty:(id)property;
- (BOOL)deleteDatabaseProperty:(id)property;
- (id)multiverseIdentifierForTrackWithPersistentID:(long long)id;
- (id)multiverseIdentifierForCollectionWithPersistentID:(long long)id groupingType:(long long)type;
- (id)entityWithMultiverseIdentifier:(id)identifier;
- (id)entityWithLibraryURL:(id)url;
- (id)entityWithSpotlightIdentifier:(id)identifier;
- (id)entityWithSiriSyncIdentifier:(id)identifier;
- (id)entityWithPersistentID:(long long)id entityType:(long long)type;
- (void)downloadAsset:(id)asset completionHandler:(id /* block */)handler;
- (BOOL)isValidAssetURL:(id)url;
- (id)pathForAssetURL:(id)url;
- (unsigned long long)_persistentIDForAssetURL:(id)url;
- (void)activeUserChangeDidFinish;
- (BOOL)_handlesSameAccountAs:(id)as;
- (void)_performBlockOnLibraryHandlingTheSameAccount:(id /* block */)account;
- (BOOL)collectionExistsContainedWithinPersistentIDs:(const unsigned long long *)ids count:(unsigned long long)count groupingType:(long long)type existentPID:(unsigned long long *)pid;
- (BOOL)collectionExistsWithName:(id)name groupingType:(long long)type existentPID:(unsigned long long *)pid;
- (BOOL)collectionExistsWithStoreID:(long long)id groupingType:(long long)type existentPID:(unsigned long long *)pid;
- (BOOL)collectionExistsWithSagaID:(long long)id groupingType:(long long)type existentPID:(unsigned long long *)pid;
- (BOOL)collectionExistsWithCloudLibraryID:(id)id groupingType:(long long)type existentPID:(unsigned long long *)pid;
- (BOOL)collectionExistsWithCloudUniversalLibraryID:(id)id groupingType:(long long)type existentPID:(unsigned long long *)pid;
- (BOOL)collectionExistsContainedWithinSyncIDs:(id)ids groupingType:(long long)type existentPID:(unsigned long long *)pid;
- (id)_itemsForQueryCriteria:(id)criteria;
- (id)_getCachedValueForQueryCritiera:(id)critiera valueCriteriaCache:(id)cache entitiesForCriteriaCache:(id)cache didLoadBlocksByQueryCriteria:(id)criteria valueLoadedFromEntitiesArrayBlock:(id /* block */)block loadValueFromDataProviderBlock:(id /* block */)block;
- (BOOL)_hasItemsForQueryCriteria:(id)criteria;
- (BOOL)_hasCollectionsForQueryCriteria:(id)criteria;
- (unsigned long long)_countOfItemsForQueryCriteria:(id)criteria;
- (unsigned long long)_countOfCollectionsForQueryCriteria:(id)criteria;
- (id)_itemPersistentIdentifiersForQueryCriteria:(id)criteria;
- (id)_collectionPersistentIdentifiersForQueryCriteria:(id)criteria;
- (void)_clearPendingDisconnection;
- (void)setCloudFilteringType:(long long)type;
- (long long)cloudFilteringType;
- (void)_setLibraryFilterPredicates;
- (id)_collectionsForQueryCriteria:(id)criteria;
- (void)_removeConnectionAssertion:(id)assertion;
- (void)_disconnect;
- (void)_setupNotifications;
- (void)_tearDownNotifications;
- (id)_initWithLibraryDataProvider:(id)provider;
- (id)libraryDataProvider;
- (id)artworkDataSource;
- (void)addStoreItem:(long long)item andAddTracksToCloudLibrary:(BOOL)library withCompletion:(id /* block */)completion;
- (void)addStoreItemIDs:(id)ids andAddTracksToCloudLibrary:(BOOL)library withCompletion:(id /* block */)completion;
- (void)addStoreItemIDs:(id)ids referralObject:(id)object andAddTracksToCloudLibrary:(BOOL)library withCompletion:(id /* block */)completion;
- (void)performStoreItemLibraryImport:(id)import withCompletion:(id /* block */)completion;
- (void)performStoreAlbumArtistLibraryImport:(id)import withCompletion:(id /* block */)completion;
- (void)getPlaylistWithUUID:(id)uuid creationMetadata:(id)metadata completionHandler:(id /* block */)handler;
- (void)addPlaylistStoreItemsWithMetadata:(id)metadata completion:(id /* block */)completion;
- (void)addTracksToMyLibrary:(id)library;
- (void)importArtworkTokenForEntityPersistentID:(unsigned long long)id entityType:(long long)type artworkToken:(id)token artworkType:(long long)type sourceType:(long long)type;
- (BOOL)importOriginalArtworkFromImageData:(id)data withArtworkToken:(id)token artworkType:(long long)type sourceType:(long long)type mediaType:(unsigned long long)type;
- (void)removeArtworkForEntityPersistentID:(unsigned long long)id entityType:(long long)type artworkType:(long long)type sourceType:(long long)type;
- (void)addGlobalPlaylistWithID:(id)id andAddToCloudLibrary:(BOOL)library completion:(id /* block */)completion;
- (void)addToLocalDeviceLibraryGlobalPlaylistWithID:(id)id completion:(id /* block */)completion;
- (void)addNonLibraryOwnedPlaylistWithGlobalID:(id)id completion:(id /* block */)completion;
- (void)addNonLibraryOwnedPlaylistsWithGlobalIDs:(id)ids completion:(id /* block */)completion;
- (void)_setMLCoreStorage:(id)storage;
@end

#endif /* MPMediaLibrary_h */
