//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1338.0.0.0.0
//
#ifndef NSFetchRequest_h
#define NSFetchRequest_h
@import Foundation;

#include "NSPersistentStoreRequest.h"
#include "NSCoding-Protocol.h"
#include "NSCopying-Protocol.h"
#include "NSEntityDescription.h"
#include "NSSecureCoding-Protocol.h"

@class NSArray, NSPredicate, NSString;

@interface NSFetchRequest : NSPersistentStoreRequest<NSSecureCoding, NSCoding, NSCopying> {
  /* instance variables */
  NSArray *_groupByProperties;
  id * _additionalPrivateIvars;
  NSArray *_valuesToFetch;
  unsigned long long _batchSize;
  unsigned long long _allocationSize;
  struct _fetchRequestFlags { unsigned int x :1 distinctValuesOnly; unsigned int x :1 includesSubentities; unsigned int x :1 includesPropertyValues; unsigned int x :3 resultType; unsigned int x :1 returnsObjectsAsFaults; unsigned int x :1 excludePendingChanges; unsigned int x :1 isInUse; unsigned int x :1 entityIsName; unsigned int x :1 refreshesRefetched; unsigned int x :1 propertiesValidated; unsigned int x :1 expressionsValidated; unsigned int x :1 disableCaching; unsigned int x :3 allocationType; unsigned int x :4 batchLRUEntries; unsigned int x :1 asyncRequest; unsigned int x :1 purgeable; unsigned int x :9 _RESERVED; } _flags;
}

@property (nonatomic) BOOL purgeableResult;
@property (retain, nonatomic) NSEntityDescription *entity;
@property (readonly, nonatomic) NSString *entityName;
@property (retain, nonatomic) NSPredicate *predicate;
@property (retain, nonatomic) NSArray *sortDescriptors;
@property (nonatomic) unsigned long long fetchLimit;
@property (retain, nonatomic) NSArray *affectedStores;
@property (nonatomic) unsigned long long resultType;
@property (nonatomic) BOOL includesSubentities;
@property (nonatomic) BOOL includesPropertyValues;
@property (nonatomic) BOOL returnsObjectsAsFaults;
@property (copy, nonatomic) NSArray *relationshipKeyPathsForPrefetching;
@property (nonatomic) BOOL includesPendingChanges;
@property (nonatomic) BOOL returnsDistinctResults;
@property (copy, nonatomic) NSArray *propertiesToFetch;
@property (nonatomic) unsigned long long fetchOffset;
@property (nonatomic) unsigned long long fetchBatchSize;
@property (nonatomic) BOOL shouldRefreshRefetchedObjects;
@property (copy, nonatomic) NSArray *propertiesToGroupBy;
@property (retain, nonatomic) NSPredicate *havingPredicate;

/* class methods */
+ (id)_stringForFetchRequestResultType:(unsigned long long)type;
+ (id)_newDenormalizedFetchProperties:(id)properties;
+ (id)decodeFromXPCArchive:(id)xpcarchive withContext:(id)context andPolicy:(id)policy;
+ (void)initialize;
+ (BOOL)accessInstanceVariablesDirectly;
+ (BOOL)supportsSecureCoding;
+ (id)fetchRequestWithEntityName:(id)name;

/* instance methods */
- (BOOL)_isCachingFetchRequest;
- (void)_setAsyncResultHandle:(id)handle;
- (id)_asyncResultHandle;
- (BOOL)_isAsyncRequest;
- (BOOL)_disablePersistentStoreResultCaching;
- (void)_setDisablePersistentStoreResultCaching:(BOOL)caching;
- (unsigned long long)_fetchBatchLRUEntriesLimit;
- (void)_setFetchBatchLRUEntriesLimit:(unsigned long long)limit;
- (id)_copyForDirtyContext;
- (void)_resolveEntityWithContext:(id)context;
- (void)_incrementInUseCounter;
- (BOOL)_isEditable;
- (void)_throwIfNotEditable;
- (unsigned long long)requestType;
- (id)_XPCEncodedFlags;
- (void)_setFlagsFromXPCEncoding:(id)xpcencoding;
- (void)_writeIntoData:(id)data propertiesDict:(id)dict uniquedPropertyNames:(id)names uniquedStrings:(id)strings uniquedData:(id)data uniquedMappings:(id)mappings entities:(id)entities;
- (id)encodeForXPC;
- (id)init;
- (void)dealloc;
- (unsigned long long)_encodedFetchRequestFlagsForFlags:(unsigned long long)flags;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (id)copyWithZone:(struct _NSZone *)zone;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)equal;
- (id)description;
- (id)execute:(id *)execute;
- (unsigned long long)allocationType;
- (void)setAllocationType:(unsigned long long)type;
- (unsigned long long)allocationSize;
- (void)setAllocationSize:(unsigned long long)size;
- (id)initWithEntityName:(id)name;
@end

#endif /* NSFetchRequest_h */
