//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1299.2.3.1.0
//
#ifndef _LSDisplayNameConstructor_h
#define _LSDisplayNameConstructor_h
@import Foundation;

@class NSString;

@interface _LSDisplayNameConstructor : NSObject {
  /* instance variables */
  NSString *_originalName;
  NSString *_baseName;
  NSString *_extension;
  NSString *_secondaryExtension;
  unsigned int x :1 _wantsHiddenExtension;
  unsigned int x :1 _isFolder;
  unsigned int x :1 _isApplication;
  unsigned int x :1 _hadNonASCIICharacter;
  unsigned int x :1 _hadColonInFSName;
  unsigned int x :1 _hadBiDiControlCharacter;
  unsigned int x :1 _hadForbiddenCharacter;
}

/* class methods */
+ (void)getExtensionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range secondaryExtensionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; } *)range fromFileName:(id)name considerConfusables:(BOOL)confusables;
+ (id)concatenateBaseName:(id)name andExtension:(id)extension;
+ (BOOL)showAllExtensions;
+ (void)setShowAllExtensions:(BOOL)extensions;
+ (id)displayNameConstructorWithContext:(struct LSContext { id x0; } *)context node:(id)node error:(id *)error;
+ (id)displayNameConstructorWithContext:(struct LSContext { id x0; } *)context bundle:(unsigned int)bundle bundleClass:(const unsigned int *)class node:(id)node preferredLocalizations:(id)localizations error:(id *)error;
+ (id)displayNameConstructorsWithContext:(struct LSContext { id x0; } *)context node:(id)node error:(id *)error;
+ (id)displayNameConstructorsWithContext:(struct LSContext { id x0; } *)context bundle:(unsigned int)bundle bundleClass:(const unsigned int *)class node:(id)node error:(id *)error;
+ (id)displayNameConstructorWithContextIfNeeded:(struct Context { struct LSContext * x0; struct LSContext { id x0; } x1; BOOL x2; id x3; } *)needed node:(id)node error:(id *)error;
+ (unsigned char)prepareMimicWithPopulator:(id)populator error:(id *)error;
+ (id)displayNameConstructorWithContextIfNeeded:(struct Context { struct LSContext * x0; struct LSContext { id x0; } x1; BOOL x2; id x3; } *)needed bundle:(unsigned int)bundle bundleClass:(const unsigned int *)class node:(id)node preferredLocalizations:(id)localizations error:(id *)error;
+ (id)displayNameConstructorsWithContextIfNeeded:(struct Context { struct LSContext * x0; struct LSContext { id x0; } x1; BOOL x2; id x3; } *)needed node:(id)node error:(id *)error;
+ (id)displayNameConstructorsWithContextIfNeeded:(struct Context { struct LSContext * x0; struct LSContext { id x0; } x1; BOOL x2; id x3; } *)needed bundle:(unsigned int)bundle bundleClass:(const unsigned int *)class node:(id)node error:(id *)error;
+ (id)suffixForRemoteXCTests;
+ (void)setSuffixForRemoteXCTests:(id)xctests;

/* instance methods */
- (BOOL)isStringNaturallyRTL:(id)rtl;
- (id)initWithContextIfNeeded:(struct Context { struct LSContext * x0; struct LSContext { id x0; } x1; BOOL x2; id x3; } *)needed node:(id)node isDirectory:(BOOL)directory bundleClass:(const unsigned int *)class desiredDisplayName:(id)name treatAsFSName:(BOOL)fsname;
- (void)initNodeBitsWithContextIfNeeded:(struct Context { struct LSContext * x0; struct LSContext { id x0; } x1; BOOL x2; id x3; } *)needed node:(id)node isDirectory:(BOOL)directory bundleClass:(const unsigned int *)class;
- (void)initContentBitsWithDisplayName:(id)name treatAsFSName:(BOOL)fsname;
- (void)initNamePartsWithDisplayName:(id)name;
- (id)cleanSecondaryExtension:(id)extension;
- (id)combineBaseName:(id)name extension:(id)extension;
- (void)getTransformedBaseName:(id *)name extension:(id *)extension needsBiDiControlCharacters:(BOOL x[2])characters;
- (id)transformBeforeCombining:(id)combining needsBiDiControlCharacters:(BOOL *)characters;
- (id)insertNameComponentBiDiControlCharacters:(id)characters;
- (id)insertCompleteNameBiDiControlCharacters:(id)characters;
- (BOOL)wantsHiddenExtension;
- (BOOL)mayHideExtensionWithContextIfNeeded:(struct Context { struct LSContext * x0; struct LSContext { id x0; } x1; BOOL x2; id x3; } *)needed;
- (BOOL)showExtensionWithContextIfNeeded:(struct Context { struct LSContext * x0; struct LSContext { id x0; } x1; BOOL x2; id x3; } *)needed asIfShowingAllExtensions:(id)extensions;
- (BOOL)canSetExtensionHiddenWithContext:(struct LSContext { id x0; } *)context;
- (id)init;
- (id)unlocalizedNameWithContext:(struct LSContext { id x0; } *)context;
- (id)unlocalizedNameWithContext:(struct LSContext { id x0; } *)context asIfShowingAllExtensions:(id)extensions;
- (id)unlocalizedNameWithContextIfNeeded:(struct Context { struct LSContext * x0; struct LSContext { id x0; } x1; BOOL x2; id x3; } *)needed;
- (id)unlocalizedNameWithContextIfNeeded:(struct Context { struct LSContext * x0; struct LSContext { id x0; } x1; BOOL x2; id x3; } *)needed asIfShowingAllExtensions:(id)extensions;
- (void)getUnlocalizedBaseName:(id *)name extension:(id *)extension requiresAdditionalBiDiControlCharacters:(BOOL *)characters;
@end

#endif /* _LSDisplayNameConstructor_h */
