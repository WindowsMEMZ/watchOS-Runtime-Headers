//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1299.2.3.1.0
//
#ifndef FSNode_h
#define FSNode_h
@import Foundation;

#include "FSNodePropertyProviding-Protocol.h"
#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@class BOOL *, NSString, NSURL;

@interface FSNode : NSObject<NSCopying, NSSecureCoding, FSNodePropertyProviding> {
  /* instance variables */
  NSURL *_url;
  unsigned long long _cacheExpiration;
  unsigned int x :2 _isDirectory;
  unsigned int x :1 _hasReferringAliasNode;
  unsigned int x :1 _canUseFileCache;
  unsigned int x :1 _isInitialized;
}

@property (readonly, nonatomic) BOOL canIssueIO;
@property (readonly, @dynamic, nonatomic) BOOL directory;
@property (readonly, @dynamic, nonatomic) BOOL busyDirectory;
@property (readonly, @dynamic, nonatomic) BOOL executableModeFile;
@property (readonly, @dynamic, nonatomic) BOOL executable;
@property (readonly, @dynamic, nonatomic) BOOL resolvable;
@property (readonly, @dynamic, nonatomic) BOOL symbolicLink;
@property (readonly, @dynamic, nonatomic) BOOL aliasFile;
@property (readonly, @dynamic, nonatomic) BOOL hasPackageBit;
@property (readonly, @dynamic, nonatomic) BOOL regularFile;
@property (readonly, @dynamic, nonatomic) BOOL hidden;
@property (readonly, @dynamic, nonatomic) BOOL hasHiddenExtension;
@property (readonly, @dynamic, nonatomic) BOOL volume;
@property (readonly, @dynamic, nonatomic) BOOL mountTrigger;
@property (readonly, @dynamic, nonatomic) BOOL securedSystemContent;
@property (readonly, @dynamic, nonatomic) BOOL onDiskImage;
@property (readonly, @dynamic, nonatomic) BOOL onLocalVolume;
@property (readonly) BOOL AVCHDCollection;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)simulatorRootPath;
+ (id)removeSimulatorRootFromBookmarkData:(id)data;
+ (id)injectSimulatorRootIntoBookmarkData:(id)data;
+ (unsigned char)compareBookmarkData:(id)data toBookmarkData:(id)data;
+ (id)pathForBookmarkData:(id)data error:(id *)error;
+ (id)nameForBookmarkData:(id)data error:(id *)error;
+ (BOOL)getVolumeIdentifier:(unsigned long long *)identifier forBookmarkData:(id)data error:(id *)error;
+ (BOOL)isBookmarkDataFull:(id)full;
+ (BOOL)getFileSystemRepresentation:(char x[1024])representation forBookmarkData:(id)data;
+ (BOOL)canAccessURL:(id)url withAuditToken:(const struct { unsigned int x0[8] } *)token operation:(const char *)operation;
+ (BOOL)canAccessURL:(id)url fromSandboxWithAuditToken:(const struct { unsigned int x0[8] } *)token operation:(const char *)operation;
+ (BOOL)canReadURL:(id)url withAuditToken:(const struct { unsigned int x0[8] } *)token;
+ (BOOL)canWriteURL:(id)url withAuditToken:(const struct { unsigned int x0[8] } *)token;
+ (BOOL)canReadMetadataOfURL:(id)url withAuditToken:(const struct { unsigned int x0[8] } *)token;
+ (BOOL)canReadURL:(id)url fromSandboxWithAuditToken:(const struct { unsigned int x0[8] } *)token;
+ (BOOL)canWriteURL:(id)url fromSandboxWithAuditToken:(const struct { unsigned int x0[8] } *)token;
+ (BOOL)canReadMetadataOfURL:(id)url fromSandboxWithAuditToken:(const struct { unsigned int x0[8] } *)token;
+ (BOOL)supportsSecureCoding;
+ (id)_resolvedURLFromAliasFile:(id)file flags:(unsigned int)flags error:(id *)error;
+ (id)_resolvedNodeFromAliasFile:(id)file flags:(unsigned int)flags error:(id *)error;
+ (id)rootVolumeNode;
+ (id)prebootVolumeNode;
+ (id)systemDataVolumeNode;

/* instance methods */
- (id)bookmarkDataRelativeToNode:(id)node error:(id *)error;
- (id)bookmarkDataWithOptions:(unsigned long long)options relativeToNode:(id)node error:(id *)error;
- (id)initByResolvingBookmarkData:(id)data options:(unsigned long long)options relativeToNode:(id)node bookmarkDataIsStale:(BOOL *)stale error:(id *)error;
- (id)initByResolvingBookmarkData:(id)data relativeToNode:(id)node bookmarkDataIsStale:(BOOL *)stale error:(id *)error;
- (id)extendedAttributeWithName:(id)name options:(int)options error:(id *)error;
- (BOOL)setExtendedAttribute:(id)attribute name:(id)name options:(int)options error:(id *)error;
- (BOOL)canReadWithAuditToken:(const struct { unsigned int x0[8] } *)token;
- (BOOL)canWriteWithAuditToken:(const struct { unsigned int x0[8] } *)token;
- (BOOL)canReadMetadataWithAuditToken:(const struct { unsigned int x0[8] } *)token;
- (BOOL)canReadFromSandboxWithAuditToken:(const struct { unsigned int x0[8] } *)token;
- (BOOL)canWriteFromSandboxWithAuditToken:(const struct { unsigned int x0[8] } *)token;
- (BOOL)canReadMetadataFromSandboxWithAuditToken:(const struct { unsigned int x0[8] } *)token;
- (BOOL)getFinderInfo:(union { unsigned char x0[32] struct { struct FileInfo { unsigned int x0; unsigned int x1; unsigned short x2; struct Point { short x0; short x1; } x3; unsigned short x4; } x0; unsigned char x1[16] } x1; struct { struct FolderInfo { struct Rect { short x0; short x1; short x2; short x3; } x0; unsigned short x1; struct Point { short x0; short x1; } x2; unsigned short x3; } x0; unsigned char x1[16] } x2; } *)info error:(id *)error;
- (BOOL)setFinderInfo:(const union { unsigned char x0[32] struct { struct FileInfo { unsigned int x0; unsigned int x1; unsigned short x2; struct Point { short x0; short x1; } x3; unsigned short x4; } x0; unsigned char x1[16] } x1; struct { struct FolderInfo { struct Rect { short x0; short x1; short x2; short x3; } x0; unsigned short x1; struct Point { short x0; short x1; } x2; unsigned short x3; } x0; unsigned char x1[16] } x2; } *)info error:(id *)error;
- (id)initWithURL:(id)url flags:(unsigned int)flags error:(id *)error;
- (void)prepareForReuse;
- (BOOL)isEqual:(id)equal;
- (id)redactedDescription;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (id)URL;
- (id)initWithPath:(id)path flags:(unsigned int)flags error:(id *)error;
- (id)initWithFileSystemRepresentation:(const char *)representation flags:(unsigned int)flags error:(id *)error;
- (id)initWithDirectory:(unsigned long long)directory inDomain:(unsigned long long)domain lastPathComponent:(id)component createIntermediateDirectories:(BOOL)directories flags:(unsigned int)flags error:(id *)error;
- (id)initWithConfigurationString:(int)string flags:(unsigned int)flags error:(id *)error;
- (id)initTemporaryNodeOnVolume:(id)volume flags:(unsigned int)flags fileDescriptor:(int *)descriptor error:(id *)error;
- (void)clearURLPropertyCacheIfStale;
- (BOOL)getResourceValue:(id *)value forKey:(id)key options:(unsigned char)options error:(id *)error;
- (BOOL)setResourceValue:(id)value forKey:(id)key options:(unsigned char)options error:(id *)error;
- (void)removeCachedResourceValueForKey:(id)key;
- (BOOL)getTemporaryResourceValue:(id *)value forKey:(id)key;
- (void)setTemporaryResourceValue:(id)value forKey:(id)key;
- (BOOL)getCachedResourceValueIfPresent:(id *)present forKey:(id)key error:(id *)error;
- (BOOL)checkResourceIsReachableAndReturnError:(id *)error;
- (BOOL)childNodeWithRelativePathExists:(id)exists;
- (id)childNodeWithRelativePath:(id)path flags:(unsigned int)flags error:(id *)error;
- (id)volumeNodeWithFlags:(unsigned int)flags error:(id *)error;
- (id)diskImageURLWithFlags:(unsigned int)flags error:(id *)error;
- (id)referringAliasNode;
- (void)setReferringAliasNode:(id)node;
- (id)resolvedNodeWithFlags:(unsigned int)flags error:(id *)error;
- (id)temporaryDirectoryNodeWithFlags:(unsigned int)flags error:(id *)error;
- (BOOL)getIsDirectory_NoIO:(BOOL *)io;
- (BOOL)isDirectory;
- (BOOL)isBusyDirectory;
- (BOOL)isExecutableModeFile;
- (BOOL)isExecutable;
- (BOOL)isResolvable;
- (BOOL)isSymbolicLink;
- (BOOL)isAliasFile;
- (BOOL)isRegularFile;
- (BOOL)isHidden;
- (id)canonical:(BOOL)canonical pathWithError:(id *)error;
- (BOOL)getFileSystemRepresentation:(char x[1024])representation error:(id *)error;
- (id)pathWithError:(id *)error;
- (id)canonicalPathWithError:(id *)error;
- (id)nameWithError:(id *)error;
- (id)extensionWithError:(id *)error;
- (BOOL)isVolume;
- (BOOL)isMountTrigger;
- (BOOL)getVolumeIdentifier:(unsigned long long *)identifier error:(id *)error;
- (BOOL)isSecuredSystemContent;
- (BOOL)isOnDiskImage;
- (BOOL)isOnLocalVolume;
- (BOOL)isAVCHDCollection;
- (BOOL)getDeviceNumber:(int *)number error:(id *)error;
- (BOOL)getInodeNumber:(unsigned long long *)number error:(id *)error;
- (BOOL)getFileIdentifier:(unsigned long long *)identifier error:(id *)error;
- (BOOL)getOwnerUID:(unsigned int *)uid error:(id *)error;
- (struct __CFBundle *)copyCFBundleWithError:(id *)error;
- (id)bundleInfoDictionaryWithError:(id *)error;
- (id)bundleIdentifierWithError:(id *)error;
- (id)bundleIdentifierWithContext:(struct LSContext { id x0; } *)context error:(id *)error;
- (BOOL)getCreationDate:(double *)date error:(id *)error;
- (BOOL)getContentModificationDate:(double *)date error:(id *)error;
- (BOOL)getLength:(unsigned long long *)length error:(id *)error;
- (BOOL)getHFSType:(unsigned int *)hfstype creator:(unsigned int *)creator error:(id *)error;
- (BOOL)getWriterBundleIdentifier:(id *)identifier error:(id *)error;
@end

#endif /* FSNode_h */
