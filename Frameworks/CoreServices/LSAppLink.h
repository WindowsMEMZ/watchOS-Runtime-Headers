//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1299.2.3.1.0
//
#ifndef LSAppLink_h
#define LSAppLink_h
@import Foundation;

#include "LSApplicationProxy.h"
#include "LSApplicationRecord.h"
#include "NSSecureCoding-Protocol.h"

@class NSDictionary, NSURL;

@interface LSAppLink : NSObject<NSSecureCoding>

@property (retain, nonatomic) NSDictionary *browserSettings;
@property (@dynamic) long long openStrategy;
@property (copy) NSURL *URL;
@property (retain) LSApplicationRecord *targetApplicationRecord;
@property (readonly) LSApplicationProxy *targetApplicationProxy;
@property (@dynamic, nonatomic) BOOL enabled;

/* class methods */
+ (BOOL)URLComponentsAreValidForAppLinks:(id)links error:(id *)error;
+ (id)_appLinksWithState:(id)state context:(struct LSContext { id x0; } *)context limit:(unsigned long long)limit URLComponents:(id)urlcomponents error:(id *)error;
+ (id)_dispatchQueue;
+ (BOOL)_URLIsValidForAppLinks:(id)links error:(id *)error;
+ (id)_appLinksWithState:(id)state context:(struct LSContext { id x0; } *)context limit:(unsigned long long)limit error:(id *)error;
+ (id)_appLinkWithURL:(id)url applicationRecord:(id)record plugInClass:(Class)class;
+ (void)_openWithAppLink:(id)link state:(id)state completionHandler:(id /* block */)handler;
+ (void)_openAppLink:(id)link state:(id)state completionHandler:(id /* block */)handler;
+ (BOOL)removeAllSettingsReturningError:(id *)error;
+ (void)openWithURL:(id)url completionHandler:(id /* block */)handler;
+ (void)openWithURL:(id)url configuration:(id)configuration completionHandler:(id /* block */)handler;
+ (long long)settingsSwitchStateForApplicationIdentifier:(id)identifier;
+ (BOOL)setSettingsSwitchState:(long long)state forApplicationIdentifier:(id)identifier error:(id *)error;
+ (BOOL)currentProcessHasReadAccess;
+ (BOOL)auditTokenHasReadAccess:(struct { unsigned int x0[8] })access;
+ (BOOL)currentProcessHasWriteAccess;
+ (BOOL)auditTokenHasWriteAccess:(struct { unsigned int x0[8] })access;
+ (id)appLinksWithURL:(id)url limit:(unsigned long long)limit error:(id *)error;
+ (id)appLinksWithURL:(id)url limit:(unsigned long long)limit includeLinksForCurrentApplication:(BOOL)application error:(id *)error;
+ (void)getAppLinkWithURL:(id)url completionHandler:(id /* block */)handler;
+ (void)getAppLinksWithURL:(id)url completionHandler:(id /* block */)handler;
+ (void)afterAppLinksBecomeAvailableForURL:(id)url limit:(unsigned long long)limit performBlock:(id /* block */)block;
+ (BOOL)areEnabledByDefault;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)_userActivityWithState:(id)state error:(id *)error;
- (void)openInWebBrowser:(BOOL)browser setAppropriateOpenStrategyAndWebBrowserState:(id)state completionHandler:(id /* block */)handler;
- (void)openInWebBrowser:(BOOL)browser setOpenStrategy:(long long)strategy webBrowserState:(id)state completionHandler:(id /* block */)handler;
- (void)openInWebBrowser:(BOOL)browser setOpenStrategy:(long long)strategy webBrowserState:(id)state configuration:(id)configuration completionHandler:(id /* block */)handler;
- (BOOL)setBrowserSettings:(id)settings error:(id *)error;
- (BOOL)removeSettingsReturningError:(id *)error;
- (void)openWithCompletionHandler:(id /* block */)handler;
- (void)openWithConfiguration:(id)configuration completionHandler:(id /* block */)handler;
- (BOOL)isAlwaysEnabled;
- (BOOL)isEnabled;
- (BOOL)setEnabled:(BOOL)enabled error:(id *)error;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)equal;
- (id)debugDescription;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
@end

#endif /* LSAppLink_h */
