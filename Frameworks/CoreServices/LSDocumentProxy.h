//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1299.2.3.1.0
//
#ifndef LSDocumentProxy_h
#define LSDocumentProxy_h
@import Foundation;

#include "LSResourceProxy.h"
#include "NSSecureCoding-Protocol.h"

@class NSString, NSURL;

@interface LSDocumentProxy : LSResourceProxy<NSSecureCoding> {
  /* instance variables */
  BOOL _isContentManaged;
}

@property (readonly) BOOL imageOrVideo;
@property (readonly, nonatomic) NSURL *URL;
@property (readonly, nonatomic) NSString *name;
@property (readonly, nonatomic) NSString *typeIdentifier;
@property (readonly, nonatomic) NSString *MIMEType;
@property (readonly, nonatomic) NSString *containerOwnerApplicationIdentifier;
@property (readonly, nonatomic) BOOL contentManaged;
@property (readonly, @dynamic, nonatomic) const struct { unsigned int x0[8] } * sourceAuditToken;
@property (readonly, nonatomic) BOOL sourceIsManaged;
@property (readonly, nonatomic) const struct { unsigned int x0[8] } * managedSourceAuditToken;

/* class methods */
+ (id)documentProxyForURL:(id)url isContentManaged:(BOOL)managed sourceAuditToken:(const struct { unsigned int x0[8] } *)token;
+ (id)documentProxyForName:(id)name type:(id)type MIMEType:(id)mimetype isContentManaged:(BOOL)managed sourceAuditToken:(const struct { unsigned int x0[8] } *)token;
+ (id)documentProxyForURL:(id)url;
+ (id)documentProxyForName:(id)name type:(id)type MIMEType:(id)mimetype;
+ (BOOL)supportsSecureCoding;
+ (id)documentProxyForURL:(id)url managedSourceAuditToken:(const struct { unsigned int x0[8] } *)token;
+ (id)documentProxyForURL:(id)url sourceIsManaged:(BOOL)managed;
+ (id)documentProxyForName:(id)name type:(id)type MIMEType:(id)mimetype managedSourceAuditToken:(const struct { unsigned int x0[8] } *)token;
+ (id)documentProxyForName:(id)name type:(id)type MIMEType:(id)mimetype sourceIsManaged:(BOOL)managed;

/* instance methods */
- (struct optional<LaunchServices::BindingEvaluator> { union { char x0; struct BindingEvaluator { id x0; id x1; id x2; id x3; id x4; BOOL x5; id x6; struct LSVersionNumber { unsigned char x0[32] } x7; id x8; BOOL x9; BOOL x10; unsigned long long x11; unsigned int x12; unsigned int x13; struct vector<LSBundleClass, std::allocator<LSBundleClass>> { unsigned int * x0; unsigned int * x1; struct __compressed_pair<LSBundleClass *, std::allocator<LSBundleClass>> { unsigned int * x0; } x2; } x14; id /* block */ x15; id x16; id /* block */ x17; id x18; } x1; } x0; BOOL x1; })_bindingEvaluatorWithAuditToken:(const struct { unsigned int x0[8] } *)token;
- (id)_boundIconInfo;
- (id)applicationsOrClaimBindings:(BOOL)bindings availableForOpeningWithStyle:(unsigned char)style handlerRank:(id)rank limit:(unsigned long long)limit XPCConnection:(id)xpcconnection error:(id *)error;
- (id)applicationsAvailableForOpeningWithStyle:(unsigned char)style limit:(unsigned long long)limit XPCConnection:(id)xpcconnection error:(id *)error;
- (id)claimBindingsAvailableForOpeningWithStyle:(unsigned char)style handlerRank:(id)rank limit:(unsigned long long)limit XPCConnection:(id)xpcconnection error:(id *)error;
- (id)iconDataForVariant:(int)variant withOptions:(int)options;
- (id)initWithURL:(id)url name:(id)name type:(id)type MIMEType:(id)mimetype isContentManaged:(BOOL)managed sourceAuditToken:(const struct { unsigned int x0[8] } *)token;
- (BOOL)isImageOrVideo;
- (id)availableClaimBindingsReturningError:(id *)error;
- (id)availableClaimBindingsForMode:(unsigned char)mode error:(id *)error;
- (id)availableClaimBindingsForMode:(unsigned char)mode handlerRank:(id)rank error:(id *)error;
- (id)applicationsAvailableForOpeningWithHandlerRanks:(id)ranks error:(id *)error;
- (id)applicationsAvailableForOpeningWithError:(id *)error;
- (id)applicationsAvailableForOpeningFromAirDropWithError:(id *)error;
- (id)applicationsAvailableForOpeningByDraggingAndDroppingWithError:(id *)error;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)uniqueIdentifier;
- (id)description;
- (id)debugDescription;
- (BOOL)isContentManaged;
@end

#endif /* LSDocumentProxy_h */
