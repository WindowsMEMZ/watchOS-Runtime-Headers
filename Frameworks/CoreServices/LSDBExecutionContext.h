//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1299.2.3.1.0
//
#ifndef LSDBExecutionContext_h
#define LSDBExecutionContext_h
@import Foundation;

@protocol OS_dispatch_queue, {CFReleaser<__CSStoreAccessContext *>="fItem"^{__CSStoreAccessContext}}, {unordered_map<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>, std::hash<_opaque_pthread_t *>, std::equal_to<_opaque_pthread_t *>, std::allocator<std::pair<_opaque_pthread_t *const, std::shared_ptr<LaunchServices::PerThreadContext>>>>="__table_"{__hash_table<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, std::__unordered_map_hasher<_opaque_pthread_t *, std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, std::hash<_opaque_pthread_t *>, std::equal_to<_opaque_pthread_t *>>, std::__unordered_map_equal<_opaque_pthread_t *, std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, std::equal_to<_opaque_pthread_t *>, std::hash<_opaque_pthread_t *>>, std::allocator<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<_opaque_pthread_t *, std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, std::hash<_opaque_pthread_t *>, std::equal_to<_opaque_pthread_t *>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<_opaque_pthread_t *, std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, std::equal_to<_opaque_pthread_t *>, std::hash<_opaque_pthread_t *>>>="__value_"f}}};

@interface LSDBExecutionContext : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_maintenanceQueue;
  struct unfair_lock_mutex { unsigned int _os_unfair_lock_opaque; } _databaseLock;
  struct unfair_lock_mutex { unsigned int _os_unfair_lock_opaque; } _perThreadContextsLock;
  struct unordered_map<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>, std::hash<_opaque_pthread_t *>, std::equal_to<_opaque_pthread_t *>, std::allocator<std::pair<_opaque_pthread_t *const, std::shared_ptr<LaunchServices::PerThreadContext>>>> { struct __hash_table<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, std::__unordered_map_hasher<_opaque_pthread_t *, std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, std::hash<_opaque_pthread_t *>, std::equal_to<_opaque_pthread_t *>>, std::__unordered_map_equal<_opaque_pthread_t *, std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, std::equal_to<_opaque_pthread_t *>, std::hash<_opaque_pthread_t *>>, std::allocator<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<_opaque_pthread_t *, std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, std::hash<_opaque_pthread_t *>, std::equal_to<_opaque_pthread_t *>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<_opaque_pthread_t *, std::__hash_value_type<_opaque_pthread_t *, std::shared_ptr<LaunchServices::PerThreadContext>>, std::equal_to<_opaque_pthread_t *>, std::hash<_opaque_pthread_t *>>> { float __value_; } __p3_; } __table_; } _perThreadContexts;
  struct CFReleaser<__CSStoreAccessContext *> { struct __CSStoreAccessContext *fItem; } _readAccessContext;
  struct CFReleaser<__CSStoreAccessContext *> { struct __CSStoreAccessContext *fItem; } _writeAccessContext;
  BOOL _databaseLeftWritable;
}

/* instance methods */
- (id)_init;
- (struct PerThreadContext { id x0; id x1; BOOL x2; BOOL x3; struct unfair_lock_mutex { unsigned int x0; } x4; } *)_perThreadContextsLock_findPerThreadContextForThisThread;
- (struct PerThreadContext { id x0; id x1; BOOL x2; BOOL x3; struct unfair_lock_mutex { unsigned int x0; } x4; } *)_perThreadContextsLock_findPerThreadContextForThisThreadIfExists;
- (struct PerThreadContext { id x0; id x1; BOOL x2; BOOL x3; struct unfair_lock_mutex { unsigned int x0; } x4; } *)_perThreadContextsLock_createPerThreadContextForThisThread;
- (void)_perThreadContextsLock_destroyPerThreadContextForThisThread;
@end

#endif /* LSDBExecutionContext_h */
