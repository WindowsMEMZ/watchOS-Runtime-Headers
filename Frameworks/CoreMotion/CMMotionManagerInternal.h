//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2890.4.12.2.3
//
#ifndef CMMotionManagerInternal_h
#define CMMotionManagerInternal_h
@import Foundation;

@class NSOperationQueue, NSString;
@protocol OS_dispatch_queue, {CMVector<float, 3UL>="elements"[3f]}, {unique_ptr<CLDeviceMotionLiteService, std::default_delete<CLDeviceMotionLiteService>>="__ptr_"{__compressed_pair<CLDeviceMotionLiteService *, std::default_delete<CLDeviceMotionLiteService>>="__value_"^{CLDeviceMotionLiteService}}}, {unique_ptr<CLIspDataVisitor, std::default_delete<CLIspDataVisitor>>="__ptr_"{__compressed_pair<CLIspDataVisitor *, std::default_delete<CLIspDataVisitor>>="__value_"^{CLIspDataVisitor}}}, {unique_ptr<CMMotionManagerStatsCollector, std::default_delete<CMMotionManagerStatsCollector>>="__ptr_"{__compressed_pair<CMMotionManagerStatsCollector *, std::default_delete<CMMotionManagerStatsCollector>>="__value_"^{CMMotionManagerStatsCollector}}};

@interface CMMotionManagerInternal : NSObject {
  /* instance variables */
  struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } fSampleLock;
  struct Dispatcher { undefined * * x0; id x1; } * fAccelerometerDispatcher;
  double fAccelerometerUpdateInterval;
  id /* block */ fAccelerometerHandler;
  NSOperationQueue *fAccelerometerQueue;
  double fLastAccelerometerNotificationTimestamp;
  struct Sample { double timestamp; struct { float x; float y; float z; } acceleration; } fLatestAccelerometerSample;
  struct Dispatcher { undefined * * x0; id x1; } * fAmbientPressureDispatcher;
  double fAmbientPressureUpdateInterval;
  id /* block */ fAmbientPressureHandler;
  NSOperationQueue *fAmbientPressureQueue;
  double fLastAmbientPressureNotificationTimestamp;
  struct Sample { double timestamp; struct { float pressure; float temperature; } pressureData; } fLatestAmbientPressureSample;
  struct Dispatcher { undefined * * x0; id x1; } * fCompensatedAmbientPressureDispatcher;
  double fCompensatedAmbientPressureUpdateInterval;
  id /* block */ fCompensatedAmbientPressureHandler;
  NSOperationQueue *fCompensatedAmbientPressureQueue;
  double fLastCompensatedAmbientPressureNotificationTimestamp;
  struct Sample { double timestamp; struct { float pressure; float temperature; } pressureData; } fLatestCompensatedAmbientPressureSample;
  struct Dispatcher { undefined * * x0; id x1; } * fGyroDispatcher;
  double fGyroUpdateInterval;
  id /* block */ fGyroHandler;
  NSOperationQueue *fGyroQueue;
  double fLastGyroNotificationTimestamp;
  struct Sample { double timestamp; struct { float x; float y; float z; } rotationRate; unsigned short sampleNum; BOOL fsync; } fLatestGyroSample;
  struct Dispatcher { undefined * * x0; id x1; } * fDeviceMotionDispatcher;
  double fDeviceMotionUpdateInterval;
  id /* block */ fDeviceMotionHandler;
  NSOperationQueue *fDeviceMotionQueue;
  double fLastDeviceMotionNotificationTimestamp;
  int fDeviceMotionMode;
  unsigned long long fAttitudeReferenceFrame;
  BOOL fCompassCalibrationHud;
  BOOL fIsCompassCalibrated;
  BOOL fIsUsingCalibratedCompass;
  BOOL fHaveSentDeviceRequiresMovementError;
  BOOL fHaveSentTrueNorthUnavailableError;
  double fDeviceMotionStartTimestamp;
  struct { double w; double x; double y; double z; } fInitialReferenceRotation;
  BOOL fIsInitialReferenceAvailable;
  struct Dispatcher { undefined * * x0; id x1; } * fMagnetometerDispatcher;
  double fMagnetometerUpdateInterval;
  id /* block */ fMagnetometerHandler;
  NSOperationQueue *fMagnetometerQueue;
  double fLastMagnetometerNotificationTimestamp;
  struct Sample { double timestamp; struct { float x; float y; float z; } magneticField; float temperature; } fLatestMagnetometerSample;
  BOOL fShowsDeviceMovementDisplay;
  struct Dispatcher { undefined * * x0; id x1; } * fPrivateAccelerometerDataDispatcher;
  undefined * fPrivateAccelerometerDataCallback;
  void * fPrivateAccelerometerDataCallbackInfo;
  struct Dispatcher { undefined * * x0; id x1; } * fPrivateGyroDataDispatcher;
  undefined * fPrivateGyroDataCallback;
  void * fPrivateGyroDataCallbackInfo;
  struct Dispatcher { undefined * * x0; id x1; } * fPrivateMagnetometerDataDispatcher;
  undefined * fPrivateMagnetometerDataCallback;
  void * fPrivateMagnetometerDataCallbackInfo;
  struct Dispatcher { undefined * * x0; id x1; } * fPrivateDeviceMotionDispatcher;
  undefined * fPrivateDeviceMotionCallback;
  void * fPrivateDeviceMotionCallbackInfo;
  BOOL fPrivateDeviceMotionUse9Axis;
  BOOL fPrivateUseAccelerometer;
  void * fConnection;
  NSObject<OS_dispatch_queue> *fConnectionQueue;
  BOOL fSidebandSensorFusionEnabled;
  BOOL fSidebandSensorFusionLatency;
  BOOL fSidebandSensorFusionSnoop;
  struct unique_ptr<CLIspDataVisitor, std::default_delete<CLIspDataVisitor>> { struct __compressed_pair<CLIspDataVisitor *, std::default_delete<CLIspDataVisitor>> { struct CLIspDataVisitor *__value_; } __ptr_; } fSidebandVisitor;
  int fPrivatePowerConservationMode;
  undefined * fPrivateNotificationCallback;
  void * fPrivateNotificationCallbackInfo;
  struct Dispatcher { undefined * * x0; id x1; } * fPrivateDeviceMotionSensorStatusDispatcher;
  id /* block */ fDeviceMotionErrorHandler;
  NSOperationQueue *fDeviceMotionErrorQueue;
  BOOL fIsApplicationActive;
  struct unique_ptr<CLDeviceMotionLiteService, std::default_delete<CLDeviceMotionLiteService>> { struct __compressed_pair<CLDeviceMotionLiteService *, std::default_delete<CLDeviceMotionLiteService>> { struct CLDeviceMotionLiteService *__value_; } __ptr_; } fDeviceMotionLiteService;
  struct unique_ptr<CMMotionManagerStatsCollector, std::default_delete<CMMotionManagerStatsCollector>> { struct __compressed_pair<CMMotionManagerStatsCollector *, std::default_delete<CMMotionManagerStatsCollector>> { struct CMMotionManagerStatsCollector *__value_; } __ptr_; } fMotionManagerStatsCollector;
  struct Dispatcher { undefined * * x0; id x1; } * fFactoryGyroDispatcher;
  double fFactoryGyroUpdateInterval;
  struct Dispatcher { undefined * * x0; id x1; } * fFactoryGyroTemperatureDispatcher;
  double fFactoryGyroTemperatureUpdateInterval;
  id /* block */ fFactoryGyroHandler;
  NSOperationQueue *fFactoryGyroQueue;
  double fLastFactoryGyroNotificationTimestamp;
  float fLastFactoryGyroTemperature;
  BOOL fFactoryGyroFitComputed;
  struct NonlinearGyroBiasFit { unsigned char fType; unsigned char x[3] fPadding; f]} x[8{LinearFit="fSlope"[3f]"fIntercept"[3] fFits; float x[7] fTemperatures; float fOverlap; C] x[3[18] fError; } fFactoryGyroNonlinearGyroBiasFit;
  struct LinearFit { float x[3] fSlope; float x[3] fIntercept; } fFactoryGyroLinearGyroBiasFit;
  id /* block */ fKeyboardMotionHandler;
  NSOperationQueue *fKeyboardMotionQueue;
  struct Dispatcher { undefined * * x0; id x1; } * fKeyboardMotionDMDispatcher;
  double fKeyboardMotionTimestampGravityHidReportPrev;
  struct CMVector<float, 3UL> { float x[3] elements; } fKeyboardMotionGravityHIDReportPrev;
  float fKeyboardMotionGravityDeltaThreshold;
  float fKeyboardMotionGravityNotificationFrequency;
  struct Dispatcher { undefined * * x0; id x1; } * fKeyboardMotionDispatcher;
}

@property (retain, nonatomic) NSOperationQueue *fDeviceMotionLiteClientQueue;
@property (copy, nonatomic) id /* block */ fDeviceMotionLiteFusedHandler;
@property (retain, nonatomic) NSString *fDeviceMotionLitePhysicalDeviceID;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)teardownPrivate;
@end

#endif /* CMMotionManagerInternal_h */
