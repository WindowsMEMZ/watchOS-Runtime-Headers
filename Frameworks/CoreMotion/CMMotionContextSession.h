//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2890.4.12.2.3
//
#ifndef CMMotionContextSession_h
#define CMMotionContextSession_h
@import Foundation;

@protocol OS_dispatch_queue, {CMAccessoryActivity="fActivityPacket"{ActivityPacket="state"i"stateTransitionTimestamp"d"stepImpulse"{Impulse="start"d"end"d}}"fSitStandEnabled"B"fSitStandDetector"{unique_ptr<CMSitStandDetector, std::default_delete<CMSitStandDetector>>="__ptr_"{__compressed_pair<CMSitStandDetector *, std::default_delete<CMSitStandDetector>>="__value_"^{CMSitStandDetector}}}"fAccessoryStepDetector"{CMAccessoryStepDetector="fDetectedSteps"B"fCandidateDetected"B"fNotifiedDetectedSteps"B"fLookingForFirstStep"B"fInertialAggAccelBuffer"{CMFixedSizeQueue<CMAccessoryStepDetector::AggAccelSample, 50UL>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[24c]"fStorage"{CMQueueStorage<CMAccessoryStepDetector::AggAccelSample, 50UL>="buffer"[1176c]}}"fInertialAccelBuffer"{CMFixedSizeQueue<CMAccessoryStepDetector::VectorSample, 50UL>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[24c]"fStorage"{CMQueueStorage<CMAccessoryStepDetector::VectorSample, 50UL>="buffer"[1176c]}}"fFaceRotationRateBuffer"{CMFixedSizeQueue<CMAccessoryStepDetector::FaceRotationRateSample, 50UL>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[24c]"fStorage"{CMQueueStorage<CMAccessoryStepDetector::FaceRotationRateSample, 50UL>="buffer"[1176c]}}"fAuxRotationRateNormBuffer"{CMFixedSizeQueue<float, 150UL>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[4c]"fStorage"{CMQueueStorage<float, 150UL>="buffer"[596c]}}"fInertialAggForwardAccelBufferFaceFrame"{CMFixedSizeQueue<float, 50UL>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[4c]"fStorage"{CMQueueStorage<float, 50UL>="buffer"[196c]}}"fYawRotationRateBuffer"{CMFixedSizeQueue<float, 50UL>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[4c]"fStorage"{CMQueueStorage<float, 50UL>="buffer"[196c]}}"fSpatialSampleTimestampBuffer"{CMFixedSizeQueue<double, 7UL>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[8c]"fStorage"{CMQueueStorage<double, 7UL>="buffer"[48c]}}"fSpatialSampleAggAccelBuffer"{CMFixedSizeQueue<CMVector<float, 3>, 7UL>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[12c]"fStorage"{CMQueueStorage<CMVector<float, 3>, 7UL>="buffer"[72c]}}"fCurrentPointTimestamp"d"fCurrentPointAggAccel"{CMVector<float, 3UL>="elements"[3f]}"fState"i"fPreviousState"i"fLastStateTransitionedFrom"i"fCurrentUpSample"{AggAccelSample="timestamp"d"aggAccel"{CMVector<float, 3UL>="elements"[3f]}}"fCurrentDownSample"{AggAccelSample="timestamp"d"aggAccel"{CMVector<float, 3UL>="elements"[3f]}}"fLastEndImpulseTimestamp"d"fEndImpulseTimestampHistory"{CMFixedSizeQueue<double, 3UL>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[8c]"fStorage"{CMQueueStorage<double, 3UL>="buffer"[16c]}}"fStartImpulseTimestampHistory"{CMFixedSizeQueue<double, 3UL>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[8c]"fStorage"{CMQueueStorage<double, 3UL>="buffer"[16c]}}"fHeadsetOrientation"{CMOQuaternion="elements"[4f]}"fStepModel"{StepModel="timeSinceLastStepSecRatio"[7d]"impulseDurationSecRatio"[7d]"deltaInertialZVelRatio"[7d]"thetaRollFaceDegreesRatio"[9d]"thetaPitchFaceDegreesRatio"[9d]"horizontalDisplacementRatio"[8d]"peakinessRatio"[2d]"bobbinessRatio"[2d]"timeSinceLastStepSecEdge"[7d]"impulseDurationSecEdge"[7d]"deltaInertialZVelEdge"[7d]"thetaRollFaceDegreesEdge"[9d]"thetaPitchFaceDegreesEdge"[9d]"horizontalDisplacementEdge"[8d]"peakinessEdge"[2d]"bobbinessEdge"[2d]"ratios"[8^d]"rightBinEdges"[8^d]}"fCallback"^?"fCallbackInfo"^v"fLastNotifiedTimeSec"d"fLogger"^{CMSpatialLogger}}"fCurrStepImpulse"{Impulse="start"d"end"d}"fHeadsetOrientationIsSet"B}, {CMPdr="fPdrInputs"{CMPdrInputs="fInertialAccelTNB"{AccelTNBFrame="lastValidTNBTimestamp"d"lastSample"{CMVector<float, 3UL>="elements"[3f]}"T"{CMVector<float, 3UL>="elements"[3f]}"N"{CMVector<float, 3UL>="elements"[3f]}"B"{CMVector<float, 3UL>="elements"[3f]}"jerkNorm"f"curvature"f"torsion"f"isValid"B}"fLastTimestamp"d"fSampleDT"d"kSosFilterParams"{Parameters="B"[12d]"A"[12d]"inputScaleValues"[4d]"outputScaleValues"[4d]}"fInertialUserAccelFilter"{array<CMSosFilter<4>, 3UL>="__elems_"[3{CMSosFilter<4UL>="kParams"^{Parameters}"fOutput"f"fRegister"[12f]}]}"fInertialRotationRateFilter"{array<CMSosFilter<4>, 3UL>="__elems_"[3{CMSosFilter<4UL>="kParams"^{Parameters}"fOutput"f"fRegister"[12f]}]}}"fAlgType"i"fDirectionalityDetector"{CMPdrDirectionality="_lastStartImpulseTimestamp"d"_lastEndImpulseTimestamp"d"_lastStepDirectionRadians"d"_lastPosition"{CMVector<double, 2UL>="elements"[2d]}"_inertialBuffer"{CMFixedSizeQueue<CMPdrDirectionality::AggAccelSample, 245UL>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[24c]"fStorage"{CMQueueStorage<CMPdrDirectionality::AggAccelSample, 245UL>="buffer"[5856c]}}}"fPdrEstimatorOnHead"{unique_ptr<CMPdrEstimatorOnHead, std::default_delete<CMPdrEstimatorOnHead>>="__ptr_"{__compressed_pair<CMPdrEstimatorOnHead *, std::default_delete<CMPdrEstimatorOnHead>>="__value_"^{CMPdrEstimatorOnHead}}}"fPdrEstimatorOnBody"{unique_ptr<CMPdrEstimatorOnBody, std::default_delete<CMPdrEstimatorOnBody>>="__ptr_"{__compressed_pair<CMPdrEstimatorOnBody *, std::default_delete<CMPdrEstimatorOnBody>>="__value_"^{CMPdrEstimatorOnBody}}}"fPdrEstimatorHandSwing"{unique_ptr<CMDoTEstimatorHandSwing, std::default_delete<CMDoTEstimatorHandSwing>>="__ptr_"{__compressed_pair<CMDoTEstimatorHandSwing *, std::default_delete<CMDoTEstimatorHandSwing>>="__value_"^{CMDoTEstimatorHandSwing}}}"fPdrEstimatorTexting"{unique_ptr<CMDoTEstimatorInHandTexting, std::default_delete<CMDoTEstimatorInHandTexting>>="__ptr_"{__compressed_pair<CMDoTEstimatorInHandTexting *, std::default_delete<CMDoTEstimatorInHandTexting>>="__value_"^{CMDoTEstimatorInHandTexting}}}}, {CMVector<double, 2UL>="elements"[2d]}, {PdrResults="step"B"startImpulse"d"endImpulse"d"position"{CMVector<double, 2UL>="elements"[2d]}"stepsCount"i"directionOfTravelDegrees"f"speedMps"d"attitude"{CMOQuaternion="elements"[4f]}}, {unique_ptr<CMMotionContextLogger, std::default_delete<CMMotionContextLogger>>="__ptr_"{__compressed_pair<CMMotionContextLogger *, std::default_delete<CMMotionContextLogger>>="__value_"^{CMMotionContextLogger}}}, {unique_ptr<CMMotionContextSessionAnalyticsTracker, std::default_delete<CMMotionContextSessionAnalyticsTracker>>="__ptr_"{__compressed_pair<CMMotionContextSessionAnalyticsTracker *, std::default_delete<CMMotionContextSessionAnalyticsTracker>>="__value_"^{CMMotionContextSessionAnalyticsTracker}}}, {unique_ptr<CMPdrMLModel, std::default_delete<CMPdrMLModel>>="__ptr_"{__compressed_pair<CMPdrMLModel *, std::default_delete<CMPdrMLModel>>="__value_"^{CMPdrMLModel}}};

@interface CMMotionContextSession : NSObject {
  /* instance variables */
  struct unique_ptr<CMMotionContextLogger, std::default_delete<CMMotionContextLogger>> { struct __compressed_pair<CMMotionContextLogger *, std::default_delete<CMMotionContextLogger>> { struct CMMotionContextLogger *__value_; } __ptr_; } _logger;
  BOOL _logMSL;
  struct Dispatcher { undefined * * x0; id x1; } * _deviceMotionDispatcher;
  struct Dispatcher { undefined * * x0; id x1; } * _accessoryDeviceMotionDispatcher;
  struct Dispatcher { undefined * * x0; id x1; } * _accessoryDeviceMotionConfigDispatcher;
  struct CMPdr { struct CMPdrInputs { struct AccelTNBFrame { double lastValidTNBTimestamp; struct CMVector<float, 3UL> { float x[3] elements; } lastSample; struct CMVector<float, 3UL> { float x[3] elements; } T; struct CMVector<float, 3UL> { float x[3] elements; } N; struct CMVector<float, 3UL> { float x[3] elements; } B; float jerkNorm; float curvature; float torsion; BOOL isValid; } fInertialAccelTNB; double fLastTimestamp; double fSampleDT; struct Parameters { double x[12] B; double x[12] A; double x[4] inputScaleValues; double x[4] outputScaleValues; } kSosFilterParams; struct array<CMSosFilter<4>, 3UL> { f]} x[3{CMSosFilter<4UL>="kParams"^{Parameters}"fOutput"f"fRegister"[12] __elems_; } fInertialUserAccelFilter; struct array<CMSosFilter<4>, 3UL> { f]} x[3{CMSosFilter<4UL>="kParams"^{Parameters}"fOutput"f"fRegister"[12] __elems_; } fInertialRotationRateFilter; } fPdrInputs; int fAlgType; struct CMPdrDirectionality { double _lastStartImpulseTimestamp; double _lastEndImpulseTimestamp; double _lastStepDirectionRadians; struct CMVector<double, 2UL> { double x[2] elements; } _lastPosition; struct CMFixedSizeQueue<CMPdrDirectionality::AggAccelSample, 245UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char x[24] fBuffer; struct CMQueueStorage<CMPdrDirectionality::AggAccelSample, 245UL> { char x[5856] buffer; } fStorage; } _inertialBuffer; } fDirectionalityDetector; struct unique_ptr<CMPdrEstimatorOnHead, std::default_delete<CMPdrEstimatorOnHead>> { struct __compressed_pair<CMPdrEstimatorOnHead *, std::default_delete<CMPdrEstimatorOnHead>> { struct CMPdrEstimatorOnHead *__value_; } __ptr_; } fPdrEstimatorOnHead; struct unique_ptr<CMPdrEstimatorOnBody, std::default_delete<CMPdrEstimatorOnBody>> { struct __compressed_pair<CMPdrEstimatorOnBody *, std::default_delete<CMPdrEstimatorOnBody>> { struct CMPdrEstimatorOnBody *__value_; } __ptr_; } fPdrEstimatorOnBody; struct unique_ptr<CMDoTEstimatorHandSwing, std::default_delete<CMDoTEstimatorHandSwing>> { struct __compressed_pair<CMDoTEstimatorHandSwing *, std::default_delete<CMDoTEstimatorHandSwing>> { struct CMDoTEstimatorHandSwing *__value_; } __ptr_; } fPdrEstimatorHandSwing; struct unique_ptr<CMDoTEstimatorInHandTexting, std::default_delete<CMDoTEstimatorInHandTexting>> { struct __compressed_pair<CMDoTEstimatorInHandTexting *, std::default_delete<CMDoTEstimatorInHandTexting>> { struct CMDoTEstimatorInHandTexting *__value_; } __ptr_; } fPdrEstimatorTexting; } _pdr;
  struct CMAccessoryActivity { struct ActivityPacket { int state; double stateTransitionTimestamp; struct Impulse { double start; double end; } stepImpulse; } fActivityPacket; BOOL fSitStandEnabled; struct unique_ptr<CMSitStandDetector, std::default_delete<CMSitStandDetector>> { struct __compressed_pair<CMSitStandDetector *, std::default_delete<CMSitStandDetector>> { struct CMSitStandDetector *__value_; } __ptr_; } fSitStandDetector; struct CMAccessoryStepDetector { BOOL fDetectedSteps; BOOL fCandidateDetected; BOOL fNotifiedDetectedSteps; BOOL fLookingForFirstStep; struct CMFixedSizeQueue<CMAccessoryStepDetector::AggAccelSample, 50UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char x[24] fBuffer; struct CMQueueStorage<CMAccessoryStepDetector::AggAccelSample, 50UL> { char x[1176] buffer; } fStorage; } fInertialAggAccelBuffer; struct CMFixedSizeQueue<CMAccessoryStepDetector::VectorSample, 50UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char x[24] fBuffer; struct CMQueueStorage<CMAccessoryStepDetector::VectorSample, 50UL> { char x[1176] buffer; } fStorage; } fInertialAccelBuffer; struct CMFixedSizeQueue<CMAccessoryStepDetector::FaceRotationRateSample, 50UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char x[24] fBuffer; struct CMQueueStorage<CMAccessoryStepDetector::FaceRotationRateSample, 50UL> { char x[1176] buffer; } fStorage; } fFaceRotationRateBuffer; struct CMFixedSizeQueue<float, 150UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char x[4] fBuffer; struct CMQueueStorage<float, 150UL> { char x[596] buffer; } fStorage; } fAuxRotationRateNormBuffer; struct CMFixedSizeQueue<float, 50UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char x[4] fBuffer; struct CMQueueStorage<float, 50UL> { char x[196] buffer; } fStorage; } fInertialAggForwardAccelBufferFaceFrame; struct CMFixedSizeQueue<float, 50UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char x[4] fBuffer; struct CMQueueStorage<float, 50UL> { char x[196] buffer; } fStorage; } fYawRotationRateBuffer; struct CMFixedSizeQueue<double, 7UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char x[8] fBuffer; struct CMQueueStorage<double, 7UL> { char x[48] buffer; } fStorage; } fSpatialSampleTimestampBuffer; struct CMFixedSizeQueue<CMVector<float, 3>, 7UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char x[12] fBuffer; struct CMQueueStorage<CMVector<float, 3>, 7UL> { char x[72] buffer; } fStorage; } fSpatialSampleAggAccelBuffer; double fCurrentPointTimestamp; struct CMVector<float, 3UL> { float x[3] elements; } fCurrentPointAggAccel; int fState; int fPreviousState; int fLastStateTransitionedFrom; struct AggAccelSample { double timestamp; struct CMVector<float, 3UL> { float x[3] elements; } aggAccel; } fCurrentUpSample; struct AggAccelSample { double timestamp; struct CMVector<float, 3UL> { float x[3] elements; } aggAccel; } fCurrentDownSample; double fLastEndImpulseTimestamp; struct CMFixedSizeQueue<double, 3UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char x[8] fBuffer; struct CMQueueStorage<double, 3UL> { char x[16] buffer; } fStorage; } fEndImpulseTimestampHistory; struct CMFixedSizeQueue<double, 3UL> { struct { unsigned short fHead; unsigned short fSize; } fHeadAndSize; unsigned int fCapacity; char x[8] fBuffer; struct CMQueueStorage<double, 3UL> { char x[16] buffer; } fStorage; } fStartImpulseTimestampHistory; struct CMOQuaternion { float x[4] elements; } fHeadsetOrientation; struct StepModel { double x[7] timeSinceLastStepSecRatio; double x[7] impulseDurationSecRatio; double x[7] deltaInertialZVelRatio; double x[9] thetaRollFaceDegreesRatio; double x[9] thetaPitchFaceDegreesRatio; double x[8] horizontalDisplacementRatio; double x[2] peakinessRatio; double x[2] bobbinessRatio; double x[7] timeSinceLastStepSecEdge; double x[7] impulseDurationSecEdge; double x[7] deltaInertialZVelEdge; double x[9] thetaRollFaceDegreesEdge; double x[9] thetaPitchFaceDegreesEdge; double x[8] horizontalDisplacementEdge; double x[2] peakinessEdge; double x[2] bobbinessEdge; double * x[8] ratios; double * x[8] rightBinEdges; } fStepModel; undefined *fCallback; void *fCallbackInfo; double fLastNotifiedTimeSec; struct CMSpatialLogger *fLogger; } fAccessoryStepDetector; struct Impulse { double start; double end; } fCurrStepImpulse; BOOL fHeadsetOrientationIsSet; } _accessoryActivity;
  int _motionContextState;
  BOOL _drawPositionOnStart;
  struct PdrResults { BOOL step; double startImpulse; double endImpulse; struct CMVector<double, 2UL> { double x[2] elements; } position; int stepsCount; float directionOfTravelDegrees; double speedMps; struct CMOQuaternion { float x[4] elements; } attitude; } _result;
  float _totalSessionTime;
  int _auxSampleCounter;
  double _currentTime;
  NSObject<OS_dispatch_queue> *_stepCountClientQueue;
  id /* block */ _stepCountClientHandler;
  NSObject<OS_dispatch_queue> *_pdrClientQueue;
  id /* block */ _pdrClientHandler;
  struct CMVector<double, 2UL> { double x[2] elements; } _prevPDRPosition;
  NSObject<OS_dispatch_queue> *_motionContextClientQueue;
  id /* block */ _motionContextClientHandler;
  struct unique_ptr<CMPdrMLModel, std::default_delete<CMPdrMLModel>> { struct __compressed_pair<CMPdrMLModel *, std::default_delete<CMPdrMLModel>> { struct CMPdrMLModel *__value_; } __ptr_; } hmlModel;
  BOOL _enableMLModel;
  struct unique_ptr<CMMotionContextSessionAnalyticsTracker, std::default_delete<CMMotionContextSessionAnalyticsTracker>> { struct __compressed_pair<CMMotionContextSessionAnalyticsTracker *, std::default_delete<CMMotionContextSessionAnalyticsTracker>> { struct CMMotionContextSessionAnalyticsTracker *__value_; } __ptr_; } _analyticsTracker;
  float _distanceTravelledPerDVEvent;
  int _stepCountPerDVEvent;
  double _distractedViewingEnterTime;
  struct CMVector<double, 2UL> { double x[2] elements; } _initialPosition;
  float _initialHeadingDegrees;
  BOOL _inDVEvent;
  int _lastTrackingDisableRoute;
}

/* class methods */
+ (BOOL)isAvailable;

/* instance methods */
- (id)init;
- (id)initWithOptions:(id)options;
- (void)start;
- (void)stop;
- (void)setAlgType:(int)type;
- (void)setSpeedEstType:(int)type;
- (void)enableMLModel:(BOOL)mlmodel;
- (void)enterDistractedViewingSession:(int)session;
- (void)exitDistractedViewingSession:(int)session;
- (void)setTrackingClientMode:(int)mode;
- (void)initLoggerWithPrefix:(id)prefix filePath:(id)path;
- (void)notifyStepCountClient:(const void *)client;
- (void)notifyPdrClient:(const void *)client;
- (void)notifyMotionContextClient:(int)client;
- (void)startStepCountUpdatesToQueue:(id)queue andHandler:(id /* block */)handler;
- (void)startPdrUpdatesToQueue:(id)queue andHandler:(id /* block */)handler;
- (void)startMotionContextUpdatesToQueue:(id)queue andHandler:(id /* block */)handler;
- (void)feedSourceDeviceIMU:(const struct Sample { double x0; struct { struct { double x0; double x1; double x2; double x3; } x0; struct { float x0; float x1; float x2; } x1; struct { float x0; float x1; float x2; } x2; struct { float x0; float x1; float x2; } x3; int x4; BOOL x5; BOOL x6; BOOL x7; float x8; BOOL x9; BOOL x10; int x11; } x1; struct { float x0; } x2; BOOL x3; unsigned int x4; unsigned char x5; struct Status { unsigned short x0; } x6; float x7; } *)imu;
- (void)feedAudioAccessoryIMU:(const void *)imu;
- (void)feedAccessoryConfig:(const void *)config;
- (void)feedARKitWorldPoseWithTimestamp:(double)timestamp pose:(struct { x0[4] })pose status:(int)status;
- (void)feedGPSLocationWithTimestamp:(double)timestamp course:(double)course speed:(double)speed latitude:(double)latitude longitude:(double)longitude horizontalAccuracy:(double)accuracy;
@end

#endif /* CMMotionContextSession_h */
