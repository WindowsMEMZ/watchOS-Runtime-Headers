//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 2890.4.12.2.3
//
#ifndef CMMotionManager_h
#define CMMotionManager_h
@import Foundation;

#include "CMAccelerometerData.h"
#include "CMAmbientPressureData.h"
#include "CMDeviceMotion.h"
#include "CMGyroData.h"
#include "CMMagnetometerData.h"

@interface CMMotionManager : NSObject {
  /* instance variables */
  id _internal;
}

@property (readonly, nonatomic) BOOL sidebandSensorFusionAvailable;
@property (readonly, nonatomic) BOOL predictedDeviceMotionAvailable;
@property (readonly) CMAmbientPressureData *ambientPressureData;
@property (readonly) CMAmbientPressureData *compensatedAmbientPressureData;
@property (readonly, nonatomic) BOOL isDeviceMotionLiteAvailable;
@property (@dynamic, nonatomic) double accelerometerUpdateInterval;
@property (readonly, @dynamic, nonatomic) BOOL accelerometerAvailable;
@property (readonly, @dynamic, nonatomic) BOOL accelerometerActive;
@property (readonly, @dynamic) CMAccelerometerData *accelerometerData;
@property (@dynamic, nonatomic) double gyroUpdateInterval;
@property (readonly, @dynamic, nonatomic) BOOL gyroAvailable;
@property (readonly, @dynamic, nonatomic) BOOL gyroActive;
@property (readonly, @dynamic) CMGyroData *gyroData;
@property (nonatomic) double magnetometerUpdateInterval;
@property (readonly, nonatomic) BOOL magnetometerAvailable;
@property (readonly, nonatomic) BOOL magnetometerActive;
@property (readonly) CMMagnetometerData *magnetometerData;
@property (@dynamic, nonatomic) double deviceMotionUpdateInterval;
@property (readonly, @dynamic, nonatomic) unsigned long long attitudeReferenceFrame;
@property (readonly, @dynamic, nonatomic) BOOL deviceMotionAvailable;
@property (readonly, @dynamic, nonatomic) BOOL deviceMotionActive;
@property (readonly, @dynamic) CMDeviceMotion *deviceMotion;
@property (nonatomic) BOOL showsDeviceMovementDisplay;

/* class methods */
+ (void)setVirtualAlmondDevice:(id)device;
+ (id)virtualAlmondDevice;
+ (void)initialize;
+ (unsigned long long)availableAttitudeReferenceFrames;
+ (void)setAllowInBackground:(BOOL)background;
+ (void)dumpDb:(long long)db toURL:(id)url onCompletion:(id /* block */)completion;
+ (BOOL)deviceMotionInitialized:(struct Sample { double x0; struct { struct { double x0; double x1; double x2; double x3; } x0; struct { float x0; float x1; float x2; } x1; struct { float x0; float x1; float x2; } x2; struct { float x0; float x1; float x2; } x3; int x4; BOOL x5; BOOL x6; BOOL x7; float x8; BOOL x9; BOOL x10; int x11; } x1; struct { float x0; } x2; BOOL x3; unsigned int x4; unsigned char x5; struct Status { unsigned short x0; } x6; float x7; } *)initialized;
+ (BOOL)northAlignedReferenceFrame:(unsigned long long)frame;
+ (void)dummySelector:(id)selector;
+ (BOOL)supportsGyroMiniCalibration;
+ (BOOL)startGyroMiniCalibration;
+ (BOOL)configureM7Activity:(BOOL)activity stepCounting:(BOOL)counting activityForceCodeTransition:(BOOL)transition stepCountingForceCodeTransition:(BOOL)transition threshold:(BOOL)threshold onBodyDetection:(BOOL)detection ispMode:(unsigned char)mode predictionInterval:(float)interval logLevel:(char)level proactiveRevisitTime:(unsigned short)time;
+ (struct { int x0; double x1; double x2; float x3; float x4; union { struct { struct { float x0; float x1; float x2; } x0; struct { float x0; float x1; float x2; } x1; } x0; struct { BOOL x0; char x1[282] } x1; } x5; })gyroCalibrationDatabaseGetBiasFit;
+ (struct { int x0; double x1; double x2; float x3; float x4; union { struct { struct { float x0; float x1; float x2; } x0; struct { float x0; float x1; float x2; } x1; } x0; struct { BOOL x0; char x1[282] } x1; } x5; })gyroCalibrationDatabaseGetBiasFitAndEstimate:(struct { double x0; double x1; double x2; } *)estimate atTemperature:(float)temperature;
+ (BOOL)hasRunMiniCal;

/* instance methods */
- (void)setUseAccelerometer:(BOOL)accelerometer;
- (BOOL)useAccelerometer;
- (id)init;
- (id)initPrivate;
- (void)dealloc;
- (void)deallocPrivate;
- (BOOL)isAccelerometerAvailable;
- (BOOL)isAccelerometerActive;
- (void)startAccelerometerUpdates;
- (void)startAccelerometerUpdatesToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopAccelerometerUpdates;
- (void)setAccelerometerUpdateIntervalPrivate:(double)private;
- (void)startAccelerometerUpdatesPrivateToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopAccelerometerUpdatesPrivate;
- (BOOL)isAmbientPressureAvailable;
- (void)setAmbientPressureUpdateInterval:(double)interval;
- (double)ambientPressureUpdateInterval;
- (BOOL)isAmbientPressureActive;
- (void)startAmbientPressureUpdates;
- (void)startAmbientPressureUpdatesToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopAmbientPressureUpdates;
- (BOOL)readRawAmbientPressureSamplesFromDB:(id)db toQueue:(id)queue where:(id)where withHandler:(id /* block */)handler;
- (id)computeNonlinearPRTTFromDB:(id)db where:(id)where;
- (void)setCompensatedAmbientPressureUpdateInterval:(double)interval;
- (double)compensatedAmbientPressureUpdateInterval;
- (BOOL)isCompensatedAmbientPressureActive;
- (void)startCompensatedAmbientPressureUpdates;
- (void)startCompensatedAmbientPressureUpdatesToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopCompensatedAmbientPressureUpdates;
- (void)setAmbientPressureUpdateIntervalPrivate:(double)private;
- (void)startAmbientPressureUpdatesPrivateToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopAmbientPressureUpdatesPrivate;
- (void)setCompensatedAmbientPressureUpdateIntervalPrivate:(double)private;
- (void)startCompensatedAmbientPressureUpdatesPrivateToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopCompensatedAmbientPressureUpdatesPrivate;
- (BOOL)isGyroAvailable;
- (BOOL)isGyroActive;
- (void)startGyroUpdates;
- (void)startGyroUpdatesToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopGyroUpdates;
- (void)setGyroUpdateIntervalPrivate:(double)private;
- (void)startGyroUpdatesPrivateToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopGyroUpdatesPrivate;
- (BOOL)isDeviceMotionAvailable;
- (BOOL)isDeviceMotionActive;
- (void)startDeviceMotionUpdates;
- (void)startDeviceMotionUpdatesToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(unsigned long long)frame;
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(unsigned long long)frame toQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopDeviceMotionUpdates;
- (void)setDeviceMotionUpdateIntervalPrivate:(double)private;
- (void)startDeviceMotionUpdatesPrivateUsingReferenceFrame:(unsigned long long)frame toQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopDeviceMotionUpdatesPrivate;
- (void)rebuildGytt;
- (int)gyttNumTemperatures;
- (BOOL)isMagnetometerAvailable;
- (BOOL)isMagnetometerActive;
- (void)startMagnetometerUpdates;
- (void)startMagnetometerUpdatesToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopMagnetometerUpdates;
- (void)setMagnetometerUpdateIntervalPrivate:(double)private;
- (void)startMagnetometerUpdatesPrivateToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopMagnetometerUpdatesPrivate;
- (void)setShowsDeviceMovementDisplayPrivate:(BOOL)private;
- (void)showDeviceMovementDisplay;
- (void)dismissDeviceMovementDisplay;
- (id)initUsing6AxisSensorFusion;
- (id)initUsingGyroOnlySensorFusion;
- (void)setAccelerometerDataCallback:(undefined *)callback info:(void *)info interval:(double)interval;
- (void)setGyroDataCallback:(undefined *)callback info:(void *)info interval:(double)interval;
- (void)setMagnetometerDataCallback:(undefined *)callback info:(void *)info interval:(double)interval;
- (void)setDeviceMotionCallback:(undefined *)callback info:(void *)info interval:(double)interval fsync:(BOOL)fsync;
- (void)connect;
- (BOOL)isSidebandSensorFusionAvailable;
- (BOOL)setSidebandSensorFusionEnable:(BOOL)enable;
- (BOOL)setSidebandSensorFusionEnable:(BOOL)enable withSnoopHandler:(id /* block */)handler;
- (BOOL)setSidebandSensorFusionEnable:(BOOL)enable measureLatency:(BOOL)latency withSnoopHandler:(id /* block */)handler;
- (void)setSidebandTimeSyncHandler:(id /* block */)handler;
- (void)setPowerConservationMode:(int)mode;
- (void)setNotificationCallback:(undefined *)callback info:(void *)info;
- (BOOL)setMotionThreadPriority:(int)priority;
- (void)_startDeviceMotionErrorUpdatesToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)_stopDeviceMotionErrorUpdates;
- (BOOL)isPredictedDeviceMotionAvailable;
- (id)predictedDeviceMotionAtTimestamp:(double)timestamp error:(out id *)error;
- (void)onAccelerometer:(const struct Sample { double x0; struct { float x0; float x1; float x2; } x1; } *)accelerometer;
- (void)onGyro:(const struct Sample { double x0; struct { float x0; float x1; float x2; } x1; unsigned short x2; BOOL x3; } *)gyro;
- (void)onFactoryGyro:(const struct Sample { double x0; struct { float x0; float x1; float x2; } x1; unsigned short x2; BOOL x3; } *)gyro;
- (void)onFactoryGyroTemperature:(const struct Temperature { double x0; float x1; } *)temperature;
- (void)onMagnetometer:(const struct Sample { double x0; struct { float x0; float x1; float x2; } x1; float x2; } *)magnetometer;
- (BOOL)sendDeviceMotionError:(int)error;
- (void)applyNorthReference:(struct Sample { double x0; struct { struct { double x0; double x1; double x2; double x3; } x0; struct { float x0; float x1; float x2; } x1; struct { float x0; float x1; float x2; } x2; struct { float x0; float x1; float x2; } x3; int x4; BOOL x5; BOOL x6; BOOL x7; float x8; BOOL x9; BOOL x10; int x11; } x1; struct { float x0; } x2; BOOL x3; unsigned int x4; unsigned char x5; struct Status { unsigned short x0; } x6; float x7; } *)reference;
- (void)applyInitialReference:(struct Sample { double x0; struct { struct { double x0; double x1; double x2; double x3; } x0; struct { float x0; float x1; float x2; } x1; struct { float x0; float x1; float x2; } x2; struct { float x0; float x1; float x2; } x3; int x4; BOOL x5; BOOL x6; BOOL x7; float x8; BOOL x9; BOOL x10; int x11; } x1; struct { float x0; } x2; BOOL x3; unsigned int x4; unsigned char x5; struct Status { unsigned short x0; } x6; float x7; } *)reference;
- (void)onDeviceMotion:(const struct Sample { double x0; struct { struct { double x0; double x1; double x2; double x3; } x0; struct { float x0; float x1; float x2; } x1; struct { float x0; float x1; float x2; } x2; struct { float x0; float x1; float x2; } x3; int x4; BOOL x5; BOOL x6; BOOL x7; float x8; BOOL x9; BOOL x10; int x11; } x1; struct { float x0; } x2; BOOL x3; unsigned int x4; unsigned char x5; struct Status { unsigned short x0; } x6; float x7; } *)motion;
- (void)onAmbientPressure:(const struct Sample { double x0; struct { float x0; float x1; } x1; } *)pressure;
- (void)onCompensatedAmbientPressure:(const struct Sample { double x0; struct { float x0; float x1; } x1; } *)pressure;
- (void)willResignActive:(id)active;
- (void)didBecomeActive:(id)active;
- (void)willResignActivePrivate:(id)private;
- (void)didBecomeActivePrivate:(id)private;
- (void)startDeviceMotionLiteUpdatesForDeviceID:(id)id usingConfiguration:(struct { int x0; })configuration toQueue:(id)queue withFusedHandler:(id /* block */)handler;
- (void)startDeviceMotionLiteFusedUpdatesForDeviceID:(id)id toQueue:(id)queue withHandler:(id /* block */)handler;
- (void)stopDeviceMotionLiteUpdatesForDeviceID:(id)id;
- (void)startFactoryGyroUpdatesToQueue:(id)queue withHandler:(id /* block */)handler;
- (void)startFactoryGyroUpdatesToQueue:(id)queue atUpdateInterval:(double)interval withHandler:(id /* block */)handler;
- (void)stopFactoryGyroUpdates;
- (void)startDeviceMotionUpdatesForKeyboardMotionToQueue:(id)queue withGravityDeltaThreshold:(double)threshold sendFrequency:(double)frequency andHandler:(id /* block */)handler;
- (void)stopDeviceMotionUpdatesForKeyboardMotion;
- (void)startFactoryGyroUpdatesPrivateToQueue:(id)queue atUpdateInterval:(double)interval withHandler:(id /* block */)handler;
- (void)stopFactoryGyroUpdatesPrivate;
- (void)startDeviceMotionUpdatesForKeyboardMotionPrivateToQueue:(id)queue withGravityDeltaThreshold:(double)threshold notificationFrequency:(double)frequency andHandler:(id /* block */)handler;
- (void)stopDeviceMotionUpdatesForKeyboardMotionPrivate;
- (BOOL)sendDeviceMotionHostGravityToKeyboard:(const struct { unsigned char x0[3] unsigned char x1; unsigned char x2; } *)keyboard;
- (void)onDeviceMotionForKeyboardMotion:(const struct Sample { double x0; struct { struct { double x0; double x1; double x2; double x3; } x0; struct { float x0; float x1; float x2; } x1; struct { float x0; float x1; float x2; } x2; struct { float x0; float x1; float x2; } x3; int x4; BOOL x5; BOOL x6; BOOL x7; float x8; BOOL x9; BOOL x10; int x11; } x1; struct { float x0; } x2; BOOL x3; unsigned int x4; unsigned char x5; struct Status { unsigned short x0; } x6; float x7; } *)motion;
@end

#endif /* CMMotionManager_h */
