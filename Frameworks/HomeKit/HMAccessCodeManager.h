//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1092.3.10.0.0
//
#ifndef HMAccessCodeManager_h
#define HMAccessCodeManager_h
@import Foundation;

#include "HMFLogging-Protocol.h"
#include "HMFMessageReceiver-Protocol.h"
#include "HMHome.h"
#include "_HMContext.h"

@class NSArray, NSHashTable, NSNotificationCenter, NSString, NSUUID;
@protocol OS_dispatch_queue;

@interface HMAccessCodeManager : NSObject<HMFLogging, HMFMessageReceiver> {
  /* instance variables */
  struct hmf_unfair_data_lock_s { struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } lock; } _lock;
}

@property (readonly, weak) HMHome *home;
@property (readonly) _HMContext *context;
@property (readonly, copy) NSUUID *UUID;
@property (readonly) NSNotificationCenter *notificationCenter;
@property (readonly) NSHashTable *observers;
@property (readonly, copy) NSArray *accessoriesSupportingAccessCodes;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSUUID *messageTargetUUID;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *messageReceiveQueue;

/* class methods */
+ (BOOL)doesAccessCode:(id)code conflictWithExistingAccessCodes:(id)codes;
+ (BOOL)isWeakAccessCode:(id)code;
+ (id)generateAccessCodeValueFromConstraints:(id)constraints existingAccessCodes:(id)codes;
+ (id)generateAccessCodeValueFromConstraints:(id)constraints accessoryAccessCodes:(id)codes homeAccessCodes:(id)codes;
+ (long long)leastUpperBoundForAccessCodeLengthFromConstraints:(id)constraints;
+ (long long)greatestLowerBoundForAccessCodeLengthFromConstraints:(id)constraints;
+ (long long)_accessCodeLengthFromLowerBound:(long long)bound upperBound:(long long)bound;
+ (id)_createAccessCodeWithLength:(long long)length;
+ (id)accessCodeConstraints;
+ (id)accessCodeManagerUUIDFromHomeUUID:(id)uuid;
+ (id)valueObjectsForAccessCodeModificationRequests:(id)requests home:(id)home;
+ (id)convertPotentialUniqueIdentifier:(id)identifier toUUIDForUserInHome:(id)home;
+ (id)logCategory;

/* instance methods */
- (id)initWithHome:(id)home;
- (id)initWithHome:(id)home context:(id)context UUID:(id)uuid notificationCenter:(id)center;
- (void)configure;
- (void)addObserver:(id)observer;
- (void)removeObserver:(id)observer;
- (void)fetchAccessCodesFromAccessories:(id)accessories completion:(id /* block */)completion;
- (void)fetchAccessCodeConstraintsFromAccessories:(id)accessories completion:(id /* block */)completion;
- (void)fetchHomeAccessCodesWithCompletion:(id /* block */)completion;
- (void)setUserInformation:(id)information forHomeAccessCodeWithValue:(id)value completion:(id /* block */)completion;
- (void)removeHomeAccessCodeWithValue:(id)value completion:(id /* block */)completion;
- (void)removeSimpleLabelAccessCode:(id)code completion:(id /* block */)completion;
- (void)submitAccessCodeModificationRequests:(id)requests completion:(id /* block */)completion;
- (void)generateAccessCodeForUser:(id)user completion:(id /* block */)completion;
- (void)setAccessCode:(id)code forUser:(id)user completion:(id /* block */)completion;
- (void)setAccessCode:(id)code forUserWithUUID:(id)uuid completion:(id /* block */)completion;
- (void)resetAccessoryAccessCodesWithValueMatchingHomeAccessCode:(id)code completion:(id /* block */)completion;
- (void)fetchCachedAccessoryAccessCodesWithCompletion:(id /* block */)completion;
- (void)handleDaemonReconnectedNotification:(id)notification;
- (void)handleDidAddAccessoryAccessCodesMessage:(id)message;
- (void)handleDidUpdateAccessoryAccessCodesMessage:(id)message;
- (void)handleDidRemoveAccessoryAccessCodesMessage:(id)message;
- (void)handleDidAddHomeAccessCodesMessage:(id)message;
- (void)handleDidUpdateHomeAccessCodesMessage:(id)message;
- (void)handleDidRemoveHomeAccessCodesMessage:(id)message;
- (void)_sendMessageWithName:(id)name payload:(id)payload responseHandler:(id /* block */)handler;
- (void)_subscribe;
- (void)_unsubscribe;
- (id)logIdentifier;
@end

#endif /* HMAccessCodeManager_h */
