//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1877.50.1.0.0
//
#ifndef MLNeuralNetworkEngine_h
#define MLNeuralNetworkEngine_h
@import Foundation;

#include "MLModelEngine.h"
#include "MLClassifier-Protocol.h"
#include "MLCompiledModelLoader-Protocol.h"
#include "MLCompilerNeuralNetworkOutput.h"
#include "MLFeatureProviderConformer.h"
#include "MLModelConfiguration.h"
#include "MLModelDescription.h"
#include "MLModelMetadata.h"
#include "MLNeuralNetwork-Protocol.h"
#include "MLPixelBufferPool.h"
#include "MLRegressor-Protocol.h"
#include "MLVersionInfo.h"

@class EspressoProfilingNetworkInfo, NSArray, NSDictionary, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue, OS_dispatch_semaphore, {basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}, {map<std::string, Espresso::vimage2espresso_param, std::less<std::string>, std::allocator<std::pair<const std::string, Espresso::vimage2espresso_param>>>="__tree_"{__tree<std::__value_type<std::string, Espresso::vimage2espresso_param>, std::__map_value_compare<std::string, std::__value_type<std::string, Espresso::vimage2espresso_param>, std::less<std::string>>, std::allocator<std::__value_type<std::string, Espresso::vimage2espresso_param>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, Espresso::vimage2espresso_param>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, Espresso::vimage2espresso_param>, std::less<std::string>>>="__value_"Q}}}, {map<std::string, bool, std::less<std::string>, std::allocator<std::pair<const std::string, bool>>>="__tree_"{__tree<std::__value_type<std::string, bool>, std::__map_value_compare<std::string, std::__value_type<std::string, bool>, std::less<std::string>>, std::allocator<std::__value_type<std::string, bool>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, bool>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, bool>, std::less<std::string>>>="__value_"Q}}}, {map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>>="__tree_"{__tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>>="__value_"Q}}}, {set<std::string, std::less<std::string>, std::allocator<std::string>>="__tree_"{__tree<std::string, std::less<std::string>, std::allocator<std::string>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<std::string>>="__value_"Q}}}, {vector<bool, std::allocator<bool>>="__begin_"^Q"__size_"Q"__cap_alloc_"{__compressed_pair<unsigned long, std::allocator<unsigned long>>="__value_"Q}}, {vector<std::map<std::string, espresso_buffer_t *>, std::allocator<std::map<std::string, espresso_buffer_t *>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::map<std::string, espresso_buffer_t *> *, std::allocator<std::map<std::string, espresso_buffer_t *>>>="__value_"^v}};

@interface MLNeuralNetworkEngine : MLModelEngine<MLNeuralNetwork, MLClassifier, MLRegressor, MLCompiledModelLoader> {
  /* instance variables */
  struct vector<std::map<std::string, espresso_buffer_t *>, std::allocator<std::map<std::string, espresso_buffer_t *>>> { void *__begin_; void *__end_; struct __compressed_pair<std::map<std::string, espresso_buffer_t *> *, std::allocator<std::map<std::string, espresso_buffer_t *>>> { void *__value_; } __end_cap_; } _inputBuffers;
  struct vector<std::map<std::string, espresso_buffer_t *>, std::allocator<std::map<std::string, espresso_buffer_t *>>> { void *__begin_; void *__end_; struct __compressed_pair<std::map<std::string, espresso_buffer_t *> *, std::allocator<std::map<std::string, espresso_buffer_t *>>> { void *__value_; } __end_cap_; } _outputBuffers;
  struct map<std::string, Espresso::vimage2espresso_param, std::less<std::string>, std::allocator<std::pair<const std::string, Espresso::vimage2espresso_param>>> { struct __tree<std::__value_type<std::string, Espresso::vimage2espresso_param>, std::__map_value_compare<std::string, std::__value_type<std::string, Espresso::vimage2espresso_param>, std::less<std::string>>, std::allocator<std::__value_type<std::string, Espresso::vimage2espresso_param>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, Espresso::vimage2espresso_param>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, Espresso::vimage2espresso_param>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } _params;
  struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } _widths;
  struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } _heights;
  struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } _ks;
  struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } _batches;
  struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } _sequences;
  struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } _ranks;
  struct vector<bool, std::allocator<bool>> { unsigned long long *__begin_; unsigned long long __size_; struct __compressed_pair<unsigned long, std::allocator<unsigned long>> { unsigned long long __value_; } __cap_alloc_; } _bufferAvailable;
  struct set<std::string, std::less<std::string>, std::allocator<std::string>> { struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::less<std::string>> { unsigned long long __value_; } __pair3_; } __tree_; } _flexibleShapesConfigNamesInNet;
  struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; } __r_; } _currentConfigurationName;
  struct map<std::string, bool, std::less<std::string>, std::allocator<std::pair<const std::string, bool>>> { struct __tree<std::__value_type<std::string, bool>, std::__map_value_compare<std::string, std::__value_type<std::string, bool>, std::less<std::string>>, std::allocator<std::__value_type<std::string, bool>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, bool>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, bool>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } _OutputBlobIsDynamic;
  struct OpaqueVTPixelTransferSession * _transferSession;
  MLCompilerNeuralNetworkOutput *_compilerOutput;
}

@property (readonly, nonatomic) unsigned long long numInputs;
@property (readonly, nonatomic) unsigned long long numOutputs;
@property (nonatomic) BOOL usingCPU;
@property (nonatomic) void * plan;
@property (nonatomic) int precision;
@property (nonatomic) int engine;
@property (nonatomic) int qos;
@property (nonatomic) void * context;
@property (nonatomic) BOOL isEspressoBiasPreprocessingShared;
@property (retain, nonatomic) NSArray *classLabels;
@property (retain, nonatomic) NSString *classScoreVectorName;
@property (retain, nonatomic) id probabilityDictionarySharedKeySet;
@property (retain, nonatomic) NSString *modelFilePath;
@property (nonatomic) BOOL hasBidirectionalLayer;
@property (readonly, nonatomic) BOOL modelIsEncrypted;
@property (nonatomic) BOOL hasOptionalInputSequenceConcat;
@property (retain) NSObject<OS_dispatch_semaphore> *bufferSemaphore;
@property (retain) NSObject<OS_dispatch_queue> *espressoQueue;
@property (retain) NSObject<OS_dispatch_queue> *predictionsQueue;
@property (retain) NSObject<OS_dispatch_semaphore> *submitSemaphore;
@property BOOL isGPUPathForbidden;
@property BOOL isANEPathForbidden;
@property (readonly, nonatomic) NSMutableDictionary *inputBlobNameToLastBackingMode;
@property (readonly, nonatomic) NSMutableDictionary *outputBlobNameToLastBackingMode;
@property (nonatomic) BOOL ndArrayInterpretation;
@property (retain, nonatomic) NSDictionary *imagePreprocessingParameters;
@property (retain, nonatomic) EspressoProfilingNetworkInfo *espressoProfileInfo;
@property (readonly, nonatomic) NSDictionary *optionalInputTypes;
@property (readonly) MLFeatureProviderConformer *inputFeatureConformer;
@property (readonly, nonatomic) MLPixelBufferPool *pixelBufferPool;
@property (nonatomic) struct { void * x0; int x1; } network;
@property (retain, nonatomic) NSDictionary *defaultOptionalValues;
@property (readonly, retain, nonatomic) MLVersionInfo *compilerVersionInfo;
@property (retain, nonatomic) NSString *activeFunction;
@property (readonly, retain, nonatomic) NSArray *inputLayers;
@property (readonly, retain, nonatomic) NSArray *outputLayers;
@property (nonatomic) BOOL hardwareFallbackDetected;
@property (retain, nonatomic) NSDictionary *espressoInputShapes;
@property (retain, nonatomic) NSDictionary *espressoInputStrides;
@property (readonly, nonatomic) MLVersionInfo *modelVersionInfo;
@property (nonatomic) BOOL modelIsMIL;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) MLModelDescription *modelDescription;
@property (readonly, nonatomic) MLModelConfiguration *configuration;
@property (readonly, nonatomic) BOOL supportsConcurrentSubmissions;
@property (readonly, nonatomic) unsigned long long predictionTypeForKTrace;
@property (readonly, nonatomic) BOOL recordsPredictionEvent;
@property (readonly, nonatomic) unsigned long long signpostID;
@property (readonly) MLModelMetadata *metadata;

/* class methods */
+ (int)gpuEngine;
+ (int)gpuPrecision;
+ (Class)containerClass;
+ (id)loadModelFromCompiledArchive:(void *)archive modelVersionInfo:(id)info compilerVersionInfo:(id)info configuration:(id)configuration error:(id *)error;
+ (id)neuralNetworkFromContainer:(id)container error:(id *)error;
+ (id)neuralNetworkFromContainer:(id)container configuration:(id)configuration error:(id *)error;

/* instance methods */
- (BOOL)usingEspressoConfigurations;
- (BOOL)sequenceConcatConsumesOptionalInputNamed:(id)named;
- (int)sequenceNamed:(id)named;
- (id)convertPredictionToClassifierResult:(id)result withOptions:(id)options error:(id *)error;
- (id)addClassifierInformationToOutput:(id)output options:(id)options error:(id *)error;
- (id)classify:(id)classify options:(id)options error:(id *)error;
- (id)regress:(id)regress options:(id)options error:(id *)error;
- (id)availableOutputBlobList;
- (id)imageFeatureValueFromPixelBuffer:(struct __CVBuffer *)buffer usingPixelFormat:(unsigned int)format;
- (struct __CVBuffer *)copyPixelBufferFromPixelBuffer:(struct __CVBuffer *)buffer usingPixelFormat:(unsigned int)format;
- (BOOL)transferPixelBuffer:(struct __CVBuffer *)buffer toPixelBuffer:(struct __CVBuffer *)buffer;
- (struct __CVBuffer *)pixelBufferFromOutputBacking:(id)backing forFeature:(id)feature;
- (BOOL)opacifyAndPermutePixelBuffer:(struct __CVBuffer *)buffer bufferContainsBGRA:(BOOL)bgra error:(id *)error;
- (void)prepareBlobNamed:(id)named forNewBlobBackingMode:(long long)mode bindMode:(int)mode;
- (BOOL)_matchEngineToOptions:(id)options error:(id *)error;
- (id)initWithContainer:(id)container error:(id *)error;
- (BOOL)collectParametersFromContainer:(id)container configuration:(id)configuration error:(id *)error;
- (id)initWithContainer:(id)container configuration:(id)configuration error:(id *)error;
- (int)_espressoDeviceForConfiguration:(id)configuration error:(id *)error;
- (BOOL)_setupContextAndPlanWithForceCPU:(BOOL)cpu error:(id *)error;
- (BOOL)_setupContextAndPlanWithConfiguration:(id)configuration error:(id *)error;
- (BOOL)_setupContextAndPlanWithConfiguration:(id)configuration usingCPU:(BOOL)cpu error:(id *)error;
- (BOOL)_setMultipleBuffersOnPlan:(void *)plan error:(id *)error;
- (BOOL)_handleAddNetworkToPlanStatus:(int)status error:(id *)error;
- (BOOL)_addCompiledNetworkOrProgramToPlan:(void *)plan error:(id *)error;
- (BOOL)_addNetworkToPlan:(void *)plan error:(id *)error;
- (BOOL)_setupContextAndPlanWithConfiguration:(id)configuration usingCPU:(BOOL)cpu reshapeWithContainer:(BOOL)container error:(id *)error;
- (id)evaluate:(id)evaluate error:(id *)error;
- (id)verifyInputs:(id)inputs error:(id *)error;
- (unsigned long long)obtainBuffer;
- (void)releaseBuffer:(unsigned long long)buffer;
- (BOOL)bindInputsAndOutputs:(id)outputs cleanUpBlocks:(id)blocks bufferIndex:(unsigned long long)index options:(id)options error:(id *)error;
- (BOOL)bindInputFeatureNamed:(id)named featureValue:(id)value bufferIndex:(unsigned long long)index cleanUpBlocks:(id)blocks error:(id *)error;
- (long long)inputBindStateForFeatureValue:(id)value error:(id *)error;
- (BOOL)bindDirectlyInputFeatureNamed:(id)named pixelBuffer:(struct __CVBuffer *)buffer cleanUpBlocks:(id)blocks error:(id *)error;
- (struct __CVBuffer *)copyPixelBufferByApplyingImagePreprocessingForFeatureNamed:(id)named toPixelBuffer:(struct __CVBuffer *)buffer;
- (struct __CVBuffer *)copyPixelBufferByApplyingImagePreprocessing:(const struct vimage2espresso_param { float x0; int x1; int x2; int x3; float x4; float x5; float x6; float x7; int x8; unsigned int x9; unsigned int x10; unsigned int x11; int x12; int x13; int x14; } *)preprocessing toPixelBuffer:(struct __CVBuffer *)buffer;
- (BOOL)transferOneComponent16HalfPixelBuffer:(struct __CVBuffer *)buffer toPixelBuffer:(struct __CVBuffer *)buffer withScale:(float)scale bias:(float)bias;
- (BOOL)lockPixelBuffer:(struct __CVBuffer *)buffer cleanUpBlocks:(id)blocks error:(id *)error;
- (BOOL)bindInputFeatureNamed:(id)named pixelBuffer:(struct __CVBuffer *)buffer cleanUpBlocks:(id)blocks error:(id *)error;
- (BOOL)bindInputFeatureNamed:(id)named convertingMultiArray:(id)array bufferIndex:(unsigned long long)index error:(id *)error;
- (BOOL)bindInputFeatures:(id)features bufferIndex:(unsigned long long)index cleanUpBlocks:(id)blocks error:(id *)error;
- (BOOL)_setMultiArrayOutputBacking:(id)backing forOutputFeatureName:(id)name toEbuf:(struct { void * x0; void * x1; unsigned long long x2[4] unsigned long long x3[4] unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)ebuf error:(id *)error;
- (BOOL)_espressoOutputShapeForFeatureName:(id)name matchesShapeOfMLMultiArray:(id)array;
- (BOOL)tryToSetOutputBacking:(id)backing forFeatureName:(id)name toEbuf:(struct { void * x0; void * x1; unsigned long long x2[4] unsigned long long x3[4] unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)ebuf reportPointerFlags:(int *)flags error:(id *)error;
- (BOOL)bindOutputBuffers:(const void *)buffers outputBackings:(id)backings automaticOutputBackingMode:(id)mode directlyBoundOutputFeatureNames:(id)names error:(id *)error;
- (id)evaluateInputs:(id)inputs options:(id)options error:(id *)error;
- (id)evaluateInputs:(id)inputs options:(id)options verifyInputs:(BOOL)inputs error:(id *)error;
- (BOOL)updateDynamicOutputBlobIndicatorCacheAndReturnError:(id *)error;
- (void)populateMultiArrayShape:(id *)shape strides:(id *)strides forEbuf:(struct { void * x0; void * x1; unsigned long long x2[4] unsigned long long x3[4] unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)ebuf featureDescription:(id)description ndArrayInterpretation:(BOOL)interpretation;
- (id)pixelBufferBackedMultiArrayWithShape:(id)shape;
- (id)outputBackingMultiArrayForFeatureName:(id)name;
- (id)completeOutputBackings:(id)backings automaticOutputBackingMode:(id)mode error:(id *)error;
- (id)evaluateInputs:(id)inputs bufferIndex:(unsigned long long)index options:(id)options error:(id *)error;
- (BOOL)executePlan:(void *)plan error:(id *)error;
- (BOOL)bindDynamicOutputBuffers:(const void *)buffers error:(id *)error;
- (id)populateOutputs:(unsigned long long)outputs outputBackings:(id)backings directlyBoundOutputFeatureNames:(id)names error:(id *)error;
- (BOOL)copyEbuf:(const struct { void * x0; void * x1; unsigned long long x2[4] unsigned long long x3[4] unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)ebuf ofPixelType:(unsigned long long)type toPixelBuffer:(struct __CVBuffer *)buffer error:(id *)error;
- (id)imageFeatureValueFromEbuf:(struct { void * x0; void * x1; unsigned long long x2[4] unsigned long long x3[4] unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)ebuf backingCVPixelBuffer:(struct __CVBuffer *)buffer description:(id)description error:(id *)error;
- (id)multiArrayFeatureValueFromEbuf:(struct { void * x0; void * x1; unsigned long long x2[4] unsigned long long x3[4] unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)ebuf backingMultiArray:(id)array description:(id)description outputName:(id)name error:(id *)error;
- (struct __CVBuffer *)_pixelBufferFromEbuf:(struct { void * x0; void * x1; unsigned long long x2[4] unsigned long long x3[4] unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; int x14; } *)ebuf description:(id)description error:(id *)error;
- (void)_deallocContextAndPlan;
- (void)dealloc;
- (id)sortBatchByShape:(id)shape withMap:(id *)map error:(id *)error;
- (BOOL)resetSizes:(id)sizes error:(id *)error;
- (BOOL)resetSizesWithEspressoConfigurations:(id)configurations error:(id *)error;
- (BOOL)setEspressoBlobShapes:(void *)shapes widths:(void *)widths heights:(void *)heights ks:(void *)ks batches:(void *)batches sequences:(void *)sequences ranks:(void *)ranks error:(id *)error;
- (BOOL)resetSizesNoAutoRelease:(id)release error:(id *)error;
- (BOOL)copyImagePreprocessingParametersTo:(void *)to error:(id *)error;
- (BOOL)rebuildPlan:(id *)plan;
- (BOOL)rebuildPlan:(BOOL)plan error:(id *)error;
- (id)evaluateBatch:(id)batch options:(id)options error:(id *)error;
- (id)predictionFromFeatures:(id)features options:(id)options error:(id *)error;
- (id)predictionsFromBatch:(id)batch options:(id)options error:(id *)error;
- (void)dumpTestVectorsToPath:(id)path;
- (id)parameterValueForKey:(id)key error:(id *)error;
- (unsigned long long)supportFromEspressoLayerInfo:(id)info;
- (unsigned long long)supportFromEspressoPlatform:(int)platform;
- (id)executionSchedule;
- (void)enableInstrumentsTracing;
@end

#endif /* MLNeuralNetworkEngine_h */
