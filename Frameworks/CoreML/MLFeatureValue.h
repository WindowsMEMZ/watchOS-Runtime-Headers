//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1877.50.1.0.0
//
#ifndef MLFeatureValue_h
#define MLFeatureValue_h
@import Foundation;

#include "MLMultiArray.h"
#include "MLSequence.h"
#include "NSCopying-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@class NSDictionary, NSObject, NSString;

@interface MLFeatureValue : NSObject<NSCopying, NSSecureCoding>

@property (retain) id value;
@property (retain, nonatomic) NSObject *objectValue;
@property (readonly, nonatomic) long long type;
@property (readonly, nonatomic) BOOL undefined;
@property (readonly, nonatomic) long long int64Value;
@property (readonly, nonatomic) double doubleValue;
@property (readonly, copy, nonatomic) NSString *stringValue;
@property (readonly, nonatomic) MLMultiArray *multiArrayValue;
@property (readonly, nonatomic) NSDictionary *dictionaryValue;
@property (readonly, nonatomic) struct __CVBuffer * imageBufferValue;
@property (readonly, nonatomic) MLSequence *sequenceValue;

/* class methods */
+ (unsigned long long)visionCropAndScaleOptionFromOptions:(id)options;
+ (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })cropRectFromOptions:(id)options;
+ (id)featureValueWithImageAtURL:(id)url pixelsWide:(long long)wide pixelsHigh:(long long)high pixelFormatType:(unsigned int)type options:(id)options error:(id *)error;
+ (id)featureValueWithImageAtURL:(id)url constraint:(id)constraint options:(id)options error:(id *)error;
+ (id)featureValueWithCGImage:(struct CGImage *)cgimage pixelsWide:(long long)wide pixelsHigh:(long long)high pixelFormatType:(unsigned int)type options:(id)options error:(id *)error;
+ (id)featureValueWithCGImage:(struct CGImage *)cgimage constraint:(id)constraint options:(id)options error:(id *)error;
+ (id)featureValueWithImageAtURL:(id)url orientation:(unsigned int)orientation pixelsWide:(long long)wide pixelsHigh:(long long)high pixelFormatType:(unsigned int)type options:(id)options error:(id *)error;
+ (id)featureValueWithImageAtURL:(id)url orientation:(unsigned int)orientation constraint:(id)constraint options:(id)options error:(id *)error;
+ (id)featureValueWithCGImage:(struct CGImage *)cgimage orientation:(unsigned int)orientation pixelsWide:(long long)wide pixelsHigh:(long long)high pixelFormatType:(unsigned int)type options:(id)options error:(id *)error;
+ (id)featureValueWithCGImage:(struct CGImage *)cgimage orientation:(unsigned int)orientation constraint:(id)constraint options:(id)options error:(id *)error;
+ (id)undefinedFeatureValueWithType:(long long)type;
+ (id)featureValueWithInt64:(long long)int64;
+ (id)featureValueWithDouble:(double)double;
+ (id)featureValueWithString:(id)string;
+ (id)featureValueWithPixelBuffer:(struct __CVBuffer *)buffer;
+ (id)featureValueWithMultiArray:(id)array;
+ (id)featureValueWithSequence:(id)sequence;
+ (id)featureValueWithDictionary:(id)dictionary error:(id *)error;
+ (id)featureValueWithStringKeyDictionary:(id)dictionary;
+ (id)featureValueWithInt64KeyDictionary:(id)dictionary;
+ (id)featureValueOfType:(long long)type fromObject:(id)object error:(id *)error;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)debugQuickLookObject;
- (id)initWithValue:(id)value type:(long long)type;
- (id)initWithUndefinedValueAndType:(long long)type;
- (void)dealloc;
- (id)description;
- (BOOL)isEqualToFeatureValue:(id)value;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)equal;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)getFeatureSize:(id *)size;
- (id)getFeatureSize:(id *)size ndArrayMode:(BOOL)mode;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (BOOL)isUndefined;
@end

#endif /* MLFeatureValue_h */
