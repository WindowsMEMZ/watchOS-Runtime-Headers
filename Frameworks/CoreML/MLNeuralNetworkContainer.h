//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1877.50.1.0.0
//
#ifndef MLNeuralNetworkContainer_h
#define MLNeuralNetworkContainer_h
@import Foundation;

#include "MLCompilerNeuralNetworkOutput.h"
#include "MLModel.h"
#include "MLNeuralNetworksCompileTimeParams.h"
#include "MLVersionInfo.h"

@class NSArray, NSDictionary, NSString;
@protocol {map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>>="__tree_"{__tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>>="__value_"Q}}};

@interface MLNeuralNetworkContainer : NSObject {
  /* instance variables */
  struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } widths;
  struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } heights;
  struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } ks;
  struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } batches;
  struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } sequences;
  struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> { struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>, std::allocator<std::__value_type<std::string, int>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } ranks;
}

@property (nonatomic) int precision;
@property (nonatomic) int engine;
@property (retain, nonatomic) NSArray *outputLayerNames;
@property (retain, nonatomic) NSArray *inputLayerNames;
@property (retain, nonatomic) NSDictionary *optionalInputTypes;
@property (retain, nonatomic) MLVersionInfo *compilerVersionInfo;
@property (readonly, nonatomic) NSString *activeFunction;
@property (retain, nonatomic) MLCompilerNeuralNetworkOutput *compilerOutput;
@property (retain, nonatomic) NSString *modelFilePath;
@property (retain, nonatomic) NSString *name;
@property (retain, nonatomic) NSDictionary *inputDescription;
@property (retain, nonatomic) NSDictionary *outputDescription;
@property (retain, nonatomic) NSDictionary *imageParameters;
@property (retain, nonatomic) NSDictionary *imagePreprocessingParams;
@property (retain, nonatomic) NSArray *configurationList;
@property (nonatomic) BOOL hasBidirectionalLayer;
@property (nonatomic) BOOL hasOptionalInputSequenceConcat;
@property (nonatomic) BOOL hasDynamicLayer;
@property (retain) NSArray *classLabels;
@property (retain) NSString *classScoreVectorName;
@property (retain) MLModel *transformDesc;
@property BOOL ndArrayInterpretation;
@property (retain, nonatomic) MLNeuralNetworksCompileTimeParams *updatableModelCompiledParams;
@property (retain, nonatomic) NSDictionary *optionalInputDefaultValues;
@property (nonatomic) BOOL modelIsEncrypted;
@property (retain, nonatomic) MLVersionInfo *modelVersionInfo;
@property (nonatomic) BOOL modelIsMIL;
@property (nonatomic) BOOL modelIsTrainingProgram;

/* class methods */
+ (id)containerFromFilePath:(id)path inputLayerNames:(id)names outputLayerNames:(id)names parameters:(id)parameters;
+ (BOOL)readIsClassifier:(void *)classifier;
+ (id)containerFromCompiledArchiveCommon:(void *)common filename:(id)filename modelVersionInfo:(id)info compilerVersionInfo:(id)info configuration:(id)configuration error:(id *)error;
+ (id)containerFromCompiledArchive:(void *)archive modelVersionInfo:(id)info compilerVersionInfo:(id)info configuration:(id)configuration error:(id *)error;

/* instance methods */
- (id)initWithFilePath:(id)path inputLayerNames:(id)names outputLayerNames:(id)names parameters:(id)parameters;
- (id)initWithFeatureDescriptions:(id)descriptions transformDesc:(id)desc outputLayerNames:(id)names classScoreVectorName:(id)name classLabels:(id)labels isEncrypted:(BOOL)encrypted modelVersionInfo:(id)info;
- (id)initWithFeatureDescriptions:(id)descriptions transformDesc:(id)desc outputLayerNames:(id)names classScoreVectorName:(id)name classLabels:(id)labels isEncrypted:(BOOL)encrypted modelVersionInfo:(id)info compilerVersionInfo:(id)info;
@end

#endif /* MLNeuralNetworkContainer_h */
