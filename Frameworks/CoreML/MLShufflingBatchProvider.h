//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1877.50.1.0.0
//
#ifndef MLShufflingBatchProvider_h
#define MLShufflingBatchProvider_h
@import Foundation;

#include "MLBatchProvider-Protocol.h"

@protocol {linear_congruential_engine<unsigned int, 48271U, 0U, 2147483647U>="__x_"I}, {vector<long, std::allocator<long>>="__begin_"^q"__end_"^q"__end_cap_"{__compressed_pair<long *, std::allocator<long>>="__value_"^q}};

@interface MLShufflingBatchProvider : NSObject<MLBatchProvider> {
  /* instance variables */
  struct vector<long, std::allocator<long>> { long long *__begin_; long long *__end_; struct __compressed_pair<long *, std::allocator<long>> { long long *__value_; } __end_cap_; } indices;
  struct linear_congruential_engine<unsigned int, 48271U, 0U, 2147483647U> { unsigned int __x_; } randomNumberGenerator;
}

@property (retain) NSObject<MLBatchProvider> *batchProvider;
@property (readonly, nonatomic) long long count;

/* instance methods */
- (id)initWithBatchProvider:(id)provider seed:(id)seed;
- (void)shuffle;
- (id)featuresAtIndex:(long long)index;
@end

#endif /* MLShufflingBatchProvider_h */
