//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1877.50.1.0.0
//
#ifndef MLTreeEnsembleXGBoostClassifier_h
#define MLTreeEnsembleXGBoostClassifier_h
@import Foundation;

#include "MLClassifier.h"

@class NSArray, NSString, NSURL;

@interface MLTreeEnsembleXGBoostClassifier : MLClassifier

@property (retain, nonatomic) NSArray *labelsForDataPoints;
@property (retain, nonatomic) NSURL *modelURL;
@property (retain, nonatomic) NSString *objective;
@property (nonatomic) unsigned long long numClasses;
@property (nonatomic) void * booster;

/* instance methods */
- (id)initWithDescription:(id)description configuration:(id)configuration indexToStringLabelArray:(struct vector<std::string, std::allocator<std::string>> { void * x0; void * x1; struct __compressed_pair<std::string *, std::allocator<std::string>> { void * x0; } x2; })array indexToIntLabelArray:(struct vector<long long, std::allocator<long long>> { long long * x0; long long * x1; struct __compressed_pair<long long *, std::allocator<long long>> { long long * x0; } x2; })array modelURL:(id)url error:(id *)error;
- (id)predictionFromFeatures:(id)features options:(id)options error:(id *)error;
- (id)predictionFromFeatures:(id)features error:(id *)error;
- (id)predictionsFromBatch:(id)batch options:(id)options error:(id *)error;
- (id)predictionsFromBatch:(id)batch error:(id *)error;
- (struct { struct vector<float, std::allocator<float>> { float * x0; float * x1; struct __compressed_pair<float *, std::allocator<float>> { float * x0; } x2; } x0; struct vector<float, std::allocator<float>> { float * x0; float * x1; struct __compressed_pair<float *, std::allocator<float>> { float * x0; } x2; } x1; unsigned long long x2; unsigned long long x3; })xgBoostDataFormatFromFeatureProvider:(id)provider error:(id *)error;
- (struct { struct vector<float, std::allocator<float>> { float * x0; float * x1; struct __compressed_pair<float *, std::allocator<float>> { float * x0; } x2; } x0; struct vector<float, std::allocator<float>> { float * x0; float * x1; struct __compressed_pair<float *, std::allocator<float>> { float * x0; } x2; } x1; unsigned long long x2; unsigned long long x3; })xgBoostDataFormatFromBatchProvider:(id)provider needLabels:(BOOL)labels error:(id *)error;
- (void)populateXGBoostDataFormat:(void *)format trainingData:(id)data dataIndex:(long long)index inputName:(id)name needLabels:(BOOL)labels error:(id *)error;
- (id)batchProviderFromXGboostResults:(const float *)results length:(unsigned long long)length error:(id *)error;
- (id)featureProviderFromXGboostResults:(const float *)results length:(unsigned long long)length error:(id *)error;
- (id)featureProviderArrayFromXGBoostResult:(const float *)result length:(unsigned long long)length error:(id *)error;
- (id)packageOutputWithPredictedLabel:(id)label classProbabilities:(id)probabilities;
- (BOOL)initializeBoosterIfOneExists;
- (id)loadLabelsWithStringLabels:(struct vector<std::string, std::allocator<std::string>> { void * x0; void * x1; struct __compressed_pair<std::string *, std::allocator<std::string>> { void * x0; } x2; })labels intLabels:(struct vector<long long, std::allocator<long long>> { long long * x0; long long * x1; struct __compressed_pair<long long *, std::allocator<long long>> { long long * x0; } x2; })labels;
- (BOOL)initializeAndvalidateObjectiveAndNumClassesWithConfiguration:(id)configuration error:(id *)error;
- (void)dealloc;
@end

#endif /* MLTreeEnsembleXGBoostClassifier_h */
