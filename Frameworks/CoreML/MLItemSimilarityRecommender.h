//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1877.50.1.0.0
//
#ifndef MLItemSimilarityRecommender_h
#define MLItemSimilarityRecommender_h
@import Foundation;

#include "MLModel.h"
#include "MLCompiledModelLoader-Protocol.h"
#include "MLModelConfiguration.h"
#include "MLModelDescription.h"
#include "MLModelMetadata.h"
#include "MLModelSpecificationLoader-Protocol.h"
#include "MLModeling-Protocol.h"
#include "MLSpecificationCompiler-Protocol.h"

@class NSArray, NSData, NSDictionary, NSString;
@protocol {vector<double, std::allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::allocator<double>>="__value_"^d}}, {vector<std::pair<unsigned long long, double>, std::allocator<std::pair<unsigned long long, double>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned long long, double> *, std::allocator<std::pair<unsigned long long, double>>>="__value_"^v}}, {vector<unsigned char, std::allocator<unsigned char>>="__begin_"*"__end_"*"__end_cap_"{__compressed_pair<unsigned char *, std::allocator<unsigned char>>="__value_"*}}, {vector<unsigned long long, std::allocator<unsigned long long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long long *, std::allocator<unsigned long long>>="__value_"^Q}};

@interface MLItemSimilarityRecommender : MLModel<MLModelSpecificationLoader, MLModeling, MLCompiledModelLoader, MLSpecificationCompiler> {
  /* instance variables */
  struct vector<unsigned char, std::allocator<unsigned char>> { char *__begin_; char *__end_; struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> { char *__value_; } __end_cap_; } m_cached_model;
  NSData *m_model_data;
  unsigned long long m_num_items;
  NSString *m_item_data_feature_name;
  NSString *m_num_recommendations_feature_name;
  NSString *m_item_restriction_feature_name;
  NSString *m_item_exclusion_feature_name;
  NSString *m_item_list_output_feature_name;
  NSString *m_item_score_output_feature_name;
  NSDictionary *m_item_mapping;
  NSArray *m_item_string_list;
  NSArray *m_item_integer_list;
  struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } _m_scores;
  struct vector<unsigned long long, std::allocator<unsigned long long>> { unsigned long long *__begin_; unsigned long long *__end_; struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> { unsigned long long *__value_; } __end_cap_; } _m_items;
  struct vector<unsigned long long, std::allocator<unsigned long long>> { unsigned long long *__begin_; unsigned long long *__end_; struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> { unsigned long long *__value_; } __end_cap_; } _m_item_buffer;
  struct vector<unsigned char, std::allocator<unsigned char>> { char *__begin_; char *__end_; struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> { char *__value_; } __end_cap_; } _m_item_invalid_mask;
  struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } _m_item_predictions;
  struct vector<std::pair<unsigned long long, double>, std::allocator<std::pair<unsigned long long, double>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<unsigned long long, double> *, std::allocator<std::pair<unsigned long long, double>>> { void *__value_; } __end_cap_; } _m_item_heap;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) MLModelDescription *modelDescription;
@property (readonly, nonatomic) MLModelConfiguration *configuration;
@property (readonly, nonatomic) BOOL supportsConcurrentSubmissions;
@property (readonly, nonatomic) unsigned long long predictionTypeForKTrace;
@property (readonly, nonatomic) BOOL recordsPredictionEvent;
@property (readonly, nonatomic) unsigned long long signpostID;
@property (readonly) MLModelMetadata *metadata;

/* class methods */
+ (id)loadModelFromSpecificationWithCompilationOptions:(void *)options options:(id)options error:(id *)error;
+ (id)loadModelFromSpecification:(void *)specification configuration:(id)configuration error:(id *)error;
+ (id)compileSpecification:(void *)specification toArchive:(void *)archive options:(id)options error:(id *)error;
+ (id)compiledVersionForSpecification:(void *)specification options:(id)options error:(id *)error;
+ (id)loadModelFromCompiledArchive:(void *)archive modelVersionInfo:(id)info compilerVersionInfo:(id)info configuration:(id)configuration error:(id *)error;

/* instance methods */
- (const char *)modelData;
- (id)_itemForIndex:(unsigned long long)index error:(id *)error;
- (BOOL)_mapItemSequence:(id)sequence dest:(void *)dest error:(id *)error;
- (id)predictionFromFeatures:(id)features options:(id)options error:(id *)error;
@end

#endif /* MLItemSimilarityRecommender_h */
