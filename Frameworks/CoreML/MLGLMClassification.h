//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1877.50.1.0.0
//
#ifndef MLGLMClassification_h
#define MLGLMClassification_h
@import Foundation;

#include "MLClassifier.h"
#include "MLModelSpecificationLoader-Protocol.h"

@class NSMutableArray, NSString;
@protocol {shared_ptr<CoreML::Specification::Model>="__ptr_"^{Model}"__cntrl_"^{__shared_weak_count}}, {vector<double, std::allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::allocator<double>>="__value_"^d}}, {vector<std::vector<double>, std::allocator<std::vector<double>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>="__value_"^v}};

@interface MLGLMClassification : MLClassifier<MLModelSpecificationLoader> {
  /* instance variables */
  struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } intercept;
  struct vector<std::vector<double>, std::allocator<std::vector<double>>> { void *__begin_; void *__end_; struct __compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>> { void *__value_; } __end_cap_; } weights;
  NSMutableArray *classLabels;
  long long classType;
  int postEvalTransForm;
  int classEncoding;
  struct shared_ptr<CoreML::Specification::Model> { struct Model *__ptr_; struct __shared_weak_count *__cntrl_; } m_spec;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)loadModelFromSpecification:(void *)specification configuration:(id)configuration error:(id *)error;

/* instance methods */
- (id)initWithSpecification:(void *)specification configuration:(id)configuration error:(id *)error;
- (id)classify:(id)classify error:(id *)error;
- (BOOL)calculateClassProbability:(double *)probability input:(id)input error:(id *)error;
- (id)classify:(id)classify options:(id)options error:(id *)error;
- (id)classify:(id)classify topK:(unsigned long long)k error:(id *)error;
@end

#endif /* MLGLMClassification_h */
