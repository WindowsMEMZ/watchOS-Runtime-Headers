//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1877.50.1.0.0
//
#ifndef MLNearestNeighborsLinearIndex_h
#define MLNearestNeighborsLinearIndex_h
@import Foundation;

#include "MLNearestNeighborsIndex-Protocol.h"
#include "NSSecureCoding-Protocol.h"

@protocol {vector<float, std::allocator<float>>="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, std::allocator<float>>="__value_"^f}};

@interface MLNearestNeighborsLinearIndex : NSObject<MLNearestNeighborsIndex, NSSecureCoding> {
  /* instance variables */
  struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } vData;
  struct vector<float, std::allocator<float>> { float *__begin_; float *__end_; struct __compressed_pair<float *, std::allocator<float>> { float *__value_; } __end_cap_; } vDataL2Squared;
}

@property (nonatomic) unsigned long long numDataPoints;
@property (nonatomic) unsigned long long numDimensions;

/* class methods */
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)initWithDataset:(struct vector<float, std::allocator<float>> { float * x0; float * x1; struct __compressed_pair<float *, std::allocator<float>> { float * x0; } x2; })dataset numberOfDimensions:(unsigned long long)dimensions;
- (struct vector<std::pair<unsigned long, float>, std::allocator<std::pair<unsigned long, float>>> { void * x0; void * x1; struct __compressed_pair<std::pair<unsigned long, float> *, std::allocator<std::pair<unsigned long, float>>> { void * x0; } x2; })findNearestNeighbors:(unsigned long long)neighbors toQueryPoint:(const void *)point;
- (struct vector<std::pair<unsigned long, float>, std::allocator<std::pair<unsigned long, float>>> { void * x0; void * x1; struct __compressed_pair<std::pair<unsigned long, float> *, std::allocator<std::pair<unsigned long, float>>> { void * x0; } x2; })findNearestNeighbors:(unsigned long long)neighbors toIndex:(unsigned long long)index;
- (BOOL)updateWithData:(const void *)data error:(id *)error;
- (unsigned long long)dataPointCount;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
@end

#endif /* MLNearestNeighborsLinearIndex_h */
