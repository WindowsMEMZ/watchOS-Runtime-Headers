//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 266.1.0.0.0
//
#ifndef MDLAnimatedValue_h
#define MDLAnimatedValue_h
@import Foundation;

#include "NSCopying-Protocol.h"

@class NSArray;
@protocol {vector<(anonymous namespace)::TimeSampledVtValue, std::allocator<(anonymous namespace)::TimeSampledVtValue>>="__begin_"^{TimeSampledVtValue}"__end_"^{TimeSampledVtValue}"__end_cap_"{__compressed_pair<(anonymous namespace)::TimeSampledVtValue *, std::allocator<(anonymous namespace)::TimeSampledVtValue>>="__value_"^{TimeSampledVtValue}}};

@interface MDLAnimatedValue : NSObject<NSCopying> {
  /* instance variables */
  struct vector<(anonymous namespace)::TimeSampledVtValue, std::allocator<(anonymous namespace)::TimeSampledVtValue>> { struct TimeSampledVtValue *__begin_; struct TimeSampledVtValue *__end_; struct __compressed_pair<(anonymous namespace)::TimeSampledVtValue *, std::allocator<(anonymous namespace)::TimeSampledVtValue>> { struct TimeSampledVtValue *__value_; } __end_cap_; } _timeSampledData;
}

@property (readonly, nonatomic) unsigned long long precision;
@property (readonly, nonatomic) unsigned long long timeSampleCount;
@property (readonly, nonatomic) double minimumTime;
@property (readonly, nonatomic) double maximumTime;
@property (nonatomic) unsigned long long interpolation;
@property (readonly, nonatomic) NSArray *keyTimes;

/* instance methods */
- (id)init;
- (void)resetWithAnimatedValue:(id)value;
- (id)copyWithZone:(struct _NSZone *)zone;
- (struct VtValue { struct type { unsigned char x0[8] } x0; struct TfPointerAndBits<const VtValue::_TypeInfo> { struct _TypeInfo * x0; } x1; })defaultVtValue;
- (void)clear;
- (unsigned long long)getTimes:(double *)times maxCount:(unsigned long long)count;
- (void)resetWithUsdAttribute:(const void *)attribute timeScale:(double)scale;
- (void)resetWithUsdAttribute:(const void *)attribute timeScale:(double)scale time:(double)time;
- (BOOL)isAnimated;
@end

#endif /* MDLAnimatedValue_h */
