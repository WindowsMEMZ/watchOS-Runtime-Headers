//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 266.1.0.0.0
//
#ifndef MDLAsset_h
#define MDLAsset_h
@import Foundation;

#include "MDLAnimatedVector3Array.h"
#include "MDLAssetResolver-Protocol.h"
#include "MDLMeshBufferAllocator-Protocol.h"
#include "MDLObjectContainerComponent-Protocol.h"
#include "MDLVertexDescriptor.h"
#include "NSCopying-Protocol.h"
#include "NSFastEnumeration-Protocol.h"

@class NSMapTable, NSMutableArray, NSURL, NSUnitLength;

@interface MDLAsset : NSObject<NSCopying, NSFastEnumeration> {
  /* instance variables */
  NSMutableArray *_objects;
  BOOL _isSceneKitBridged;
  NSMapTable *_components;
  NSURL *_temporaryFolderURL;
}

@property (readonly, nonatomic) struct MDLAABB _bounds;
@property (nonatomic) double _timeCodesPerSecond;
@property (retain, nonatomic) NSURL *_temporaryFolderURL;
@property (retain, nonatomic) NSUnitLength *unitLength;
@property (nonatomic) float metersPerUnit;
@property (retain, nonatomic) MDLAnimatedVector3Array *extents;
@property (readonly, nonatomic) struct  boundingBox;
@property (nonatomic) double frameInterval;
@property (nonatomic) double startTime;
@property (nonatomic) double endTime;
@property (nonatomic)  upAxis;
@property (readonly, retain, nonatomic) NSURL *URL;
@property (retain, nonatomic) NSObject<MDLAssetResolver> *resolver;
@property (readonly, retain, nonatomic) NSObject<MDLMeshBufferAllocator> *bufferAllocator;
@property (readonly, retain, nonatomic) MDLVertexDescriptor *vertexDescriptor;
@property (readonly, nonatomic) unsigned long long count;
@property (retain, nonatomic) NSObject<MDLObjectContainerComponent> *masters;
@property (retain, nonatomic) NSObject<MDLObjectContainerComponent> *originals;
@property (retain, nonatomic) NSObject<MDLObjectContainerComponent> *animations;

/* class methods */
+ (void)convertToUSDZWithURL:(id)url;
+ (BOOL)isValidUSDZResource:(id)usdzresource;
+ (void)convertToUSDZ:(id)usdz writeToURL:(id)url;
+ (id)placeLightProbesWithDensity:(float)density heuristic:(long long)heuristic usingIrradianceDataSource:(id)source;
+ (BOOL)canExportFileExtension:(id)extension;
+ (BOOL)canImportFileExtension:(id)extension;

/* instance methods */
- (void)setComponent:(id)component forProtocol:(id)protocol;
- (void)setObject:(id)object forKeyedSubscript:(id)subscript;
- (id)componentConformingToProtocol:(id)protocol;
- (id)objectForKeyedSubscript:(id)subscript;
- (id)components;
- (id)childObjectsOfClass:(Class)class;
- (id)description;
- (void)enumerateChildObjectsOfClass:(Class)class usingBlock:(id /* block */)block stopPointer:(BOOL *)pointer;
- (void)resolveTextures;
- (void)loadTextures;
- (struct )boundingBoxAtTime:(double)time;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)_commonInit;
- (id)init;
- (void)dealloc;
- (id)initWithBufferAllocator:(id)allocator;
- (void)_conformVertexBuffers:(id)buffers error:(id *)error;
- (id)initWithData:(id)data name:(id)name vertexDescriptor:(id)descriptor bufferAllocator:(id)allocator preserveTopology:(BOOL)topology error:(id *)error;
- (id)initWithURL:(id)url options:(id)options error:(id *)error;
- (id)initWithURL:(id)url vertexDescriptor:(id)descriptor bufferAllocator:(id)allocator preserveTopology:(BOOL)topology error:(id *)error;
- (id)initWithURL:(id)url;
- (id)initWithURL:(id)url vertexDescriptor:(id)descriptor bufferAllocator:(id)allocator;
- (id)initThroughSCNKitBridgeWithURL:(id)url preserveTopology:(BOOL)topology error:(id)error;
- (id)initWithURL:(id)url bufferAllocator:(id)allocator preserveIndexing:(BOOL)indexing error:(id *)error;
- (BOOL)exportAssetToURL:(id)url error:(id *)error;
- (BOOL)exportAssetToURL:(id)url;
- (id)objectAtPath:(id)path;
- (void)addObject:(id)object;
- (void)removeObject:(id)object;
- (id)objects;
- (id)objectAtIndexedSubscript:(unsigned long long)subscript;
- (id)objectAtIndex:(unsigned long long)index;
- (unsigned long long)countByEnumeratingWithState:(struct { unsigned long long x0; id * x1; unsigned long long * x2; unsigned long long x3[5] } *)state objects:(id *)objects count:(unsigned long long)count;
@end

#endif /* MDLAsset_h */
