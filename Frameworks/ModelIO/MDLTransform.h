//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 266.1.0.0.0
//
#ifndef MDLTransform_h
#define MDLTransform_h
@import Foundation;

#include "MDLTransformComponent-Protocol.h"
#include "NSCopying-Protocol.h"

@class CAAnimation, NSArray, NSString;
@protocol {MDLAffineTransform="_keyedTranslation"{vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<double, float __attribute__((ext_vector_type(3)))> *, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>>="__value_"^v}}"_keyedRotation"{vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<double, float __attribute__((ext_vector_type(3)))> *, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>>="__value_"^v}}"_keyedShear"{vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<double, float __attribute__((ext_vector_type(3)))> *, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>>="__value_"^v}}"_keyedScale"{vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<double, float __attribute__((ext_vector_type(3)))> *, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>>="__value_"^v}}"_startTime"d"_greatestTime"d"_identity"B"_resetTransformStack"B"_evaluationTime"d"_transform"{float4x4="columns"[4]}"_invTransform"{float4x4="columns"[4]}"_jacobiRotation"{float4x4="columns"[4]}"_invJacobiRotation"{float4x4="columns"[4]}};

@interface MDLTransform : NSObject<NSCopying, MDLTransformComponent> {
  /* instance variables */
  struct MDLAffineTransform { struct vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<double, float __attribute__((ext_vector_type(3)))> *, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> { void *__value_; } __end_cap_; } _keyedTranslation; struct vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<double, float __attribute__((ext_vector_type(3)))> *, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> { void *__value_; } __end_cap_; } _keyedRotation; struct vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<double, float __attribute__((ext_vector_type(3)))> *, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> { void *__value_; } __end_cap_; } _keyedShear; struct vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<double, float __attribute__((ext_vector_type(3)))> *, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> { void *__value_; } __end_cap_; } _keyedScale; double _startTime; double _greatestTime; BOOL _identity; BOOL _resetTransformStack; double _evaluationTime; struct float4x4 { x[4] columns; } _transform; struct float4x4 { x[4] columns; } _invTransform; struct float4x4 { x[4] columns; } _jacobiRotation; struct float4x4 { x[4] columns; } _invJacobiRotation; } _transform;
}

@property (readonly, nonatomic) CAAnimation *transformAnimation;
@property (nonatomic)  translation;
@property (nonatomic)  rotation;
@property (nonatomic)  shear;
@property (nonatomic)  scale;
@property (nonatomic) struct { x0[4] } matrix;
@property (nonatomic) BOOL resetsTransform;
@property (readonly, nonatomic) double minimumTime;
@property (readonly, nonatomic) double maximumTime;
@property (readonly, copy, nonatomic) NSArray *keyTimes;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (struct { x0[4] })localTransformWithObject:(id)object atTime:(double)time;
+ (struct { x0[4] })globalTransformWithObject:(id)object atTime:(double)time;

/* instance methods */
- (2)scaleAtTime:(double)time;
- (2)shearAtTime:(double)time;
- (2)translationAtTime:(double)time;
- (2)rotationAtTime:(double)time;
- (void)setMatrix:(struct { x0[4] })matrix forTime:(double)time;
- (void)setRotation:(double)rotation;
- (void)setShear:(double)shear;
- (void)setScale:(double)scale;
- (void)setTranslation:(double)translation;
- (id)init;
- (id)initWithIdentity;
- (void)setIdentity;
- (id)initWithTransformComponent:(id)component;
- (id)initWithTransformComponent:(id)component resetsTransform:(BOOL)transform;
- (id)initWithMatrix:(struct { x0[4] })matrix;
- (id)initWithMatrix:(struct { x0[4] })matrix resetsTransform:(BOOL)transform;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)setLocalTransform:(struct { x0[4] })transform forTime:(double)time;
- (void)setLocalTransform:(struct { x0[4] })transform;
- (struct { x0[4] })localTransformAtTime:(double)time;
- (struct { x0[4] })rotationMatrixAtTime:(double)time;
@end

#endif /* MDLTransform_h */
