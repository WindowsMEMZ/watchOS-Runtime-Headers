//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 266.1.0.0.0
//
#ifndef MDLCamera_h
#define MDLCamera_h
@import Foundation;

#include "MDLObject.h"

@class CAAnimation;

@interface MDLCamera : MDLObject {
  /* instance variables */
  struct RTCamera { undefined * * x0; unsigned long long x1; unsigned long long x2; float x3; float x4; int x5; float * x6; id * * x7; struct { x0[4] } x8; struct { x0[4] } x9; struct RTRaySegment * x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; } * _camera;
}

@property (copy, nonatomic) CAAnimation *focalLengthAnimation;
@property (copy, nonatomic) CAAnimation *focalDistanceAnimation;
@property (copy, nonatomic) CAAnimation *fStopAnimation;
@property (copy, nonatomic) CAAnimation *apertureAnimation;
@property (copy, nonatomic) CAAnimation *apertureAspectAnimation;
@property (readonly, nonatomic) struct { x0[4] } projectionMatrix;
@property (nonatomic) unsigned long long projection;
@property (nonatomic) float nearVisibilityDistance;
@property (nonatomic) float farVisibilityDistance;
@property (nonatomic) float worldToMetersConversionScale;
@property (nonatomic) float barrelDistortion;
@property (nonatomic) float fisheyeDistortion;
@property (nonatomic) float opticalVignetting;
@property (nonatomic) float chromaticAberration;
@property (nonatomic) float focalLength;
@property (nonatomic) float focusDistance;
@property (nonatomic) float fieldOfView;
@property (nonatomic) float fStop;
@property (nonatomic) unsigned long long apertureBladeCount;
@property (nonatomic) float maximumCircleOfConfusion;
@property (nonatomic) double shutterOpenInterval;
@property (nonatomic) float sensorVerticalAperture;
@property (nonatomic) float sensorAspect;
@property (nonatomic)  sensorEnlargement;
@property (nonatomic)  sensorShift;
@property (nonatomic)  flash;
@property (nonatomic)  exposureCompression;
@property (nonatomic)  exposure;

/* instance methods */
- (id)init;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)dealloc;
- (long long)version;
- (struct RTCamera { undefined * * x0; unsigned long long x1; unsigned long long x2; float x3; float x4; int x5; float * x6; id * * x7; struct { x0[4] } x8; struct { x0[4] } x9; struct RTRaySegment * x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; } *)rtCamera;
- (struct { x0[4] })getViewMatrixAtTime:(double)time;
- (struct { x0[4] })getProjectionMatrixAtTime:(double)time;
- (3)rayTo:forViewPort:;
- (float)aperture;
- (void)setAperture:(float)aperture;
- (float)fov;
- (void)setFov:(float)fov;
- (float)aspect;
- (void)setAspect:(float)aspect;
- (float)circleOfConfusionForDistance:(float)distance;
- (float)zNear;
- (void)setZNear:(float)znear;
- (float)zFar;
- (void)setZFar:(float)zfar;
- (id)bokehKernelWithSize:;
- (void)frameBoundingBox:(struct )box setNearAndFar:(BOOL)far;
- (void)lookAt:;
- (void)lookAt:from:;
@end

#endif /* MDLCamera_h */
