//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 266.1.0.0.0
//
#ifndef MDLVoxelArray_h
#define MDLVoxelArray_h
@import Foundation;

#include "MDLObject.h"

@protocol {MortonCode="mortonkeyX"{vector<unsigned long long, std::allocator<unsigned long long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long long *, std::allocator<unsigned long long>>="__value_"^Q}}"mortonkeyY"{vector<unsigned long long, std::allocator<unsigned long long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long long *, std::allocator<unsigned long long>>="__value_"^Q}}"mortonkeyZ"{vector<unsigned long long, std::allocator<unsigned long long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long long *, std::allocator<unsigned long long>>="__value_"^Q}}}, {unique_ptr<ModelIO::Octree, std::default_delete<ModelIO::Octree>>="__ptr_"{__compressed_pair<ModelIO::Octree *, std::default_delete<ModelIO::Octree>>="__value_"^{Octree}}}, {unordered_map<unsigned long long, int, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, int>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, int>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, int>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, int>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, int>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, int>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, int>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>>="__value_"f}}};

@interface MDLVoxelArray : MDLObject {
  /* instance variables */
  struct unordered_map<unsigned long long, int, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, int>>> { struct __hash_table<std::__hash_value_type<unsigned long long, int>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, int>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, int>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, int>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, int>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, int>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>> { float __value_; } __p3_; } __table_; } _voxels;
  struct { " minimumExtent; m x0; a x1; x x2; int x3; m x4; u x5; m x6; E x7; x x8; int128 x9; e x10; in int128 x11; " x12; } _extent;
  struct MDLAABB { " maxBounds; m x0; int x1; in BOOL x2; out u x3; in double x4; short x5; " x6; } _bounds;
  float _voxelExtent;
  struct MortonCode { struct vector<unsigned long long, std::allocator<unsigned long long>> { unsigned long long *__begin_; unsigned long long *__end_; struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> { unsigned long long *__value_; } __end_cap_; } mortonkeyX; struct vector<unsigned long long, std::allocator<unsigned long long>> { unsigned long long *__begin_; unsigned long long *__end_; struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> { unsigned long long *__value_; } __end_cap_; } mortonkeyY; struct vector<unsigned long long, std::allocator<unsigned long long>> { unsigned long long *__begin_; unsigned long long *__end_; struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> { unsigned long long *__value_; } __end_cap_; } mortonkeyZ; } mortonCoder;
  struct unique_ptr<ModelIO::Octree, std::default_delete<ModelIO::Octree>> { struct __compressed_pair<ModelIO::Octree *, std::default_delete<ModelIO::Octree>> { struct Octree *__value_; } __ptr_; } _octreeData;
  BOOL _levelSet;
  float _interiorThickness;
  float _exteriorThickness;
   _originatingOffset;
}

@property (readonly, nonatomic) unsigned long long count;
@property (readonly, nonatomic) struct  voxelIndexExtent;
@property (readonly, nonatomic) struct  boundingBox;
@property (readonly, nonatomic) BOOL isValidSignedShellField;
@property (nonatomic) float shellFieldInteriorThickness;
@property (nonatomic) float shellFieldExteriorThickness;

/* instance methods */
- (void)recalculateExtents;
- (id)init;
- (id)initWithAsset:(id)asset divisions:(int)divisions patchRadius:(float)radius;
- (id)initWithData:(id)data boundingBox:(struct )box voxelExtent:(float)extent;
- (BOOL)voxelExistsAtIndex:(BOOL)index allowAnyX:(BOOL)x allowAnyY:(BOOL)y allowAnyZ:(BOOL)z;
- (id)voxelsWithinExtent:(struct )extent;
- (id)voxelIndices;
- (void)setVoxelAtIndex:;
- (void)setVoxelsForMesh:(id)mesh divisions:(int)divisions patchRadius:(float)radius;
- (void)unionWithVoxels:(id)voxels;
- (void)intersectWithVoxels:(id)voxels;
- (void)differenceWithVoxels:(id)voxels;
- (3)indexOfSpatialLocation:;
- (3)spatialLocationOfIndex:;
- (struct )voxelBoundingBoxAtIndex:;
- (void)convertToSignedShellField;
- (void)dilateNarrowBandInteriorWidthTo:(float)to AndExteriorWidthTo:(float)to;
- (void)erodeNarrowBandInteriorWidthTo:(float)to AndExteriorWidthTo:(float)to selector:(SEL)selector;
- (id)coarseMeshUsingAllocator:(id)allocator;
- (id)coarseMesh;
- (id)meshUsingAllocator:(id)allocator;
- (id)coarseVoxelMeshWithStyle:(unsigned long long)style;
- (struct vector<int, std::allocator<int>> { int * x0; int * x1; struct __compressed_pair<int *, std::allocator<int>> { int * x0; } x2; })boxesPerLayer;
- (id)initWithAsset:(id)asset divisions:(int)divisions interiorShells:(int)shells exteriorShells:(int)shells patchRadius:(float)radius;
- (id)initWithAsset:(id)asset divisions:(int)divisions interiorNBWidth:(float)nbwidth exteriorNBWidth:(float)nbwidth patchRadius:(float)radius;
- (void)setVoxelsForMesh:(id)mesh divisions:(int)divisions interiorShells:(int)shells exteriorShells:(int)shells patchRadius:(float)radius;
- (void)setVoxelsForMesh:(id)mesh divisions:(int)divisions interiorNBWidth:(float)nbwidth exteriorNBWidth:(float)nbwidth patchRadius:(float)radius;
@end

#endif /* MDLVoxelArray_h */
