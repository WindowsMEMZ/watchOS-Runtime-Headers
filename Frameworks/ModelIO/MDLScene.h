//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 266.1.0.0.0
//
#ifndef MDLScene_h
#define MDLScene_h
@import Foundation;

@class NSArray, NSMutableArray;
@protocol {vector<MDLLight *, std::allocator<MDLLight *>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<MDLLight *__strong *, std::allocator<MDLLight *>>="__value_"^@}}, {vector<ModelIO::RTRenderable *, std::allocator<ModelIO::RTRenderable *>>="__begin_"^^{RTRenderable}"__end_"^^{RTRenderable}"__end_cap_"{__compressed_pair<ModelIO::RTRenderable **, std::allocator<ModelIO::RTRenderable *>>="__value_"^^{RTRenderable}}};

@interface MDLScene : NSObject {
  /* instance variables */
  struct mutex { struct _opaque_pthread_mutex_t { long long x0; char x1[56] } x0; } * _sceneMutex;
  struct vector<ModelIO::RTRenderable *, std::allocator<ModelIO::RTRenderable *>> { struct RTRenderable * *__begin_; struct RTRenderable * *__end_; struct __compressed_pair<ModelIO::RTRenderable **, std::allocator<ModelIO::RTRenderable *>> { struct RTRenderable * *__value_; } __end_cap_; } _sceneObjects;
  struct vector<MDLLight *, std::allocator<MDLLight *>> { __end_ * *__begin_; __end_cap_ * * x0; struct __compressed_pair<MDLLight *__strong *, std::allocator<MDLLight *>> { id *__value_; } x1; } _sceneLights;
  int _signature;
}

@property (readonly, retain, nonatomic) NSArray *objects;

/* instance methods */
- (id)init;
- (void)dealloc;
- (int)acquireLockGuard;
- (void)releaseLockGuard:(int)guard;
- (5)hitTestRayFrom:(id)from;
- (BOOL)castRayFrom:(struct RTCamera { undefined * * x0; unsigned long long x1; unsigned long long x2; float x3; float x4; int x5; float * x6; id * * x7; struct { x0[4] } x8; struct { x0[4] } x9; struct RTRaySegment * x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; } *)from withDirection:(struct RTIntersectionResult { float x0; struct RTGeometry * x1; id x2; } *)direction;
- (void)addObject:(id)object;
- (void)clear;
- (id)raytraceSceneWithCamera:(const struct RTCamera { undefined * * x0; unsigned long long x1; unsigned long long x2; float x3; float x4; int x5; float * x6; id * * x7; struct { x0[4] } x8; struct { x0[4] } x9; struct RTRaySegment * x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; } *)camera reflection:(id)reflection irradiance:(id)irradiance;
@end

#endif /* MDLScene_h */
