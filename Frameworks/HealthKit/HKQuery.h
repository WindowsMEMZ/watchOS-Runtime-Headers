//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HKQuery_h
#define HKQuery_h
@import Foundation;

#include "HKHealthStore.h"
#include "HKObjectType.h"
#include "HKQueryClientInterface-Protocol.h"
#include "HKQueryDelegate-Protocol.h"
#include "HKQueryServerInterface-Protocol.h"
#include "HKQueryServerProxyProvider.h"
#include "HKSampleType.h"
#include "_HKFilter.h"
#include "_HKXPCExportable-Protocol.h"

@class NSArray, NSPredicate, NSString, NSUUID;
@protocol OS_dispatch_queue;

@interface HKQuery : NSObject<_HKXPCExportable, HKQueryClientInterface> {
  /* instance variables */
  BOOL _hasBeenExecuted;
  HKQueryServerProxyProvider *_proxyProvider;
  double _activationTime;
  HKHealthStore *_strongHealthStore;
  NSObject<HKQueryServerInterface> *_serverProxy;
}

@property (copy) NSUUID *activationUUID;
@property (readonly, nonatomic) _HKFilter *filter;
@property (readonly, weak, nonatomic) NSObject<HKQueryDelegate> *delegate;
@property (readonly) long long activationState;
@property (readonly) BOOL deactivating;
@property (readonly) long long deactivateCallCount;
@property (readonly, copy, nonatomic) NSArray *queryDescriptors;
@property (nonatomic) BOOL shouldSuppressDataCollection;
@property (copy, nonatomic) NSString *debugIdentifier;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *clientQueue;
@property (readonly, nonatomic) unsigned int applicationSDKVersion;
@property (retain, nonatomic) HKObjectType *objectType;
@property (retain, nonatomic) NSPredicate *predicate;
@property (nonatomic) long long qualityOfService;
@property (readonly) HKSampleType *sampleType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)predicateForFitnessFriendWorkoutsForFriendUUID:(id)uuid;
+ (id)predicateForFitnessFriendAchievementsForFriendUUID:(id)uuid;
+ (id)predicateForActivityCachesBetweenStartDateComponents:(id)components endDateComponents:(id)components;
+ (id)predicateForFitnessFriendActivitySnapshotsForFriendUUID:(id)uuid;
+ (id)predicateForObjectsWithMetadataKey:(id)key;
+ (id)predicateForObjectsWithMetadataKey:(id)key allowedValues:(id)values;
+ (id)predicateForObjectsWithMetadataKey:(id)key operatorType:(unsigned long long)type value:(id)value;
+ (id)predicateForSamplesWithStartDate:(id)date endDate:(id)date options:(unsigned long long)options;
+ (id)predicateForClinicalRecordsWithFHIRResourceType:(id)type;
+ (id)predicateForClinicalRecordsFromSource:(id)source FHIRResourceType:(id)type identifier:(id)identifier;
+ (id)predicateForSamplesWithStartDate:(id)date endDate:(id)date inclusiveEndDates:(BOOL)dates options:(unsigned long long)options;
+ (id)predicateForObjectsFromSource:(id)source;
+ (id)predicateForObjectsFromSources:(id)sources;
+ (id)predicateForObjectsFromSourceRevisions:(id)revisions;
+ (id)predicateForObjectsFromDevices:(id)devices;
+ (id)predicateForObjectsWithDeviceProperty:(id)property allowedValues:(id)values;
+ (id)_predicateForObjectsFromAppleWatches;
+ (id)_predicateForObjectsWithMinOSBuildVersion:(id)version maxOSBuildVersion:(id)version;
+ (id)predicateForObjectWithUUID:(id)uuid;
+ (id)predicateForObjectsWithUUIDs:(id)uuids;
+ (id)predicateForObjectsWithNoCorrelation;
+ (id)predicateForObjectsFromWorkout:(id)workout;
+ (id)predicateForObjectsAssociatedWithElectrocardiogram:(id)electrocardiogram;
+ (id)predicateForSamplesAssociatedWithSample:(id)sample;
+ (id)predicateForSamplesWithinDateInterval:(id)interval options:(unsigned long long)options;
+ (id)predicateForSamplesForDayFromDate:(id)date calendar:(id)calendar options:(unsigned long long)options;
+ (id)predicateForRecordsFromClinicalAccountIdentifier:(id)identifier;
+ (id)predicateForRecordsFromGatewayWithExternalIdentifier:(id)identifier;
+ (id)predicateForSamplesWithConceptIdentifier:(id)identifier keyPath:(id)path;
+ (id)predicateForSamplesWithConceptIdentifiers:(id)identifiers keyPath:(id)path;
+ (id)predicateForQuantitySamplesWithOperatorType:(unsigned long long)type quantity:(id)quantity;
+ (id)predicateForCategorySamplesWithOperatorType:(unsigned long long)type value:(long long)value;
+ (id)predicateForCategorySamplesEqualToValues:(id)values;
+ (id)predicateForWorkoutsWithWorkoutActivityType:(unsigned long long)type;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)type duration:(double)duration;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)type totalEnergyBurned:(id)burned;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)type totalDistance:(id)distance;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)type totalSwimmingStrokeCount:(id)count;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)type totalFlightsClimbed:(id)climbed;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)type quantityType:(id)type sumQuantity:(id)quantity;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)type quantityType:(id)type minimumQuantity:(id)quantity;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)type quantityType:(id)type maximumQuantity:(id)quantity;
+ (id)predicateForWorkoutsWithOperatorType:(unsigned long long)type quantityType:(id)type averageQuantity:(id)quantity;
+ (id)_predicateForWorkoutStatisticsWithOperatorType:(unsigned long long)type quantityType:(id)type keyPathPrefix:(id)prefix quantity:(id)quantity;
+ (id)predicateForWorkoutActivitiesWithWorkoutActivityType:(unsigned long long)type;
+ (id)predicateForWorkoutActivitiesWithOperatorType:(unsigned long long)type duration:(double)duration;
+ (id)predicateForWorkoutActivitiesWithStartDate:(id)date endDate:(id)date options:(unsigned long long)options;
+ (id)predicateForWorkoutActivitiesWithOperatorType:(unsigned long long)type quantityType:(id)type sumQuantity:(id)quantity;
+ (id)predicateForWorkoutActivitiesWithOperatorType:(unsigned long long)type quantityType:(id)type minimumQuantity:(id)quantity;
+ (id)predicateForWorkoutActivitiesWithOperatorType:(unsigned long long)type quantityType:(id)type maximumQuantity:(id)quantity;
+ (id)predicateForWorkoutActivitiesWithOperatorType:(unsigned long long)type quantityType:(id)type averageQuantity:(id)quantity;
+ (id)predicateForWorkoutsWithActivityPredicate:(id)predicate;
+ (id)predicateForActivitySummaryWithDateComponents:(id)components;
+ (id)predicateForActivitySummariesBetweenStartDateComponents:(id)components endDateComponents:(id)components;
+ (id)predicateForActivitySummariesWithActivityMoveMode:(long long)mode;
+ (id)predicateForElectrocardiogramsWithClassification:(long long)classification;
+ (id)predicateForElectrocardiogramsWithPrivateClassification:(unsigned long long)classification;
+ (id)predicateForElectrocardiogramsWithSymptomsStatus:(long long)status;
+ (id)predicateForObjectsFromContributorWithUUID:(id)uuid;
+ (id)predicateForUserDomainConceptsWithSemanticIdentifier:(id)identifier;
+ (id)predicateForUserDomainConceptsWithTypeIdentifier:(id)identifier;
+ (id)predicateForUserDomainConceptsWithTypeIdentifiers:(id)identifiers;
+ (id)predicateForUserDomainConceptWithUUID:(id)uuid;
+ (id)predicateForUserDomainConceptsWithUUIDs:(id)uuids;
+ (id)predicateForListUserDomainConceptWithListType:(unsigned long long)type;
+ (id)predicateForListUserDomainConceptsWithListTypes:(id)types;
+ (id)predicateForMedicalUserDomainConceptWithCategoryType:(long long)type;
+ (id)predicateForMedicalUserDomainConceptsWithCategoryTypes:(id)types;
+ (id)predicateForMedicalUserDomainConceptsMappingToSampleWithUUID:(id)uuid;
+ (id)predicateForMedicalUserDomainConceptsMappingToSampleWithUUIDs:(id)uuids;
+ (id)predicateForMedicalUserDomainConceptsByResolvingConceptResolutionDefinition:(id)definition;
+ (id)predicateForDiagnosticTestResultCategory:(id)category;
+ (id)predicateForDiagnosticTestResultWithReferenceRangeStatus:(long long)status;
+ (id)predicateForRecordsWithSortDateFromStartDateComponents:(id)components endDateComponents:(id)components;
+ (id)predicateForCreationDateWithTodayViewRange:(id)range;
+ (id)predicateForMedicalRecordWithOriginType:(unsigned long long)type;
+ (id)predicateForMedicalRecordWithState:(unsigned long long)state;
+ (id)predicateForMedicalRecordsAssociatedWithMedicalUserDomainConcept:(id)concept;
+ (id)predicateForMedicalRecordsWithSignedClinicalDataOriginIdentifier:(id)identifier;
+ (id)predicateForVerifiableClinicalRecordsWithRelevantDateWithinDateInterval:(id)interval;
+ (id)predicateForMedicationDoseEventWithStatus:(long long)status;
+ (id)predicateForMedicationDoseEventWithStatuses:(id)statuses;
+ (id)predicateForMedicationDoseEventWithMedicationIdentifier:(id)identifier;
+ (id)predicateForMedicationDoseEventWithMedicationIdentifiers:(id)identifiers;
+ (id)predicateForMedicationDoseEventWithHashedMedicationIdentifier:(id)identifier;
+ (id)predicateForMedicationDoseEventWithHashedMedicationIdentifiers:(id)identifiers;
+ (id)predicateForMedicationDoseEventWithScheduleItemIdentifier:(id)identifier;
+ (id)predicateForMedicationDoseEventWithScheduleItemIdentifiers:(id)identifiers;
+ (id)predicateForStateOfMindWithValence:(double)valence operatorType:(unsigned long long)type;
+ (id)predicateForStateOfMindWithReflectiveInterval:(long long)interval;
+ (id)predicateForStateOfMindWithLabel:(long long)label;
+ (id)predicateForStateOfMindWithLabels:(id)labels;
+ (id)predicateForStateOfMindWithDomain:(long long)domain;
+ (id)predicateForStateOfMindWithDomains:(id)domains;
+ (id)clientInterfaceProtocol;
+ (id)serverInterfaceProtocol;
+ (void)configureClientInterface:(id)interface;
+ (void)configureServerInterface:(id)interface;
+ (Class)configurationClass;
+ (BOOL)shouldApplyAdditionalPredicateForObjectType:(id)type;
+ (id)taskIdentifier;
+ (id)clientInterface;
+ (id)serverInterface;
+ (id)_cachedInterfaceForProtocol:(id)protocol configurationHandler:(id /* block */)handler;

/* instance methods */
- (id)_initWithObjectType:(id)type predicate:(id)predicate;
- (id)_initWithQueryDescriptors:(id)descriptors;
- (void)queue_deliverError:(id)error;
- (void)queue_validate;
- (void)queue_queryDidFinishActivation:(id)activation success:(BOOL)success error:(id)error;
- (void)queue_queryDidDeactivate:(id)deactivate;
- (BOOL)queue_shouldDeactivateAfterInitialResults;
- (void)queue_populateConfiguration:(id)configuration;
- (void)_throwInvalidArgumentExceptionIfHasBeenExecuted:(SEL)executed;
- (void)queue_dispatchToClientForUUID:(id)uuid shouldDeactivate:(BOOL)deactivate block:(id /* block */)block;
- (BOOL)hasQueryUUID:(id)uuid;
- (void)activateWithClientQueue:(id)queue healthStore:(id)store delegate:(id)delegate time:(double)time completion:(id /* block */)completion;
- (void)reactivateWithHealthStore:(id)store;
- (BOOL)deactivate;
- (void)queue_deactivate;
- (void)_queue_activateWithHealthStore:(id)store activationUUID:(id)uuid isReactivating:(BOOL)reactivating completion:(id /* block */)completion;
- (void)_queue_finishActivationWithServerProxy:(id)proxy activationUUID:(id)uuid error:(id)error completion:(id /* block */)completion;
- (BOOL)_queue_deactivateWithError:(id)error;
- (void)client_deliverError:(id)error forQuery:(id)query;
- (id)_filterForPredicate:(id)predicate objectType:(id)type;
- (id)exportedInterface;
- (id)remoteInterface;
- (void)connectionInvalidated;
- (void)connectionInterrupted;
- (id)_filter;
@end

#endif /* HKQuery_h */
