//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.454, BuildTime: 2024-02-08T22:07:34Z)
//
//    - LC_BUILD_VERSION:  Platform: watchOSSimulator, MinOS: 10.2, SDK: 10.2, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 4146.2.12.2.2
//
#ifndef HKElectrocardiogram_h
#define HKElectrocardiogram_h
@import Foundation;

#include "HKSample.h"
#include "HKQuantity.h"
#include "_HKBinarySample-Protocol.h"

@class NSArray, NSNumber, NSString;
@protocol {Electrocardiogram="_vptr$Base"^^?"_frequency"d"_leads"{PtrVector<binarysample::ElectrocardiogramLead>="_v"{vector<std::unique_ptr<binarysample::ElectrocardiogramLead>, std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::unique_ptr<binarysample::ElectrocardiogramLead> *, std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>="__value_"^v}}}"_has"{?="frequency"b1}};

@interface HKElectrocardiogram : HKSample<_HKBinarySample> {
  /* instance variables */
  struct Electrocardiogram { undefined * *_vptr$Base; double _frequency; struct PtrVector<binarysample::ElectrocardiogramLead> { struct vector<std::unique_ptr<binarysample::ElectrocardiogramLead>, std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>> { void *__begin_; void *__end_; struct __compressed_pair<std::unique_ptr<binarysample::ElectrocardiogramLead> *, std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>> { void *__value_; } __end_cap_; } _v; } _leads; struct { unsigned int x :1 frequency; } _has; } _reading;
}

@property (readonly, nonatomic) NSNumber *algorithmVersion;
@property (readonly, nonatomic) unsigned long long privateClassification;
@property (readonly, nonatomic) unsigned long long privateSymptoms;
@property (readonly, copy, nonatomic) NSArray *leadNames;
@property (readonly, nonatomic) NSArray *localizedSymptoms;
@property (readonly, nonatomic) long long numberOfVoltageMeasurements;
@property (readonly, copy, nonatomic) HKQuantity *samplingFrequency;
@property (readonly, nonatomic) long long classification;
@property (readonly, copy, nonatomic) HKQuantity *averageHeartRate;
@property (readonly, nonatomic) long long symptomsStatus;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)_electrocardiogramWithStartDate:(id)date device:(id)device metadata:(id)metadata;
+ (BOOL)_isConcreteObjectClass;
+ (BOOL)supportsSecureCoding;
+ (BOOL)supportsEquivalence;
+ (id)_localizedClassification:(unsigned long long)classification withActiveAlgorithmVersion:(long long)version;

/* instance methods */
- (long long)symptoms;
- (id)_algorithmVersion;
- (void)setReading:(struct Electrocardiogram { undefined * * x0; double x1; struct PtrVector<binarysample::ElectrocardiogramLead> { struct vector<std::unique_ptr<binarysample::ElectrocardiogramLead>, std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>> { void * x0; void * x1; struct __compressed_pair<std::unique_ptr<binarysample::ElectrocardiogramLead> *, std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>> { void * x0; } x2; } x0; } x2; struct { unsigned int x0 :1; } x3; })reading;
- (void)_setAverageHeartRate:(id)rate;
- (void)_setPrivateClassification:(unsigned long long)classification;
- (void)_setSymptomsStatus:(long long)status;
- (void)copyMeasurementValuesForLead:(long long)lead count:(unsigned long long)count target:(float *)target;
- (void)copyMeasurementFlagsForLead:(long long)lead count:(unsigned long long)count target:(char *)target;
- (void)enumerateDataForLead:(long long)lead block:(id /* block */)block;
- (void)_enumerateDataForLead:(long long)lead block:(id /* block */)block;
- (id)voltageMeasurementEnumerator;
- (void)_setPayload:(id)payload;
- (id)payload;
- (id)_validateWithConfiguration:(struct HKObjectValidationConfiguration { unsigned long long x0; unsigned int x1; })configuration;
- (BOOL)prepareForSaving:(id *)saving;
- (void)encodeWithCoder:(id)coder;
- (id)initWithCoder:(id)coder;
- (BOOL)isEquivalent:(id)equivalent;
- (id)_localizedClassificationWithActiveAlgorithmVersion:(long long)version;
- (id)_localizedSymptoms;
- (long long)numberOfValues;
- (id)frequency;
- (unsigned long long)_classification;
- (unsigned long long)_symptoms;
@end

#endif /* HKElectrocardiogram_h */
